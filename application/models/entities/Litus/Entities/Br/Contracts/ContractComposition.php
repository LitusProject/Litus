<?php

namespace Litus\Entities\Br\Contracts;

use \Litus\Entities\Br\Contracts\Contract;
use \Litus\Entities\Br\Contracts\Section;

use \InvalidArgumentException;

/**
 * @Entity(repositoryClass="Litus\Repositories\Br\Contracts\ContractCompositionRepository")
 * @Table(name="br.contract_composition", uniqueConstraints={@UniqueConstraint(name="contract_order_unique", columns={"contract", "order_no"}), @UniqueConstraint(name="contract_section_unique", columns={"contract", "section"})})
 */
class ContractComposition {

    /**
     * @var int An autogenerated ID.
     *
     * @Id
     * @Column(type="bigint")
     * @GeneratedValue
     */
    private $id;

    /**
     * @var \Litus\Entities\Br\Contracts\Contract The contract this object is a part of.
     *
     * @ManyToOne(targetEntity="Litus\Entities\Br\Contracts\Contract", cascade={"all"}, fetch="EAGER", inversedBy="parts")
     * @JoinColumn(name="contract", referencedColumnName="id", onDelete="CASCADE", nullable="false")
     */
    private $contract;

    /**
     * @var \Litus\Entities\Br\Contracts\Section The section described in this object.
     *
     * @ManyToOne(targetEntity="Litus\Entities\Br\Contracts\Section", fetch="EAGER")
     * @JoinColumn(name="section", referencedColumnName="name", onDelete="CASCADE", nullable="false")
     */
    // ManyToOne without a corresponding OneToMany requires a JoinColumn
    private $section;

    /**
     * @var int The order number of the section in the contract.
     *
     * @Column(name="order_no", type="integer", nullable="false")
     */
    // order is a reserved name in postgres
    private $order;

    /**
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * @return Contract
     */
    public function getContract()
    {
        return $this->contract;
    }

    /**
     * @throws InvalidArgumentException if $contract is null
     * @param Contract $contract
     * @return void
     */
    public function setContract(Contract $contract)
    {
        if($contract === null)
            throw new InvalidArgumentException('Contract cannot be null');
        $this->contract = $contract;
    }

    /**
     * @return Section
     */
    public function getSection()
    {
        return $this->section;
    }

    /**
     * @throws InvalidArgumentException if $section is null
     * @param Section $section
     * @return void
     */
    public function setSection(Section $section)
    {
        if($section === null)
            throw new InvalidArgumentException('Contract cannot be null.');
        $this->section = $section;
    }

    /**
     * @return int
     */
    public function getOrder()
    {
        return $this->order;
    }

    /**
     * Sets the order to the given value.
     *
     * @throws InvalidArgumentException if $order is not a positive integer
     * @param $order int
     * @return void
     */
    public function setOrder($order)
    {
        if(!is_numeric($order) || ($order <= 0))
            throw new InvalidArgumentException("Order must be a positive number");
        $this->order = round($order);
    }

}
