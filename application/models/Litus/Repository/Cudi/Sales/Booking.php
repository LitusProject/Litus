<?php

namespace Litus\Repository\Cudi\Sales;

use Doctrine\ORM\EntityRepository;

/**
 * Booking
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Booking extends EntityRepository
{
	public function findAllBookedByArticle($article, $order = 'DESC')
	{
		$query = $this->_em->createQueryBuilder();
		$resultSet = $query->select('b')
			->from('Litus\Entity\Cudi\Sales\Booking', 'b')
			->where($query->expr()->andX(
					$query->expr()->eq('b.article', ':article'),
					$query->expr()->eq('b.status', '\'booked\'')
				)
			)
			->orderBy('b.bookDate', $order)
			->setParameter('article', $article->getId())
			->getQuery()
			->getResult();
			
		return $resultSet;
	}
	
	public function findAllAssignedByArticle($article, $order = 'DESC')
	{
		$query = $this->_em->createQueryBuilder();
		$resultSet = $query->select('b')
			->from('Litus\Entity\Cudi\Sales\Booking', 'b')
			->where($query->expr()->andX(
					$query->expr()->eq('b.article', ':article'),
					$query->expr()->eq('b.status', '\'assigned\'')
				)
			)
			->orderBy('b.bookDate', $order)
			->setParameter('article', $article->getId())
			->getQuery()
			->getResult();
			
		return $resultSet;
	}
	
	public function findAllSoldByArticle($article, $order = 'DESC')
	{
		$query = $this->_em->createQueryBuilder();
		$resultSet = $query->select('b')
			->from('Litus\Entity\Cudi\Sales\Booking', 'b')
			->where($query->expr()->andX(
					$query->expr()->eq('b.article', ':article'),
					$query->expr()->eq('b.status', '\'sold\'')
				)
			)
			->orderBy('b.bookDate', $order)
			->setParameter('article', $article->getId())
			->getQuery()
			->getResult();
			
		return $resultSet;
	}
}