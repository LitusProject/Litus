<?php

namespace BrBundle\Repository;

use BrBundle\Entity\Collaborator as CollaboratorEntity;
use BrBundle\Entity\Company as CompanyEntity;
use CommonBundle\Entity\General\AcademicYear;

/**
 * Contract
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Contract extends \CommonBundle\Component\Doctrine\ORM\EntityRepository
{
    /**
     * @param  integer $id
     * @return integer
     */
    public function findCurrentVersionNb($id)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('MAX(e.version)')
            ->from('BrBundle\Entity\Contract', 'c')
            ->innerjoin('c.entries', 'e')
            ->where(
                $query->expr()->eq('c.id', ':id')
            )
            ->getQuery()
            ->setParameter('id', $id)
            ->getSingleScalarResult();
    }

    /**
     * @param  CollaboratorEntity $collaborator
     * @return integer
     */
    public function findNextContractNbByCollaborator(CollaboratorEntity $collaborator)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $highestContractNb = $query->select('MAX(c.contractNb)')
            ->from('BrBundle\Entity\Contract', 'c')
            ->innerjoin('c.order', 'o')
            ->where(
                $query->expr()->eq('c.author', ':person')
            )
            ->setParameter('person', $collaborator)
            ->getQuery()
            ->getSingleScalarResult();

        return $highestContractNb + 1;
    }

    /**
     * @param  CollaboratorEntity $person
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    public function findAllNewOrSignedByPerson(CollaboratorEntity $person)
    {
//        $query = $this->getEntityManager()->createQueryBuilder();
//        $result = $query->select('c')
//            ->from('BrBundle\Entity\Contract', 'c')
//            ->innerjoin('c.order','o')
//            ->where(
//                $query->expr()->andX(
//                    $query->expr()->eq('c.author', ':person'),
//                    $query->expr()->eq('o.old', 'false')
//                )
//            )
//            ->setParameter('person', $person)
//            ->getQuery()
//            ->getResult();

        return $this->findAllNewOrSignedByPersonQuery($person)->getResult();
    }

    /**
     * @param  AcademicYear       $year
     * @param  CollaboratorEntity $person
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    public function findAllNewOrSignedByPersonByYear(CollaboratorEntity $person, AcademicYear $year)
    {
        return $this->findAllNewOrSignedByPersonByYearQuery($person, $year)->getResult();
    }

    /**
     * @param  AcademicYear       $year
     * @param  CollaboratorEntity $person
     * @return \Doctrine\ORM\Query
     */
    public function findAllNewOrSignedByPersonByYearQuery(CollaboratorEntity $person, AcademicYear $year)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('c')
            ->from('BrBundle\Entity\Contract', 'c')
            ->innerjoin('c.order', 'o')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('c.author', ':person'),
                    $query->expr()->eq('o.old', 'false'),
                    $query->expr()->between('c.date', ':start', ':end')
                )
            )
            ->setParameter('person', $person)
            ->setParameter('start', $year->getStartDate()->format('Y-m-d H:i:s'))
            ->setParameter('end', $year->getEndDate()->format('Y-m-d H:i:s'))
            ->getQuery();
    }

    /**
     * @param  CollaboratorEntity $person
     * @return \Doctrine\ORM\Query
     */
    public function findAllNewOrSignedByPersonQuery(CollaboratorEntity $person)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('c')
            ->from('BrBundle\Entity\Contract', 'c')
            ->innerjoin('c.order', 'o')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('c.author', ':person'),
                    $query->expr()->eq('o.old', 'false')
                )
            )
            ->setParameter('person', $person)
            ->getQuery();
    }

    /**
     * @param  CollaboratorEntity $person
     * @return integer
     */
    public function getContractAmountByPerson(CollaboratorEntity $person)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('COUNT(c)')
            ->from('BrBundle\Entity\Contract', 'c')
            ->where(
                $query->expr()->eq('c.author', ':person')
            )
            ->setParameter('person', $person)
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * @param  CollaboratorEntity $person
     * @return integer
     */
    public function getContractedRevenueByPerson(CollaboratorEntity $person)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('SUM(o.totalCost)')
            ->from('BrBundle\Entity\Contract', 'c')
            ->innerjoin('c.order', 'o')
            ->where(
                $query->expr()->eq('c.author', ':person')
            )
            ->setParameter('person', $person)
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * @param  CollaboratorEntity $person
     * @return integer
     */
    public function getPaidRevenueByPerson(CollaboratorEntity $person)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $result = $query->select('SUM(o.totalCost)')
            ->from('BrBundle\Entity\Contract', 'c')
            ->innerjoin('c.order', 'o')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('c.author', ':person'),
                    $query->expr()->eq('c.signed', 'true')
                )
            )
            ->setParameter('person', $person)
            ->getQuery()
            ->getSingleScalarResult();

        if ($result == '') {
            return 0;
        }

        return $result;
    }

    /**
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    public function findContractAuthors()
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('DISTINCT(c.author)')
            ->from('BrBundle\Entity\Contract', 'c')
            ->getQuery()
            ->getResult();
    }

    /**
     * @param AcademicYear $year
     *
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    public function findContractAuthorsByYear(AcademicYear $year)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('DISTINCT(c.author)')
            ->from('BrBundle\Entity\Contract', 'c')
            ->where(
                $query->expr()->between('c.date', ':start', ':end')
            )->setParameter('start', $year->getStartDate()->format('Y-m-d H:i:s'))
            ->setParameter('end', $year->getEndDate()->format('Y-m-d H:i:s'))
            ->getQuery()
            ->getResult();
    }

    /**
     * @param  CompanyEntity $company
     * @return \Doctrine\ORM\Query
     */
    public function findAllNewOrSignedByCompanyQuery(CompanyEntity $company)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('c')
            ->from('BrBundle\Entity\Contract', 'c')
            ->innerjoin('c.order', 'o')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('c.company', ':company'),
                    $query->expr()->eq('o.old', 'false')
                )
            )
            ->setParameter('company', $company)
            ->getQuery();
    }

    /**
     * @param  CompanyEntity $company
     * @return integer
     */
    public function getContractAmountByCompany(CompanyEntity $company)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('COUNT(c)')
            ->from('BrBundle\Entity\Contract', 'c')
            ->where(
                $query->expr()->eq('c.company', ':company')
            )
            ->setParameter('company', $company)
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * @param  CompanyEntity $company
     * @return integer
     */
    public function getContractedRevenueByCompany(CompanyEntity $company)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('SUM(o.totalCost)')
            ->from('BrBundle\Entity\Contract', 'c')
            ->innerjoin('c.order', 'o')
            ->where(
                $query->expr()->eq('c.company', ':company')
            )
            ->setParameter('company', $company)
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * @param  CompanyEntity $company
     * @return integer
     */
    public function getPaidRevenueByCompany(CompanyEntity $company)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $result = $query->select('SUM(o.totalCost)')
            ->from('BrBundle\Entity\Contract', 'c')
            ->innerjoin('c.order', 'o')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('c.company', ':company'),
                    $query->expr()->eq('c.signed', 'TRUE')
                )
            )
            ->setParameter('company', $company)
            ->getQuery()
            ->getSingleScalarResult();

        if ($result == '') {
            return 0;
        }

        return $result;
    }

    /**
     * @return \Doctrine\ORM\Query
     */
    public function findContractCompanyQuery()
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('DISTINCT(c.company)')
            ->from('BrBundle\Entity\Contract', 'c')
            ->getQuery();
    }

    /**
     * @return \Doctrine\ORM\Query
     */
    public function findAllNewOrSignedQuery()
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('c')
            ->from('BrBundle\Entity\Contract', 'c')
            ->innerJoin('c.order', 'o')
            ->where(
                $query->expr()->orX(
                    $query->expr()->eq('o.old', 'false'),
                    $query->expr()->eq('c.signed', 'true')
                )
            )
            ->getQuery();
    }

    /**
     * @return \Doctrine\ORM\Query
     */
    public function findAllNewUnsignedQuery()
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('c')
            ->from('BrBundle\Entity\Contract', 'c')
            ->innerJoin('c.order', 'o')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('o.old', 'false'),
                    $query->expr()->eq('c.signed', 'false')
                )
            )
            ->orderBy('c.date', 'DESC')
            ->getQuery();
    }

    /**
     * @return \Doctrine\ORM\Query
     */
    public function findAllOldUnsignedQuery()
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('c')
            ->from('BrBundle\Entity\Contract', 'c')
            ->innerJoin('c.order', 'o')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('o.old', 'true'),
                    $query->expr()->eq('c.signed', 'false')
                )
            )
            ->orderBy('c.date', 'DESC')
            ->getQuery();
    }

    /**
     * @return \Doctrine\ORM\Query
     */
    public function findAllSignedQuery()
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('c')
            ->from('BrBundle\Entity\Contract', 'c')
            ->innerJoin('c.order', 'o')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('o.old', 'false'),
                    $query->expr()->eq('c.signed', 'true')
                )
            )
            ->orderBy('c.date', 'DESC')
            ->getQuery();
    }
}
