<?php
/**
 * Litus is a project by a group of students from the KU Leuven. The goal is to create
 * various applications to support the IT needs of student unions.
 *
 * @author Niels Avonds <niels.avonds@litus.cc>
 * @author Karsten Daemen <karsten.daemen@litus.cc>
 * @author Koen Certyn <koen.certyn@litus.cc>
 * @author Bram Gotink <bram.gotink@litus.cc>
 * @author Dario Incalza <dario.incalza@litus.cc>
 * @author Pieter Maene <pieter.maene@litus.cc>
 * @author Kristof MariÃ«n <kristof.marien@litus.cc>
 * @author Lars Vierbergen <lars.vierbergen@litus.cc>
 * @author Daan Wendelen <daan.wendelen@litus.cc>
 *
 * @license http://litus.cc/LICENSE
 */

namespace BrBundle\Repository;

use BrBundle\Entity\Collaborator as CollaboratorEntity,
    BrBundle\Entity\Company as CompanyEntity,
    CommonBundle\Component\Doctrine\ORM\EntityRepository;

/**
 * Contract
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Contract extends EntityRepository
{
    /**
     * @param  int $id
     * @return int
     */
    public function findCurrentVersionNb($id)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $highestVersionNb = $query->select('MAX(e.version)')
            ->from('BrBundle\Entity\Contract', 'c')
            ->innerjoin('c.contractEntries','e')
            ->where(
                $query->expr()->eq('c.id', ':id')
            )
            ->getQuery()
            ->setParameter('id', $id)
            ->getSingleScalarResult();

        return $highestVersionNb;
    }

    /**
     * @return int
     */
    public function findNextInvoiceNb()
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $highestInvoiceNb = $query->select('MAX(c.invoiceNb)')
            ->from('BrBundle\Entity\Contract', 'c')
            ->getQuery()
            ->getSingleScalarResult();

        return (int) ++$highestInvoiceNb;
    }

    /**
     * @return int
     */
    public function findNextContractNb()
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $highestContractNb = $query->select('MAX(c.contractNb)')
            ->from('BrBundle\Entity\Contract', 'c')
            ->getQuery()
            ->getSingleScalarResult();

        return (int) ++$highestContractNb;
    }

    /**
     * @param  CollaboratorEntity                           $person
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    public function findAllNewOrSignedByPerson(CollaboratorEntity $person)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $result = $query->select('c')
            ->from('BrBundle\Entity\Contract', 'c')
            ->innerjoin('c.order','o')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('c.author', ':person'),
                    $query->expr()->eq('o.old', 'false')
                )
            )
            ->setParameter('person', $person)
            ->getQuery()
            ->getResult();

        return $result;
    }

    /**
     * @param  CollaboratorEntity  $person
     * @return \Doctrine\ORM\Query
     */
    public function findAllNewOrSignedByPersonQuery(CollaboratorEntity $person)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $result = $query->select('c')
            ->from('BrBundle\Entity\Contract', 'c')
            ->innerjoin('c.order','o')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('c.author', ':person'),
                    $query->expr()->eq('o.old', 'false')
                )
            )
            ->setParameter('person', $person)
            ->getQuery();

        return $result;
    }

    /**
     * @param  CollaboratorEntity $person
     * @return int
     */
    public function getContractAmountByPerson(CollaboratorEntity $person)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $result = $query->select('COUNT(c)')
            ->from('BrBundle\Entity\Contract', 'c')
            ->where(
                $query->expr()->eq('c.author', ':person')
            )
            ->setParameter('person', $person)
            ->getQuery()
            ->getSingleScalarResult();

        return $result;
    }

    /**
     * @param  CollaboratorEntity $person
     * @return int
     */
    public function getContractedRevenueByPerson(CollaboratorEntity $person)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $result = $query->select('SUM(o.totalCost)')
            ->from('BrBundle\Entity\Contract', 'c')
            ->innerjoin('c.order','o')
            ->where(
                $query->expr()->eq('c.author', ':person')
            )
            ->setParameter('person', $person)
            ->getQuery()
            ->getSingleScalarResult();

        return $result;
    }

    /**
     * @param  CollaboratorEntity $person
     * @return int
     */
    public function getPaidRevenueByPerson(CollaboratorEntity $person)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $result = $query->select('SUM(o.totalCost)')
            ->from('BrBundle\Entity\Contract', 'c')
            ->innerjoin('c.order','o')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('c.author', ':person'),
                    $query->expr()->eq('c.signed', 'true')
                )
            )
            ->setParameter('person', $person)
            ->getQuery()
            ->getSingleScalarResult();

        if ($result == '') {
            return 0;
        }

        return $result;
    }

    /**
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    public function findContractAuthors()
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $result = $query->select('DISTINCT(c.author)')
            ->from('BrBundle\Entity\Contract', 'c')
            ->getQuery()
            ->getResult();

        return $result;
    }

    /**
     * @param  CompanyEntity       $company
     * @return \Doctrine\ORM\Query
     */
    public function findAllNewOrSignedByCompanyQuery(CompanyEntity $company)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $result = $query->select('c')
            ->from('BrBundle\Entity\Contract', 'c')
            ->innerjoin('c.order','o')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('c.company', ':company'),
                    $query->expr()->eq('o.old', 'false')
                )
            )
            ->setParameter('company', $company)
            ->getQuery();

        return $result;
    }

    /**
     * @param  CompanyEntity $company
     * @return int
     */
    public function getContractAmountByCompany(CompanyEntity $company)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $result = $query->select('COUNT(c)')
            ->from('BrBundle\Entity\Contract', 'c')
            ->where(
                $query->expr()->eq('c.company', ':company')
            )
            ->setParameter('company', $company)
            ->getQuery()
            ->getSingleScalarResult();

        return $result;
    }

    /**
     * @param  CompanyEntity $company
     * @return int
     */
    public function getContractedRevenueByCompany(CompanyEntity $company)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $result = $query->select('SUM(o.totalCost)')
            ->from('BrBundle\Entity\Contract', 'c')
            ->innerjoin('c.order','o')
            ->where(
                $query->expr()->eq('c.company', ':company')
            )
            ->setParameter('company', $company)
            ->getQuery()
            ->getSingleScalarResult();

        return $result;
    }

    /**
     * @param  CompanyEntity $company
     * @return int
     */
    public function getPaidRevenueByCompany(CompanyEntity $company)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $result = $query->select('SUM(o.totalCost)')
            ->from('BrBundle\Entity\Contract', 'c')
            ->innerjoin('c.order','o')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('c.company', ':company'),
                    $query->expr()->eq('c.signed', 'TRUE')
                )
            )
            ->setParameter('company', $company)
            ->getQuery()
            ->getSingleScalarResult();

        if ($result == '') {
            return 0;
        }

        return $result;
    }

    /**
     * @return \Doctrine\ORM\Query
     */
    public function findContractCompanyQuery()
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $result = $query->select('DISTINCT(c.company)')
            ->from('BrBundle\Entity\Contract', 'c')
            ->getQuery();

        return $result;
    }

    /**
     * @return \Doctrine\ORM\Query
     */
    public function findAllNewOrSignedQuery()
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $result = $query->select('c')
            ->from('BrBundle\Entity\Contract', 'c')
            ->innerJoin('c.order', 'o')
            ->where(
                $query->expr()->orX(
                    $query->expr()->eq('o.old', 'false'),
                    $query->expr()->eq('c.signed', 'true')
                )
            )
            ->getQuery();

        return $result;
    }
}
