<?php

namespace BrBundle\Repository\Company;

use CommonBundle\Entity\General\AcademicYear;

/**
 * Page
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Page extends \CommonBundle\Component\Doctrine\ORM\EntityRepository
{
    /**
     * @param  string       $slug
     * @param  AcademicYear $academicYear
     * @return \BrBundle\Entity\Company\Page
     */
    public function findOneActiveBySlug($slug, AcademicYear $academicYear)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('p')
            ->from('BrBundle\Entity\Company\Page', 'p')
            ->innerJoin('p.years', 'y')
            ->innerJoin('p.company', 'c')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('c.active', 'true'),
                    $query->expr()->eq('c.slug', ':slug'),
                    $query->expr()->eq('y', ':year')
                )
            )
            ->setParameter('slug', $slug)
            ->setParameter('year', $academicYear)
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param  string       $slug
     * @param  AcademicYear $academicYear
     * @return \BrBundle\Entity\Company\Page
     */
    public function findOneBySlug($slug, AcademicYear $academicYear)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('p')
            ->from('BrBundle\Entity\Company\Page', 'p')
            // ->innerJoin('p.years', 'y')
            ->innerJoin('p.company', 'c')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('c.active', 'true'),
                    $query->expr()->eq('c.slug', ':slug')
                    // $query->expr()->eq('y', ':year')
                )
            )
            ->setParameter('slug', $slug)
            // ->setParameter('year', $academicYear)
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param  AcademicYear $academicYear
     * @return \Doctrine\ORM\Query
     */
    public function findAllActiveQuery(AcademicYear $academicYear)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('p')
            ->from('BrBundle\Entity\Company\Page', 'p')
            ->innerJoin('p.years', 'y')
            ->innerJoin('p.company', 'c')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('c.active', 'true'),
                    $query->expr()->eq('y', ':year')
                )
            )
            ->setParameter('year', $academicYear)
            ->getQuery();
    }

    /**
     * @param  AcademicYear $academicYear
     * @param  string       $name
     * @param  string       $sector
     * @return \Doctrine\ORM\Query
     */
    public function findAllActiveBySearchQuery(AcademicYear $academicYear, $name = '%%', $sector = '')
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query = $query->select('p, c')
            ->from('BrBundle\Entity\Company\Page', 'p')
            ->innerJoin('p.years', 'y')
            ->innerJoin('p.company', 'c')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('c.active', 'true'),
                    $query->expr()->eq('y', ':year'),
                    $query->expr()->like($query->expr()->lower('c.name'), ':name')
                )
            )
            ->orderBy('c.name', 'ASC')
            ->setParameter('name', strtolower($name))
            ->setParameter('year', $academicYear);

        if ($sector !== '' && $sector !== 'all') {
            $query->andWhere(
                $query->expr()->eq('c.sector', ':sector')
            )
                ->setParameter('sector', $sector);
        }

        return $query->getQuery();
    }

    /**
     * @param  AcademicYear $academicYear
     * @param  string       $name
     * @param  string       $sector
     * @return \Doctrine\ORM\Query
     */
    public function findAllAtEventBySearchQuery(AcademicYear $academicYear, $name = '%%', $sector = '')
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query = $query->select('p, c')
            ->from('BrBundle\Entity\Company\Page', 'p')
            // ->innerJoin('p.years', 'y')
            ->innerJoin('p.company', 'c')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('p.atEvent', 'true'),
                    // $query->expr()->eq('y', ':year'),
                    $query->expr()->like($query->expr()->lower('c.name'), ':name')
                )
            )
            ->orderBy('c.name', 'ASC')
            ->setParameter('name', strtolower($name));
            // ->setParameter('year', $academicYear);

        if ($sector !== '' && $sector !== 'all') {
            $query->andWhere(
                $query->expr()->eq('c.sector', ':sector')
            )
                ->setParameter('sector', $sector);
        }

        return $query->getQuery();
    }
}
