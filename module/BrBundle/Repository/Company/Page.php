<?php
/**
 * Litus is a project by a group of students from the KU Leuven. The goal is to create
 * various applications to support the IT needs of student unions.
 *
 * @author Niels Avonds <niels.avonds@litus.cc>
 * @author Karsten Daemen <karsten.daemen@litus.cc>
 * @author Koen Certyn <koen.certyn@litus.cc>
 * @author Bram Gotink <bram.gotink@litus.cc>
 * @author Dario Incalza <dario.incalza@litus.cc>
 * @author Pieter Maene <pieter.maene@litus.cc>
 * @author Kristof MariÃ«n <kristof.marien@litus.cc>
 * @author Lars Vierbergen <lars.vierbergen@litus.cc>
 * @author Daan Wendelen <daan.wendelen@litus.cc>
 *
 * @license http://litus.cc/LICENSE
 */

namespace BrBundle\Repository\Company;

use CommonBundle\Component\Doctrine\ORM\EntityRepository,
    CommonBundle\Entity\General\AcademicYear;

/**
 * Page
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Page extends EntityRepository
{
    public function findOneActiveBySlug($slug, AcademicYear $academicYear)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('p')
            ->from('BrBundle\Entity\Company\Page', 'p')
            ->innerJoin('p.years', 'y')
            ->innerJoin('p.company', 'c')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('c.active', 'true'),
                    $query->expr()->eq('c.slug', ':slug'),
                    $query->expr()->eq('y', ':year')
                )
            )
            ->setParameter('slug', $slug)
            ->setParameter('year', $academicYear)
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();

        return $resultSet;
    }

    public function findAllActiveQuery(AcademicYear $academicYear)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('p')
            ->from('BrBundle\Entity\Company\Page', 'p')
            ->innerJoin('p.years', 'y')
            ->innerJoin('p.company', 'c')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('c.active', 'true'),
                    $query->expr()->eq('y', ':year')
                )
            )
            ->setParameter('year', $academicYear)
            ->getQuery();

        return $resultSet;
    }

    public function findAllActiveBySearchQuery(AcademicYear $academicYear, $string)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('p, c')
            ->from('BrBundle\Entity\Company\Page', 'p')
            ->innerJoin('p.years', 'y')
            ->innerJoin('p.company', 'c')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('c.active', 'true'),
                    $query->expr()->eq('y', ':year'),
                    $query->expr()->like($query->expr()->lower('c.name'), ':name')
                )
            )
            ->orderBy('c.name', 'ASC')
            ->setParameter('name', strtolower($string))
            ->setParameter('year', $academicYear)
            ->getQuery();

        return $resultSet;
    }
}
