<?php
/**
 * Litus is a project by a group of students from the KU Leuven. The goal is to create
 * various applications to support the IT needs of student unions.
 *
 * @author Niels Avonds <niels.avonds@litus.cc>
 * @author Karsten Daemen <karsten.daemen@litus.cc>
 * @author Koen Certyn <koen.certyn@litus.cc>
 * @author Bram Gotink <bram.gotink@litus.cc>
 * @author Dario Incalza <dario.incalza@litus.cc>
 * @author Pieter Maene <pieter.maene@litus.cc>
 * @author Kristof MariÃ«n <kristof.marien@litus.cc>
 * @author Lars Vierbergen <lars.vierbergen@litus.cc>
 * @author Daan Wendelen <daan.wendelen@litus.cc>
 * @author Mathijs Cuppens <mathijs.cuppens@litus.cc>
 * @author Floris Kint <floris.kint@vtk.be>
 *
 * @license http://litus.cc/LICENSE
 */

namespace BrBundle\Repository\Company;

use BrBundle\Entity\Company as CompanyEntity;
use DateTime;

/**
 * Job
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Job extends \CommonBundle\Component\Doctrine\ORM\EntityRepository
{
    /**
     * @param  string  $type
     * @param  integer $id
     * @return \BrBundle\Entity\Company\Job
     */
    public function findOneActiveByTypeAndId($type, $id)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('v')
            ->from('BrBundle\Entity\Company\Job', 'v')
            ->innerJoin('v.company', 'c')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('v.type', ':type'),
                    $query->expr()->eq('v.id', ':id'),
                    $query->expr()->gt('v.endDate', ':now'),
                    $query->expr()->eq('c.active', 'true'),
                    $query->expr()->eq('v.removed', 'FALSE')
                )
            )
            ->setParameter('id', $id)
            ->setParameter('type', $type)
            ->setParameter('now', new DateTime())
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param  CompanyEntity $company
     * @return \Doctrine\ORM\Query
     */
    public function findAllByCompanyQuery(CompanyEntity $company)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('v')
            ->from('BrBundle\Entity\Company\Job', 'v')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('v.company', ':company'),
                    $query->expr()->eq('v.removed', 'FALSE'),
                    $query->expr()->eq('v.approved', 'TRUE')
                )
            )
            ->setParameter('company', $company->getId())
            ->orderBy('v.type', 'ASC')
            ->getQuery();
    }

    /**
     * @param  string $type
     * @return \Doctrine\ORM\Query
     */
    public function findAllActiveByTypeByJobNameQuery($type)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('v, c')
            ->from('BrBundle\Entity\Company\Job', 'v')
            ->innerJoin('v.company', 'c')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('v.type', ':type'),
                    $query->expr()->gt('v.endDate', ':now'),
                    $query->expr()->eq('c.active', 'true'),
                    $query->expr()->eq('v.removed', 'FALSE'),
                    $query->expr()->eq('v.approved', 'TRUE')
                )
            )
            ->setParameter('type', $type)
            ->setParameter('now', new DateTime())
            ->orderBy('v.name', 'ASC')
            ->getQuery();
    }

    /**
     * @param  string $type
     * @return \Doctrine\ORM\Query
     */
    public function findAllActiveByTypeByDateQuery($type)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('v, c')
            ->from('BrBundle\Entity\Company\Job', 'v')
            ->innerJoin('v.company', 'c')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('v.type', ':type'),
                    $query->expr()->gt('v.endDate', ':now'),
                    $query->expr()->eq('c.active', 'true'),
                    $query->expr()->eq('v.removed', 'FALSE'),
                    $query->expr()->eq('v.approved', 'TRUE')
                )
            )
            ->setParameter('type', $type)
            ->setParameter('now', new DateTime())
            ->orderBy('v.dateUpdated', 'DESC')
            ->getQuery();
    }

    /**
     * @param  CompanyEntity $company
     * @param  string        $type
     * @return \Doctrine\ORM\Query
     */
    public function findAllActiveByCompanyAndTypeQuery(CompanyEntity $company, $type)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('v')
            ->from('BrBundle\Entity\Company\Job', 'v')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('v.company', ':company'),
                    $query->expr()->eq('v.type', ':type'),
                    $query->expr()->gt('v.endDate', ':now'),
                    $query->expr()->eq('v.removed', 'FALSE'),
                    $query->expr()->eq('v.approved', 'TRUE')
                )
            )
            ->setParameter('type', $type)
            ->setParameter('company', $company->getId())
            ->setParameter('now', new DateTime())
            ->orderBy('v.name', 'ASC')
            ->getQuery();
    }

    /**
     * @param  string $type
     * @param  string $sector
     * @param  string $location
     * @param  string $master
     * @return \Doctrine\ORM\Query
     */
    public function findAllActiveByTypeQuery($type, $sector, $location, $master)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select('v, c')
            ->from('BrBundle\Entity\Company\Job', 'v')
            ->innerJoin('v.company', 'c')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('v.type', ':type'),
                    $query->expr()->gt('v.endDate', ':now'),
                    $query->expr()->eq('c.active', 'true'),
                    $query->expr()->eq('v.removed', 'FALSE'),
                    $query->expr()->eq('v.approved', 'TRUE')
                )
            );

        if ($sector !== null) {
            $query->andWhere(
                $query->expr()->eq('v.sector', ':sector')
            )
                ->setParameter('sector', $sector);
        }

        if ($location !== null) {
            $query->andWhere(
                $query->expr()->eq('v.location', ':location')
            )
                ->setParameter('location', $location);
        }

        if ($master !== null) {
            $query->andWhere(
                $query->expr()->eq('v.master', ':master')
            )
                ->setParameter('master', $master);
        }

        return $query->setParameter('type', $type)
            ->setParameter('now', new DateTime())
            ->orderBy('c.name', 'ASC')
            ->addOrderBy('v.name', 'ASC')
            ->getQuery();
    }

    /**
     * @param  string $type
     * @param  string $sector
     * @param  string $location
     * @param  string $master
     * @return \Doctrine\ORM\Query
     */
    public function findAllActiveByTypeSortedByDateQuery($type, $sector, $location, $master)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select('v, c')
            ->from('BrBundle\Entity\Company\Job', 'v')
            ->innerJoin('v.company', 'c')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('v.type', ':type'),
                    $query->expr()->gt('v.endDate', ':now'),
                    $query->expr()->eq('c.active', 'true'),
                    $query->expr()->eq('v.removed', 'FALSE'),
                    $query->expr()->eq('v.approved', 'TRUE')
                )
            );
        if ($sector !== null) {
            $query->andWhere(
                $query->expr()->eq('v.sector', ':sector')
            )
                ->setParameter('sector', $sector);
        }

        if ($location !== null) {
            $query->andWhere(
                $query->expr()->eq('v.location', ':location')
            )
                ->setParameter('location', $location);
        }

        if ($master !== null) {
            $query->andWhere(
                $query->expr()->eq('v.master', ':master')
            )
                ->setParameter('master', $master);
        }

        return $query->setParameter('type', $type)
            ->setParameter('now', new DateTime())
            ->orderBy('v.dateUpdated', 'DESC')
            ->getQuery();
    }

    /**
     * @param  string $type
     * @param  string $sector
     * @param  string $location
     * @param  string $master
     * @return \Doctrine\ORM\Query
     */
    public function findAllActiveByTypeSortedByJobNameQuery($type, $sector, $location, $master)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select('v, c')
            ->from('BrBundle\Entity\Company\Job', 'v')
            ->innerJoin('v.company', 'c')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('v.type', ':type'),
                    $query->expr()->gt('v.endDate', ':now'),
                    $query->expr()->eq('c.active', 'true'),
                    $query->expr()->eq('v.removed', 'FALSE'),
                    $query->expr()->eq('v.approved', 'TRUE')
                )
            );

        if ($sector !== null) {
            $query->andWhere(
                $query->expr()->eq('v.sector', ':sector')
            )
                ->setParameter('sector', $sector);
        }

        if ($location !== null) {
            $query->andWhere(
                $query->expr()->eq('v.location', ':location')
            )
                ->setParameter('location', $location);
        }

        if ($master !== null) {
            $query->andWhere(
                $query->expr()->eq('v.master', ':master')
            )
                ->setParameter('master', $master);
        }

        return $query->setParameter('type', $type)
            ->setParameter('now', new DateTime())
            ->orderBy('v.name', 'ASC')
            ->getQuery();
    }
}
