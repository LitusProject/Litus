<?php
/**
 * Litus is a project by a group of students from the KU Leuven. The goal is to create
 * various applications to support the IT needs of student unions.
 *
 * @author Niels Avonds <niels.avonds@litus.cc>
 * @author Karsten Daemen <karsten.daemen@litus.cc>
 * @author Koen Certyn <koen.certyn@litus.cc>
 * @author Bram Gotink <bram.gotink@litus.cc>
 * @author Dario Incalza <dario.incalza@litus.cc>
 * @author Pieter Maene <pieter.maene@litus.cc>
 * @author Kristof MariÃ«n <kristof.marien@litus.cc>
 * @author Lars Vierbergen <lars.vierbergen@litus.cc>
 * @author Daan Wendelen <daan.wendelen@litus.cc>
 *
 * @license http://litus.cc/LICENSE
 */

namespace BrBundle\Repository\Company\Request;

use BrBundle\Entity\Company as CompanyEntity,
    BrBundle\Entity\Company\Job as JobEntity,
    CommonBundle\Component\Doctrine\ORM\EntityRepository;

/**
 * RequestInternship
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RequestInternship extends EntityRepository
{
    /**
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    public function findNewRequests()
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('r')
            ->from('BrBundle\Entity\Company\Request\RequestInternship', 'r')
            ->where(
                $query->expr()->eq('r.handled', 'FALSE')
            )
            ->getQuery()
            ->getResult();

        return $resultSet;
    }

    /**
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    public function findAllUnhandledByCompany(CompanyEntity $company)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('r')
            ->from('BrBundle\Entity\Company\Request\RequestInternship', 'r')
            ->innerJoin('r.job', 'v')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('r.handled', 'FALSE'),
                    $query->expr()->eq('v.company', ':company'),
                    $query->expr()->eq('v.removed', 'FALSE')
                )
            )
            ->setParameter('company', $company->getId())
            ->getQuery()
            ->getResult();

        return $resultSet;
    }

    /**
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    public function findRejectsByCompany(CompanyEntity $company)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('r')
            ->from('BrBundle\Entity\Company\Request\RequestInternship', 'r')
            ->innerJoin('r.job', 'v')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('r.handled', 'TRUE'),
                    $query->expr()->eq('v.approved', 'FALSE'),
                    $query->expr()->eq('v.removed', 'FALSE'),
                    $query->expr()->eq('v.company', ':company')
                )
            )
            ->setParameter('company', $company->getId())
            ->getQuery()
            ->getResult();

        return $resultSet;
    }

    /**
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    public function findUnhandledRequestsByJob(JobEntity $job)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('r')
            ->from('BrBundle\Entity\Company\Request\RequestInternship', 'r')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('r.handled', 'FALSE'),
                    $query->expr()->eq('r.job', ':job')
                )
            )
            ->setParameter('job', $job->getId())
            ->getQuery()
            ->getResult();

        return $resultSet;
    }

    /**
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    public function findUnhandledRequestsByType($type)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('r')
            ->from('BrBundle\Entity\Company\Request\RequestInternship', 'r')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('r.handled', 'FALSE'),
                    $query->expr()->eq('r.requestType', ':type')
                )
            )
            ->setParameter('type', $type)
            ->getQuery()
            ->getResult();

        return $resultSet;
    }
}
