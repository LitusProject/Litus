<?php
/**
 * Litus is a project by a group of students from the KU Leuven. The goal is to create
 * various applications to support the IT needs of student unions.
 *
 * @author Niels Avonds <niels.avonds@litus.cc>
 * @author Karsten Daemen <karsten.daemen@litus.cc>
 * @author Koen Certyn <koen.certyn@litus.cc>
 * @author Bram Gotink <bram.gotink@litus.cc>
 * @author Dario Incalza <dario.incalza@litus.cc>
 * @author Pieter Maene <pieter.maene@litus.cc>
 * @author Kristof MariÃ«n <kristof.marien@litus.cc>
 * @author Lars Vierbergen <lars.vierbergen@litus.cc>
 * @author Daan Wendelen <daan.wendelen@litus.cc>
 *
 * @license http://litus.cc/LICENSE
 */

namespace BrBundle\Repository\Cv;

use CommonBundle\Component\Doctrine\ORM\EntityRepository,
    CommonBundle\Entity\General\AcademicYear,
    SyllabusBundle\Entity\Group,
    SyllabusBundle\Entity\Study;

/**
 * Entry
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Entry extends EntityRepository
{
    /**
     * @param  AcademicYear        $year
     * @return \Doctrine\ORM\Query
     */
    public function findAllByAcademicYearQuery(AcademicYear $year)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('e')
            ->from('BrBundle\Entity\Cv\Entry', 'e')
            ->where(
                $query->expr()->eq('e.year', ':year')
            )
            ->setParameter('year', $year)
            ->orderBy('e.lastName', 'ASC')
            ->addOrderBy('e.firstName', 'ASC')
            ->getQuery();

        return $resultSet;
    }

    /**
     * @return \Doctrine\ORM\Query
     */
    public function findAllUngroupedStudiesQuery()
    {
        $subQuery = $this->getEntityManager()->createQueryBuilder();
        $subQuery->select('e')
            ->from('BrBundle\Entity\Cv\Entry', 'e')
            ->where(
                $subQuery->expr()->eq('e.study', 's')
            );

        $groupQuery = $this->getEntityManager()->createQueryBuilder();
        $groupQuery->select('g')
            ->from('SyllabusBundle\Entity\StudyGroupMap', 'g')
            ->innerJoin('g.group', 'd')
            ->where(
                $groupQuery->expr()->andx(
                    $groupQuery->expr()->eq('g.study', 's'),
                    $groupQuery->expr()->eq('d.cvBook', 'true')
                )
            );

        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('s')
            ->from('SyllabusBundle\Entity\Study', 's')
            ->where(
                $query->expr()->andx(
                    $query->expr()->exists(
                        $subQuery->getDql()
                    ),
                    $query->expr()->not(
                        $query->expr()->exists(
                            $groupQuery->getDql()
                        )
                    )
                )
            )
            ->orderBy('s.title', 'ASC')
            ->getQuery();

        return $resultSet;
    }

    /**
     * @param  Group               $group
     * @param  AcademicYear        $year
     * @return \Doctrine\ORM\Query
     */
    public function findAllByGroupAndAcademicYearQuery(Group $group, AcademicYear $year)
    {
        $subQuery = $this->getEntityManager()->createQueryBuilder();
        $subQuery->select('g')
            ->from('SyllabusBundle\Entity\StudyGroupMap', 'g')
            ->where(
                $subQuery->expr()->andx(
                    $subQuery->expr()->eq('g.study', 's'),
                    $subQuery->expr()->eq('g.group', ':group')
                )
            );

        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('e')
            ->from('BrBundle\Entity\Cv\Entry', 'e')
            ->innerJoin('e.study', 's')
            ->where(
                $query->expr()->andx(
                    $query->expr()->exists($subQuery->getDql()),
                    $query->expr()->eq('e.year', ':year')
                )
            )
            ->setParameter('group', $group)
            ->setParameter('year', $year)
            ->orderBy('e.lastName', 'ASC')
            ->addOrderBy('e.firstName', 'ASC')
            ->getQuery();

        return $resultSet;
    }

    /**
     * @param  Study               $study
     * @param  AcademicYear        $year
     * @return \Doctrine\ORM\Query
     */
    public function findAllByStudyAndAcademicYearQuery(Study $study, AcademicYear $year)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('e')
            ->from('BrBundle\Entity\Cv\Entry', 'e')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('e.study', ':study'),
                    $query->expr()->eq('e.year', ':year')
                )
            )
            ->setParameter('study', $study)
            ->setParameter('year', $year)
            ->orderBy('e.lastName', 'ASC')
            ->addOrderBy('e.firstName', 'ASC')
            ->getQuery();

        return $resultSet;
    }
}
