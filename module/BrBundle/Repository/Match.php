<?php
/**
 * Litus is a project by a group of students from the KU Leuven. The goal is to create
 * various applications to support the IT needs of student unions.
 *
 * @author Niels Avonds <niels.avonds@litus.cc>
 * @author Karsten Daemen <karsten.daemen@litus.cc>
 * @author Koen Certyn <koen.certyn@litus.cc>
 * @author Bram Gotink <bram.gotink@litus.cc>
 * @author Dario Incalza <dario.incalza@litus.cc>
 * @author Pieter Maene <pieter.maene@litus.cc>
 * @author Kristof MariÃ«n <kristof.marien@litus.cc>
 * @author Lars Vierbergen <lars.vierbergen@litus.cc>
 * @author Daan Wendelen <daan.wendelen@litus.cc>
 * @author Mathijs Cuppens <mathijs.cuppens@litus.cc>
 * @author Floris Kint <floris.kint@vtk.be>
 *
 * @license http://litus.cc/LICENSE
 */

namespace BrBundle\Repository;

use BrBundle\Entity\Match\Profile;
use BrBundle\Entity\Match\Wave;
use CommonBundle\Entity\User\Person;

/**
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Match extends \CommonBundle\Component\Doctrine\ORM\EntityRepository
{
    /**
     * @param Person  $student
     * @param  $company
     * @return array
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findOneByStudentAndCompany(Person $student, \BrBundle\Entity\Company $company)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('m')
            ->from('BrBundle\Entity\Match', 'm')
            ->innerJoin('m.companyMatchee', 'c')
            ->innerJoin('m.studentMatchee', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('s.student', ':student'),
                    $query->expr()->eq('c.company', ':company')
                )
            )
//            ->orderBy('p.name', 'ASC')
            ->setParameter('student', $student)
            ->setParameter('company', $company)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function findByCompany(\BrBundle\Entity\Company $company)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('m')
            ->from('BrBundle\Entity\Match', 'm')
            ->innerJoin('m.companyMatchee', 'c')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('c.company', ':company')
                )
            )
            ->orderBy('m.matchPercentage', 'ASC')
            ->setParameter('company', $company)
            ->getQuery()
            ->getResult();
    }

    public function findInterestedByCompany(\BrBundle\Entity\Company $company)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('m')
            ->from('BrBundle\Entity\Match', 'm')
            ->innerJoin('m.companyMatchee', 'c')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('c.company', ':company'),
                    $query->expr()->eq('m.interested', 'true')
                )
            )
            ->orderBy('m.matchPercentage', 'ASC')
            ->setParameter('company', $company)
            ->getQuery()
            ->getResult();
    }

    public function findByStudent(Person $student)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('m')
            ->from('BrBundle\Entity\Match', 'm')
            ->innerJoin('m.studentMatchee', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('s.student', ':student')
                )
            )
            ->orderBy('m.matchPercentage', 'ASC')
            ->setParameter('student', $student)
            ->getQuery()
            ->getResult();
    }

    public function findAllByProfile(Profile $profile)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('m')
            ->from('BrBundle\Entity\Match', 'm')
            ->innerJoin('m.studentMatchee', 's')
            ->innerJoin('m.companyMatchee', 'c')
            ->where(
                $query->expr()->orX(
                    $query->expr()->eq('s.studentProfile', ':profile'),
                    $query->expr()->eq('s.companyProfile', ':profile'),
                    $query->expr()->eq('c.studentProfile', ':profile'),
                    $query->expr()->eq('c.companyProfile', ':profile')
                )
            )
            ->setParameter('profile', $profile)
            ->getQuery()
            ->getResult();
    }

    public function findByStudentAndWave(Person $student, Wave $wave)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('m')
            ->from('BrBundle\Entity\Match', 'm')
            ->innerJoin('m.studentMatchee', 's')
            ->innerJoin('m.wave', 'wm')
            ->innerJoin('wm.companywave', 'cw')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('s.student', ':student'),
                    $query->expr()->eq('cw.wave', ':wave')
                )
            )
            ->orderBy('m.matchPercentage', 'ASC')
            ->setParameter('student', $student)
            ->setParameter('wave', $wave)
            ->getQuery()
            ->getResult();
    }

    public function countInterestedByCompany(\BrBundle\Entity\Company $company)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select($query->expr()->countDistinct('m'))
            ->from('BrBundle\Entity\Match', 'm')
            ->innerJoin('m.companyMatchee', 'c')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('c.company', ':company'),
                    $query->expr()->eq('m.interested', 'true')
                )
            )
            ->orderBy('m.matchPercentage', 'ASC')
            ->setParameter('company', $company)
            ->getQuery()
            ->getResult();
    }
}
