<?php
/**
 * Litus is a project by a group of students from the KU Leuven. The goal is to create
 * various applications to support the IT needs of student unions.
 *
 * @author Niels Avonds <niels.avonds@litus.cc>
 * @author Karsten Daemen <karsten.daemen@litus.cc>
 * @author Koen Certyn <koen.certyn@litus.cc>
 * @author Bram Gotink <bram.gotink@litus.cc>
 * @author Dario Incalza <dario.incalza@litus.cc>
 * @author Pieter Maene <pieter.maene@litus.cc>
 * @author Kristof MariÃ«n <kristof.marien@litus.cc>
 * @author Lars Vierbergen <lars.vierbergen@litus.cc>
 * @author Daan Wendelen <daan.wendelen@litus.cc>
 *
 * @license http://litus.cc/LICENSE
 */

namespace BrBundle\Repository\Contract;

use CommonBundle\Component\Doctrine\ORM\EntityRepository;

/**
 * ContractEntry
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContractEntry extends EntityRepository
{
    public function findHighestVersionNb()
    {
        $query = $this->_em->createQueryBuilder();
        $highestVersion = $query->select('MAX(c.version)')
            ->from('BrBundle\Entity\Contract\ContractEntry', 'c')
            ->getQuery()
            ->getSingleScalarResult();

        return $highestVersion;
    }

    public function findAllContractEntriesByContract(Contract $contract)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('c')
            ->from('BrBundle\Entity\Contract\ContractEntry', 'c')
            ->where(
                $query->expr()->eq('c.contract', ':contract')
            )
            ->setParameter('contract', $contract)
            ->orderBy('c.version', 'ASC')
            ->addOrderBy('c.position', 'ASC')
            ->getQuery();

        return $resultSet;
    }

    public function findContractEntriesByContractAndVersion(Contract $contract, $version)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('c')
            ->from('BrBundle\Entity\Contract\ContractEntry', 'c')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('c.contract', ':contract'),
                    $query->expr()->eq('c.version', ':version')
                )
            )
            ->setParameter('contract', $contract)
            ->setParameter('version', $version)
            ->orderBy('c.position', 'ASC')
            ->getQuery();

        return $resultSet;
    }
}
