<?php
/**
 * Litus is a project by a group of students from the KU Leuven. The goal is to create
 * various applications to support the IT needs of student unions.
 *
 * @author Niels Avonds <niels.avonds@litus.cc>
 * @author Karsten Daemen <karsten.daemen@litus.cc>
 * @author Koen Certyn <koen.certyn@litus.cc>
 * @author Bram Gotink <bram.gotink@litus.cc>
 * @author Dario Incalza <dario.incalza@litus.cc>
 * @author Pieter Maene <pieter.maene@litus.cc>
 * @author Kristof MariÃ«n <kristof.marien@litus.cc>
 * @author Lars Vierbergen <lars.vierbergen@litus.cc>
 * @author Daan Wendelen <daan.wendelen@litus.cc>
 * @author Mathijs Cuppens <mathijs.cuppens@litus.cc>
 * @author Floris Kint <floris.kint@vtk.be>
 *
 * @license http://litus.cc/LICENSE
 */

namespace BrBundle\Repository\Product;

use CommonBundle\Component\Doctrine\ORM\EntityRepository;

/**
 * Order
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Order extends EntityRepository
{
    /**
     * @return \Doctrine\ORM\Query
     */
    public function findAllNotOldUnsignedQuery()
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('o')
            ->from('BrBundle\Entity\Product\Order', 'o')
            ->leftJoin('o.contract', 'c')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('o.old', 'false'),
                    $query->expr()->orx(
                        $query->expr()->eq('c.signed', 'false'),
                        $query->expr()->isNull('c.signed')
                    )
                )
            )
            ->orderBy('o.creationTime', 'DESC')
            ->getQuery();

        return $resultSet;
    }

    /**
     * @return \Doctrine\ORM\Query
     */
    public function findAllNotOldSignedQuery()
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('o')
            ->from('BrBundle\Entity\Product\Order', 'o')
            ->innerJoin('o.contract', 'c')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('o.old', 'false'),
                    $query->expr()->eq('c.signed', 'true')
                )
            )
            ->orderBy('o.creationTime', 'DESC')
            ->getQuery();

        return $resultSet;
    }
}
