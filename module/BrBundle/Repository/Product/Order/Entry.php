<?php

namespace BrBundle\Repository\Product\Order;

use BrBundle\Entity\Product;
use BrBundle\Entity\Product\Order as EditOrder;

/**
 * Entry
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Entry extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param  EditOrder $order
     * @param  Product   $product
     * @return \BrBundle\Entity\Product\Order\Entry|null
     */
    public function findOneByOrderAndProduct(EditOrder $order, Product $product)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('o')
            ->from('BrBundle\Entity\Product\Order\Entry', 'o')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('o.order', ':order'),
                    $query->expr()->eq('o.product', ':product')
                )
            )
            ->setParameter('order', $order)
            ->setParameter('product', $product)
            ->getQuery()
            ->getResult();

        if (isset($resultSet[0])) {
            return $resultSet[0];
        }

        return null;
    }

    /**
     * @param  Product $productId
     * @return \BrBundle\Entity\Product\Order\Entry|null
     */
    public function findOneByProductId($productId)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('o')
            ->from('BrBundle\Entity\Product\Order\Entry', 'o')
            ->where(
                $query->expr()->eq('o.product', ':product')
            )
            ->setParameter('product', $productId)
            ->getQuery()
            ->getResult();

        if (isset($resultSet[0])) {
            return $resultSet[0];
        }

        return null;
    }

    /**
     * @param  Product $productId
     * @return \Doctrine\ORM\Query
     */
    public function findAllByProductIdQuery($productId)
    {
        $query = $this->getEntityManager()->createQueryBuilder();

        return $query->select('o')
            ->from('BrBundle\Entity\Product\Order\Entry', 'o')
            ->where(
                $query->expr()->eq('o.product', ':product')
            )
            ->setParameter('product', $productId)
            ->getQuery();
    }

    /**
     * @param  Product $productId
     * @return array
     */
    public function findAllByProductId($productId)
    {
        return $this->findAllByProductIdQuery($productId)->getResult();
    }
}
