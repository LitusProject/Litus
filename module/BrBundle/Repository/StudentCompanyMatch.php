<?php

namespace BrBundle\Repository;

use CommonBundle\Component\Doctrine\ORM\EntityRepository;
use CommonBundle\Entity\General\AcademicYear;
use CommonBundle\Entity\User\Person\Academic;
use Doctrine\ORM\Query;

/**
 * StudentCompanyMatch
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StudentCompanyMatch extends EntityRepository
{
    /**
     * @param AcademicYear $academicYear
     * @return Query
     */
    public function findAllByAcademicYearQuery(AcademicYear $academicYear)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('m')
            ->from('BrBundle\Entity\StudentCompanyMatch', 'm')
            ->where(
                $query->expr()->eq('m.year', ':year')
            )
            ->setParameter('year', $academicYear)
            ->getQuery();
    }

    /**
     * @param \BrBundle\Entity\Company $company
     * @param AcademicYear $academicYear
     * @return Query
     */
    public function findAllByCompanyAndYear(\BrBundle\Entity\Company $company, AcademicYear $academicYear)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('m')
            ->from('BrBundle\Entity\StudentCompanyMatch', 'm')
            ->where(
                $query->expr()->eq('m.company', ':company'),
                $query->expr()->eq('m.year', ':year')
            )
            ->setParameter('company', $company)
            ->setParameter('year', $academicYear)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param Academic $student
     * @param AcademicYear $academicYear
     * @return float|int|mixed|string
     */
    public function findAllByStudentAndYear(Academic $student, AcademicYear $academicYear)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('m')
            ->from('BrBundle\Entity\StudentCompanyMatch', 'm')
            ->where(
                $query->expr()->eq('m.academic', ':academic'),
                $query->expr()->eq('m.year', ':year')
            )
            ->setParameter('academic', $student)
            ->setParameter('year', $academicYear)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param string $name
     * @param AcademicYear $academicYear
     * @return Query
     */
    public function findAllByStudentNameAndYearQuery(string $name, AcademicYear $academicYear): Query
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('m')
            ->from('BrBundle\Entity\StudentCompanyMatch', 'm')
            ->innerJoin('m.academic', 'a')
            ->where(
                $query->expr()->andX(
                    $query->expr()->orX(
                        $query->expr()->like(
                            $query->expr()->concat(
                                $query->expr()->lower($query->expr()->concat('a.firstName', "' '")),
                                $query->expr()->lower('a.lastName')
                            ),
                            ':name'
                        ),
                        $query->expr()->like(
                            $query->expr()->concat(
                                $query->expr()->lower($query->expr()->concat('a.lastName', "' '")),
                                $query->expr()->lower('a.firstName')
                            ),
                            ':name'
                        ),
                        $query->expr()->like('a.universityIdentification', ':name')
                    ),
                    $query->expr()->eq('m.year', ':year')
                )
            )
            ->setParameter('name', '%' . strtolower($name) . '%')
            ->setParameter('year', $academicYear)
            ->getQuery();
    }

    /**
     * @param string $name
     * @param AcademicYear $academicYear
     * @return Query
     */
    public function findAllByCompanyNameAndYearQuery(string $name, AcademicYear $academicYear): Query
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('m')
            ->from('BrBundle\Entity\StudentCompanyMatch', 'm')
            ->innerJoin('m.company', 'c')
            ->where(
                $query->expr()->andX(
                    $query->expr()->like($query->expr()->lower('c.name'), ':name'),
                    $query->expr()->eq('m.year', ':year')
                ),
            )
            ->setParameter('name', '%' . strtolower($name) . '%')
            ->setParameter('year', $academicYear)
            ->getQuery();
    }
}
