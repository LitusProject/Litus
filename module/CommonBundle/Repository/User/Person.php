<?php

namespace CommonBundle\Repository\User;

use CommonBundle\Entity\Acl\Role,
    CommonBundle\Entity\General\AcademicYear,
    CommonBundle\Component\Util\EntityRepository;

/**
 * Person
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Person extends EntityRepository
{
    public function findOneById($id)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('p')
            ->from('CommonBundle\Entity\User\Person', 'p')
            ->where(
                $query->expr()->eq('p.id', ':id')
            )
            ->setParameter('id', $id)
            ->getQuery()
            ->getResult();

        if (isset($resultSet[0]))
            return $resultSet[0];

        return null;
    }

    public function findAllByNameQuery($name)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('p')
            ->from('CommonBundle\Entity\User\Person', 'p')
            ->where(
                $query->expr()->orX(
                    $query->expr()->like(
                        $query->expr()->concat(
                            $query->expr()->lower($query->expr()->concat('p.firstName', "' '")),
                            $query->expr()->lower('p.lastName')
                        ),
                        ':name'
                    ),
                    $query->expr()->like(
                        $query->expr()->concat(
                            $query->expr()->lower($query->expr()->concat('p.lastName', "' '")),
                            $query->expr()->lower('p.firstName')
                        ),
                        ':name'
                    )
                )
            )
            ->setParameter('name', '%' . strtolower($name) . '%')
            ->getQuery();

        return $resultSet;
    }

    public function findAllByRoleQuery(Role $role)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('p')
            ->from('CommonBundle\Entity\User\Person', 'p')
            ->innerJoin('p.roles', 'r')
            ->where(
                $query->expr()->eq('r.name', ':name')
            )
            ->setParameter('name', $role->getName())
            ->getQuery();

        return $resultSet;
    }

    public function findAllByUsernameQuery($username)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('p')
            ->from('CommonBundle\Entity\User\Person', 'p')
            ->where(
                $query->expr()->like('p.username', ':username')
            )
            ->setParameter('username', '%' . strtolower($username) . '%')
            ->getQuery();

        return $resultSet;
    }

    public function findOneByUsername($username)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('p')
            ->from('CommonBundle\Entity\User\Person', 'p')
            ->where(
                $query->expr()->eq('p.username', ':username')
            )
            ->setParameter('username', $username)
            ->setMaxResults(1)
            ->getQuery()
            ->getResult();

        if (isset($resultSet[0]))
            return $resultSet[0];

        $barcode = $this->_em
            ->getRepository('CommonBundle\Entity\User\Barcode')
            ->findOneByBarcode($username);

        if ($barcode)
            return $barcode->getPerson();

        return null;
    }

    public function findAllByNameTypeahead($name)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('a')
            ->from('CommonBundle\Entity\User\Person', 'a')
            ->where(
                $query->expr()->orX(
                    $query->expr()->like(
                        $query->expr()->concat(
                            $query->expr()->lower($query->expr()->concat('a.firstName', "' '")),
                            $query->expr()->lower('a.lastName')
                        ),
                        ':name'
                    ),
                    $query->expr()->like(
                        $query->expr()->concat(
                            $query->expr()->lower($query->expr()->concat('a.lastName', "' '")),
                            $query->expr()->lower('a.firstName')
                        ),
                        ':name'
                    )
                )
            )
            ->setParameter('name', '%' . strtolower($name) . '%')
            ->setMaxResults(20)
            ->getQuery();

        return $resultSet;
    }

    public function findAllMembers(AcademicYear $academicYear)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('s')
            ->from('CommonBundle\Entity\User\Status\Organization', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->neq('s.status', '\'non_member\''),
                    $query->expr()->eq('s.academicYear', ':academicYear')
                )
            )
            ->setParameter('academicYear', $academicYear->getId())
            ->getQuery()
            ->getResult();

        $persons = array();
        foreach($resultSet as $result)
            $persons[] = $result->getPerson();

        return $persons;
    }
}
