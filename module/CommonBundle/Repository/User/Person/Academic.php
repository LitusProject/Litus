<?php

namespace CommonBundle\Repository\User\Person;

use CommonBundle\Entity\General\AcademicYear;

/**
 * Academic
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Academic extends \CommonBundle\Repository\User\Person
{
    /**
     * @param  integer $id
     * @return \CommonBundle\Entity\User\Person\Academic|null
     */
    public function findOneById($id)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('p')
            ->from('CommonBundle\Entity\User\Person\Academic', 'p')
            ->where(
                $query->expr()->eq('p.id', ':id')
            )
            ->setParameter('id', $id)
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param  string $username
     * @return \Doctrine\ORM\Query
     */
    public function findAllByUsernameQuery($username)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('p')
            ->from('CommonBundle\Entity\User\Person\Academic', 'p')
            ->where(
                $query->expr()->like($query->expr()->lower('p.username'), ':username')
            )
            ->setParameter('username', '%' . strtolower($username) . '%')
            ->getQuery();
    }

    /**
     * @param  string $name
     * @return \Doctrine\ORM\Query
     */
    public function findAllByNameQuery($name)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('p')
            ->from('CommonBundle\Entity\User\Person\Academic', 'p')
            ->where(
                $query->expr()->andX(
                    $query->expr()->orX(
                        $query->expr()->like(
                            $query->expr()->concat(
                                $query->expr()->lower($query->expr()->concat('p.firstName', "' '")),
                                $query->expr()->lower('p.lastName')
                            ),
                            ':name'
                        ),
                        $query->expr()->like(
                            $query->expr()->concat(
                                $query->expr()->lower($query->expr()->concat('p.lastName', "' '")),
                                $query->expr()->lower('p.firstName')
                            ),
                            ':name'
                        ),
                        $query->expr()->like('p.universityIdentification', ':name')
                    ),
                    $query->expr()->eq('p.canLogin', 'true')
                )
            )
            ->setParameter('name', '%' . strtolower($name) . '%')
            ->getQuery();
    }

    /**
     * @param  string $universityIdentification
     * @return \Doctrine\ORM\Query
     */
    public function findAllByUniversityIdentificationQuery($universityIdentification)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('p')
            ->from('CommonBundle\Entity\User\Person\Academic', 'p')
            ->where(
                $query->expr()->andX(
                    $query->expr()->like('p.universityIdentification', ':universityIdentification'),
                    $query->expr()->eq('p.canLogin', 'true')
                )
            )
            ->setParameter('universityIdentification', '%' . strtolower($universityIdentification) . '%')
            ->getQuery();
    }

    /**
     * @param  string $username
     * @return \CommonBundle\Entity\User\Person|null
     */
    public function findOneByUsername($username)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('p')
            ->from('CommonBundle\Entity\User\Person\Academic', 'p')
            ->where(
                $query->expr()->andX(
                    $query->expr()->orX(
                        $query->expr()->eq($query->expr()->lower('p.username'), ':username'),
                        $query->expr()->eq('p.universityIdentification', ':username')
                    ),
                    $query->expr()->eq('p.canLogin', 'true')
                )
            )
            ->setParameter('username', strtolower($username))
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();

        if ($resultSet) {
            return $resultSet;
        }

        $barcode = $this->getEntityManager()
            ->getRepository('CommonBundle\Entity\User\Barcode')
            ->findOneByBarcode($username);

        if ($barcode) {
            return $barcode->getPerson();
        }

        return null;
    }

    /**
     * @param  AcademicYear $academicYear
     * @return array
     */
    public function findAllMembers(AcademicYear $academicYear)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('s')
            ->from('CommonBundle\Entity\User\Status\Organization', 's')
            ->innerJoin('s.person', 'p')
            ->where(
                $query->expr()->andX(
                    $query->expr()->neq('s.status', '\'non_member\''),
                    $query->expr()->eq('s.academicYear', ':academicYear'),
                    $query->expr()->eq('p.canLogin', 'true')
                )
            )
            ->setParameter('academicYear', $academicYear->getId())
            ->getQuery()
            ->getResult();

        $persons = array();
        foreach ($resultSet as $result) {
            $persons[] = $result->getPerson();
        }

        return $persons;
    }

    /**
     * Checks if the academic is in the last year of a Master's program.
     *
     * @param int $academicId
     * @return bool
     */
    public function isLastYear($academicId)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $queryBuilder->select('es')
            ->from('SecretaryBundle\Entity\Syllabus\Enrollment\Study', 'es')
            ->innerJoin('es.study', 's')
            ->innerJoin('s.combination', 'sc')
            ->where('es.academic = :academicId')
            ->andWhere('sc.title LIKE :title')
            ->andWhere('sc.phase = :phase')
            ->setParameter('academicId', $academicId)
            ->setParameter('title', '%Master%')
            ->setParameter('phase', 2);

        $result = $queryBuilder->getQuery()->getResult();

        return (count($result) != 0);
    }

    public function isEITKIC($academicId)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $queryBuilder->select('es')
            ->from('SecretaryBundle\Entity\Syllabus\Enrollment\Study', 'es')
            ->innerJoin('es.study', 's')
            ->innerJoin('s.combination', 'sc')
            ->where('es.academic = :academicId')
            ->andWhere('sc.title LIKE :title')
            ->andWhere('sc.phase = :phase')
            ->setParameter('academicId', $academicId)
            ->setParameter('title', '%EIT-KIC%')
            ->setParameter('phase', 2);

        $result = $queryBuilder->getQuery()->getResult();

        return (count($result) != 0);
    }

    public function isManama($academicId)
    {
        $titles = [
            'Master of Artificial Intelligence',
            'Master of Conservation of Monuments and Sites',
            'Master of Cybersecurity',
            'Master of Digital Humanities',
            'Master of Human Settlements',
            'Master of Nuclear Engineering',
            'Master of Safety Engineering',
            'Master of Urbanism, Landscape and Planning',
            'Master in de medische stralingsfysica',
            'Master of Space Studies'
        ];

        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $queryBuilder->select('es')
            ->from('SecretaryBundle\Entity\Syllabus\Enrollment\Study', 'es')
            ->innerJoin('es.study', 's')
            ->innerJoin('s.combination', 'sc')
            ->where('es.academic = :academicId')
            ->andWhere(
                $queryBuilder->expr()->orX(
                    ...array_map(
                        fn($title) => $queryBuilder->expr()->like('sc.title', $queryBuilder->expr()->literal('%' . $title . '%')),
                        $titles
                    )
                )
            )
            ->andWhere('sc.phase = :phase')
            ->setParameter('academicId', $academicId)
            ->setParameter('phase', 1);

        $result = $queryBuilder->getQuery()->getResult();

        return !empty($result);
    }

    public function isOtherLastYear($academicId)
    {
        $titles = [
            'Postgraduate',
            'Micro-credential',
            'Doctor',
            'Doctoral'
        ];

        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $queryBuilder->select('es')
            ->from('SecretaryBundle\Entity\Syllabus\Enrollment\Study', 'es')
            ->innerJoin('es.study', 's')
            ->innerJoin('s.combination', 'sc')
            ->where('es.academic = :academicId')
            ->andWhere(
                $queryBuilder->expr()->orX(
                    ...array_map(
                        fn($title) => $queryBuilder->expr()->like('sc.title', $queryBuilder->expr()->literal('%' . $title . '%')),
                        $titles
                    )
                )
            )
            ->setParameter('academicId', $academicId);

        $result = $queryBuilder->getQuery()->getResult();

        return !empty($result);
    }
}
