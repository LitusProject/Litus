/**
 * Variables
 *
 * Copyright 2011 Litus
 *
 * Author: Kristof MariÃ«n <kristof.marien@litus.cc>
 */

// Colors
@black:                         #000;
@white:                         #fff;

@grayDarker:                    #222;
@grayDark:                      #333;
@gray:                          #555;
@grayMiddleLight:               #888;
@grayLight:                     #bbb;
@grayMiddleLighter:             #ddd;
@grayLighter:                   #eee;

@cGray:                         #ccc;
@cHeaderDark:                   #22325a;
@cHeaderLight:                  #121b35;

// Fonts
@headingsFontFamily:            "Helvetica Neue", Helvetica, Arial, sans-serif;
@headingsFontWeight:            bold;
@headingsColor:                 #333;

// Navigation Bar
@navbarHeight:                  40px;
@navbarBackground:              @grayMiddleLighter;
@navbarBackgroundHighlight:     @grayLighter;

@navbarText:                    @gray;
@navbarLinkColor:               @gray;
@navbarLinkColorHover:          @grayMiddleLight;
@navbarLinkColorActive:         @grayMiddleLight;
@navbarLinkBackgroundHover:     transparent;
@navbarLinkBackgroundActive:    @navbarBackground;

// Subnav Bar
@subnavHeight:                  36px;
@subnavStartColor:              #f5f5f5;
@subnavEndColor:                @grayLighter;
@subnavBorder:                  #e5e5e5;
@subnavBorderRight:             #f5f5f5;
@subnavBorderLeft:              #e5e5e5;

@subnavLinkBackground:          #e5e5e5;
@subnavLinkBorder:              @grayMiddleLighter;
@subnavLinkColor:               #777;
@subnavLinkColorHover:          @grayMiddleLight;
@subnavLinkColorActive:         #777;
@subnavCaret:                   #777;

// Grid
@gridColumns:                   12;
@gridColumnWidth:               60px;
@gridGutterWidth:               20px;
@gridRowWidth:                  (@gridColumns * @gridColumnWidth) + (@gridGutterWidth * (@gridColumns - 1));
@fluidGridColumnWidth:          6.382978723%;
@fluidGridGutterWidth:          2.127659574%;

// Mixins
.verticalGradient(@startColor: #555, @endColor: #333) {
    background-color: mix(@startColor, @endColor, 60%);
    background-image: -moz-linear-gradient(top, @startColor, @endColor); // FF 3.6+
    background-image: -ms-linear-gradient(top, @startColor, @endColor); // IE10
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from(@startColor), to(@endColor)); // Safari 4+, Chrome 2+
    background-image: -webkit-linear-gradient(top, @startColor, @endColor); // Safari 5.1+, Chrome 10+
    background-image: -o-linear-gradient(top, @startColor, @endColor); // Opera 11.10
    background-image: linear-gradient(top, @startColor, @endColor); // The standard
    background-repeat: repeat-x;
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)", @startColor, @endColor)); // IE9 and down
}

.border-radius(@radius) {
    -webkit-border-radius: @radius;
       -moz-border-radius: @radius;
            border-radius: @radius;
}

.box-shadow(@shadow: 0 1px 3px rgba(0,0,0,.25)) {
    -webkit-box-shadow: @shadow;
       -moz-box-shadow: @shadow;
            box-shadow: @shadow;
}

.box-sizing(@boxmodel) {
    -webkit-box-sizing: @boxmodel;
       -moz-box-sizing: @boxmodel;
        -ms-box-sizing: @boxmodel;
            box-sizing: @boxmodel;
}

.rotate(@degrees) {
    -webkit-transform: rotate(@degrees);
       -moz-transform: rotate(@degrees);
        -ms-transform: rotate(@degrees);
         -o-transform: rotate(@degrees);
            transform: rotate(@degrees);
}

.rotate-origin(@origin) {
    -webkit-transform-origin: @origin;
       -moz-transform-origin: @origin;
        -ms-transform-origin: @origin;
         -o-transform-origin: @origin;
            transform-origin: @origin;
}

.transition(@transition) {
    -webkit-transition: @transition;
       -moz-transition: @transition;
        -ms-transition: @transition;
         -o-transition: @transition;
            transition: @transition;
}

.buttonBackground(@startColor, @endColor) {
    .gradientBar(@startColor, @endColor);

    &:hover, &:active, &.active, &.disabled, &[disabled] {
        background-color: @endColor;
    }

    &:active,
    &.active {
        background-color: darken(@endColor, 10%) e("\9");
    }
}

.gradientBar(@primaryColor, @secondaryColor) {
    .verticalGradient(@primaryColor, @secondaryColor);
    border-color: @secondaryColor @secondaryColor darken(@secondaryColor, 15%);
    border-color: rgba(0,0,0,.1) rgba(0,0,0,.1) fadein(rgba(0,0,0,.1), 15%);
}

// Grid
#grid {
    .core (@gridColumnWidth, @gridGutterWidth) {
        .spanX (@index) when (@index > 0) {
            .span@{index} { .span(@index); }
            .spanX(@index - 1);
        }
        .spanX (0) {}

        .offsetX (@index) when (@index > 0) {
            .offset@{index} { .offset(@index); }
            .offsetX(@index - 1);
        }
        .offsetX (0) {}

        .offset (@columns) {
            margin-left: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns + 1));
        }

        .span (@columns) {
            width: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns - 1));
        }

        .row {
            margin-left: @gridGutterWidth * -1;
            .clearfix();
        }

        [class*="span"] {
            float: left;
            min-height: 1px;
            margin-left: @gridGutterWidth;
        }

        .container,
        .navbar-static-top .container,
        .navbar-fixed-top .container,
        .navbar-fixed-bottom .container { .span(@gridColumns); }

        .spanX (@gridColumns);
        .offsetX (@gridColumns);
    }

    .fluid (@fluidGridColumnWidth, @fluidGridGutterWidth) {
        .spanX (@index) when (@index > 0) {
            .span@{index} { .span(@index); }
            .spanX(@index - 1);
        }
        .spanX (0) {}

        .offsetX (@index) when (@index > 0) {
            .offset@{index} { .offset(@index); }
            .offset@{index}:first-child { .offsetFirstChild(@index); }
            .offsetX(@index - 1);
        }
        .offsetX (0) {}

        .offset (@columns) {
            margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) + (@fluidGridGutterWidth*2);
            *margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) - (.5 / @gridRowWidth * 100 * 1%) + (@fluidGridGutterWidth*2) - (.5 / @gridRowWidth * 100 * 1%);
        }

        .offsetFirstChild (@columns) {
            margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) + (@fluidGridGutterWidth);
            *margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) - (.5 / @gridRowWidth * 100 * 1%) + @fluidGridGutterWidth - (.5 / @gridRowWidth * 100 * 1%);
        }

        .span (@columns) {
            width: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1));
            *width: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) - (.5 / @gridRowWidth * 100 * 1%);
        }

        .row-fluid {
            width: 100%;
            .clearfix();
            [class*="span"] {
                .input-block-level();
                float: left;
                margin-left: @fluidGridGutterWidth;
                *margin-left: @fluidGridGutterWidth - (.5 / @gridRowWidth * 100 * 1%);
            }
            [class*="span"]:first-child {
                margin-left: 0;
            }

            .controls-row [class*="span"] + [class*="span"] {
                margin-left: @fluidGridGutterWidth;
            }

            .spanX (@gridColumns);
            .offsetX (@gridColumns);
        }
    }

    .input(@gridColumnWidth, @gridGutterWidth) {
        .spanX (@index) when (@index > 0) {
            input.span@{index}, textarea.span@{index}, .uneditable-input.span@{index} { .span(@index); }
            .spanX(@index - 1);
        }
        .spanX (0) {}

        .span(@columns) {
            width: ((@gridColumnWidth) * @columns) + (@gridGutterWidth * (@columns - 1)) - 14;
        }

        input,
        textarea,
        .uneditable-input {
            margin-left: 0;
        }

        .controls-row [class*="span"] + [class*="span"] {
            margin-left: @gridGutterWidth;
        }

        .spanX (@gridColumns);
    }
}

.input-block-level {
    display: block;
    width: 100%;
    min-height: 28px;
    .box-sizing(border-box);
}

.clearfix {
    *zoom: 1;
    &:before,
    &:after {
        display: table;
        content: "";
    }
    &:after {
        clear: both;
    }
}


