<?php

namespace CalendarBundle\Repository\Node;

use DateTime;

/**
 * Event
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Event extends \CommonBundle\Component\Doctrine\ORM\EntityRepository
{
    public function findAllActiveQuery($nbResults = 15)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select('e')
            ->from('CalendarBundle\Entity\Node\Event', 'e')
            ->where(
                $query->expr()->andX(
                    $query->expr()->orX(
                        $query->expr()->gt('e.endDate', ':now'),
                        $query->expr()->gt('e.startDate', ':now')
                    ),
                    $query->expr()->eq('e.isHistory', 'false')
                )
            )
            ->orderBy('e.startDate', 'ASC')
            ->setParameter('now', new DateTime());

        if ($nbResults > 0) {
            $query->setMaxResults($nbResults);
        }

        return $query->getQuery();
    }

    public function findAllOldQuery()
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('e')
            ->from('CalendarBundle\Entity\Node\Event', 'e')
            ->where(
                $query->expr()->andX(
                    $query->expr()->lt('e.startDate', ':now'),
                    $query->expr()->orX(
                        $query->expr()->eq('e.isHistory', 'false'),
                        $query->expr()->isNull('e.isHistory')
                    )
                )
            )
            ->orderBy('e.startDate', 'DESC')
            ->setParameter('now', new DateTime())
            ->getQuery();
    }

    public function findAllBetweenQuery(DateTime $first, DateTime $last)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('e')
            ->from('CalendarBundle\Entity\Node\Event', 'e')
            ->where(
                $query->expr()->andX(
                    $query->expr()->gte('e.startDate', ':first'),
                    $query->expr()->lt('e.startDate', ':last'),
                    $query->expr()->eq('e.isHistory', 'false')
                )
            )
            ->orderBy('e.startDate', 'ASC')
            ->setParameter('first', $first)
            ->setParameter('last', $last)
            ->getQuery();
    }

    public function findAllBetweenAndNotHidden(DateTime $first, DateTime $last)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('e')
            ->from('CalendarBundle\Entity\Node\Event', 'e')
            ->where(
                $query->expr()->andX(
                    $query->expr()->gte('e.startDate', ':first'),
                    $query->expr()->lt('e.startDate', ':last'),
                    $query->expr()->eq('e.isHistory', 'false'),
                    $query->expr()->orX(
                        $query->expr()->eq('e.isHidden', 'false'),
                        $query->expr()->isNull('e.isHidden')
                    )
                )
            )
            ->orderBy('e.startDate', 'ASC')
            ->setParameter('first', $first)
            ->setParameter('last', $last)
            ->getQuery()
            ->getResult();
    }

    public function findAllActiveAndNotHidden($nbResults = 15)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select('e')
            ->from('CalendarBundle\Entity\Node\Event', 'e')
            ->where(
                $query->expr()->andX(
                    $query->expr()->orX(
                        $query->expr()->gt('e.endDate', ':now'),
                        $query->expr()->gt('e.startDate', ':now')
                    ),
                    $query->expr()->eq('e.isHistory', 'false'),
                    $query->expr()->orX(
                        $query->expr()->eq('e.isHidden', 'false'),
                        $query->expr()->isNull('e.isHidden')
                    )
                )
            )
            ->orderBy('e.startDate', 'ASC')
            ->setParameter('now', new DateTime());

        if ($nbResults > 0) {
            $query->setMaxResults($nbResults);
        }

        return $query->getQuery()->getResult();
    }
}
