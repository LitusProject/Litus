<?php

namespace CudiBundle\Repository\Stock;

use CudiBundle\Entity\Stock\Period as PeriodEntity,
    CudiBundle\Entity\Supplier,
    Doctrine\ORM\EntityRepository,
    Doctrine\ORM\Query\Expr\Join;

/**
 * Delivery
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Delivery extends EntityRepository
{
    public function findAllBySupplierAndPeriod(Supplier $supplier, PeriodEntity $period)
    {
        $query = $this->_em->createQueryBuilder();
        $query->select('o')
            ->from('CudiBundle\Entity\Stock\Delivery', 'o')
            ->innerJoin('o.article', 'a', Join::WITH,
                   $query->expr()->eq('a.supplier', ':supplier')
            )
            ->where(
                $query->expr()->andX(
                    $query->expr()->gt('o.timestamp', ':startDate'),
                    $period->isOpen() ? '1=1' : $query->expr()->lt('o.timestamp', ':endDate')
                )
            )
            ->setParameter('supplier', $supplier->getId())
            ->setParameter('startDate', $period->getStartDate())
            ->orderBy('o.timestamp', 'DESC');

        if (!$period->isOpen())
            $query->setParameter('endDate', $period->getEndDate());

        $resultSet = $query->getQuery()
            ->getResult();

        return $resultSet;
    }

    public function findAllByPeriod(PeriodEntity $period)
    {
        $query = $this->_em->createQueryBuilder();
        $query->select('o')
            ->from('CudiBundle\Entity\Stock\Delivery', 'o')
            ->where(
                $query->expr()->andX(
                    $query->expr()->gt('o.timestamp', ':startDate'),
                    $period->isOpen() ? '1=1' : $query->expr()->lt('o.timestamp', ':endDate')
                )
            )
            ->setParameter('startDate', $period->getStartDate())
            ->orderBy('o.timestamp', 'DESC');

        if (!$period->isOpen())
            $query->setParameter('endDate', $period->getEndDate());

        $resultSet = $query->getQuery()
            ->getResult();

        return $resultSet;
    }
}
