<?php

namespace CudiBundle\Repository\Stock;

use CudiBundle\Entity\Article,
    CudiBundle\Entity\Stock\Period as PeriodEntity,
    Doctrine\ORM\EntityRepository,
    Doctrine\ORM\Query\Expr\Join;

/**
 * Period
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Period extends EntityRepository
{
    public function findOpen()
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('p')
        	->from('CudiBundle\Entity\Stock\Period', 'p')
        	->where(
        	    $query->expr()->isNull('p.endDate')
        	)
			->setMaxResults(1)
        	->getQuery()
        	->getResult();
        	
        if (isset($resultSet[0]))
            return $resultSet[0];

        return null;
    }
    
    public function getNbOrderedByArticle(PeriodEntity $period, Article $article)
    {
        $query = $this->_em->createQueryBuilder();
        $query->select('SUM(i.number)')
            ->from('CudiBundle\Entity\Stock\OrderItem', 'i')
            ->innerJoin('i.order', 'o', Join::WITH, 
                $query->expr()->andX(
                    $query->expr()->isNotNull('o.date'),
                    $query->expr()->gte('o.date', ':startDate'),
                    $period->isOpen() ? '1=1' : $query->expr()->lt('o.date', ':endDate')
                )
            )
            ->where(
                $query->expr()->eq('i.article', ':article')
            )
            ->setParameter('article', $article->getId())
            ->setParameter('startDate', $period->getStartDate());
        
        if (!$period->isOpen())
            $query->setParameter('endDate', $period->getEndDate());
        
        $resultSet = $query->getQuery()
            ->getSingleScalarResult();
        
        if (null == $resultSet)
            return 0;
        
        return $resultSet;
    }
    
    public function getNbDeliveredByArticle(PeriodEntity $period, Article $article)
    {
        $query = $this->_em->createQueryBuilder();
        $query->select('SUM(i.number)')
            ->from('CudiBundle\Entity\Stock\DeliveryItem', 'i')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('i.article', ':article'),
                    $query->expr()->gte('i.date', ':startDate'),
                    $period->isOpen() ? '1=1' : $query->expr()->lt('i.date', ':endDate')
                )
            )
            ->setParameter('article', $article->getId())
            ->setParameter('startDate', $period->getStartDate());
        
        if (!$period->isOpen())
            $query->setParameter('endDate', $period->getEndDate());
        
        $resultSet = $query->getQuery()
            ->getSingleScalarResult();
        
        if (null == $resultSet)
            return 0;
        
        return $resultSet;
    }
    
    public function getNbSoldByArticle(PeriodEntity $period, Article $article)
    {
        $query = $this->_em->createQueryBuilder();
        $query->select('SUM(i.number)')
            ->from('CudiBundle\Entity\Sales\SaleItem', 'i')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('i.article', ':article'),
                    $query->expr()->gte('i.timestamp', ':startDate'),
                    $period->isOpen() ? '1=1' : $query->expr()->lt('i.timestamp', ':endDate')
                )
            )
            ->setParameter('article', $article->getId())
            ->setParameter('startDate', $period->getStartDate());
        
        if (!$period->isOpen())
            $query->setParameter('endDate', $period->getEndDate());
        
        $resultSet = $query->getQuery()
            ->getSingleScalarResult();
        
        if (null == $resultSet)
            return 0;
        
        return $resultSet;
    }
    
    public function getNbAssignedByArticle(PeriodEntity $period, Article $article)
    {
        $query = $this->_em->createQueryBuilder();
        $query->select('SUM(b.number)')
            ->from('CudiBundle\Entity\Sales\Booking', 'b')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('b.article', ':article'),
                    $query->expr()->eq('b.status', '\'assigned\''),
                    $query->expr()->gte('b.assignmentDate', ':startDate'),
                    $period->isOpen() ? '1=1' : $query->expr()->lt('b.assignmentDate', ':endDate')
                )
            )
            ->setParameter('article', $article->getId())
            ->setParameter('startDate', $period->getStartDate());
        
        if (!$period->isOpen())
            $query->setParameter('endDate', $period->getEndDate());
        
        $resultSet = $query->getQuery()
            ->getSingleScalarResult();
        
        if (null == $resultSet)
            return 0;
        
        return $resultSet;
    }
    
    public function getNbBookedByArticle(PeriodEntity $period, Article $article)
    {
        $query = $this->_em->createQueryBuilder();
        $query->select('SUM(b.number)')
            ->from('CudiBundle\Entity\Sales\Booking', 'b')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('b.article', ':article'),
                    $query->expr()->eq('b.status', '\'booked\''),
                    $query->expr()->gte('b.bookDate', ':startDate'),
                    $period->isOpen() ? '1=1' : $query->expr()->lt('b.bookDate', ':endDate')
                )
            )
            ->setParameter('article', $article->getId())
            ->setParameter('startDate', $period->getStartDate());
        
        if (!$period->isOpen())
            $query->setParameter('endDate', $period->getEndDate());
        
        $resultSet = $query->getQuery()
            ->getSingleScalarResult();
        
        if (null == $resultSet)
            return 0;
        
        return $resultSet;
    }
}