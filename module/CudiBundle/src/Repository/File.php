<?php

namespace CudiBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * File
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class File extends EntityRepository
{
	public function findAllByArticle($article, $enabled = true)
	{
		$query = $this->_em->createQueryBuilder();
		$resultSet = $query->select('f')
			->from('CudiBundle\Entity\File', 'f')
			->where(
			    $query->expr()->andX(
    			    $enabled ? $query->expr()->eq('f.enabled', 'true') : '1 = 1',
    			    $query->expr()->eq('f.internalArticle', ':article'),
    			    $query->expr()->eq('f.removed', 'false')
    			)
    		)
			->setParameter('article', $article->getId())
			->getQuery()
			->getResult();

        return $resultSet;
	}
	
	public function findAllByArticleForProf($article)
	{
	    $removed = $this->getEntityManager()
	        ->getRepository('ProfBundle\Entity\Action\File\Remove')
	        ->findAllByArticle($article);
	        
	    $ids = array(0);   
	    foreach($removed as $action) {
	        $ids[] = $action->getFile()->getId();
	    }
	    
		$query = $this->_em->createQueryBuilder();
		$resultSet = $query->select('f')
			->from('CudiBundle\Entity\File', 'f')
			->where(
			    $query->expr()->andX(
    			    $query->expr()->eq('f.internalArticle', ':article'),
    			    $query->expr()->eq('f.removed', 'false'),
    			    $query->expr()->notIn('f.id', $ids)
    			)
    		)
			->setParameter('article', $article->getId())
			->getQuery()
			->getResult();

        return $resultSet;
	}
}