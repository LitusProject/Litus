<?php

namespace CudiBundle\Repository\Sales;

use CommonBundle\Component\Util\AcademicYear as AcademicYearUtil,
    CommonBundle\Entity\General\AcademicYear,
    CudiBundle\Entity\Article as ArticleEntity,
    Doctrine\ORM\EntityRepository;

/**
 * Article
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Article extends EntityRepository
{
    public function findAllByAcademicYear(AcademicYear $academicYear)
    {
        $query = $this->_em->createQueryBuilder();
		$resultSet = $query->select('a')
			->from('CudiBundle\Entity\Sales\Article', 'a')
			->innerJoin('a.mainArticle', 'm')
			->where(
			    $query->expr()->andX(
			        $query->expr()->eq('a.isHistory', 'false'),
			        $query->expr()->eq('a.academicYear', ':academicYear')
			    )
			)
			->setParameter('academicYear', $academicYear->getId())
			->orderBy('m.title', 'ASC')
			->getQuery()
			->getResult();

        return $resultSet;
    }
    
    public function findOneByArticleAndAcademicYear(ArticleEntity $article, AcademicYear $academicYear)
    {
        $query = $this->_em->createQueryBuilder();
		$resultSet = $query->select('a')
			->from('CudiBundle\Entity\Sales\Article', 'a')
			->where(
			    $query->expr()->andX(
			        $query->expr()->eq('a.isHistory', 'false'),
			        $query->expr()->eq('a.mainArticle', ':article'),
			        $query->expr()->eq('a.academicYear', ':academicYear')
			    )
			)
			->setParameter('article', $article->getId())
			->setParameter('academicYear', $academicYear->getId())
        	->setMaxResults(1)
			->getQuery()
			->getResult();

       if (isset($resultSet[0]))
           return $resultSet[0];
       
       return null;
    }
    
    public function findOneByBarcode($barcode)
    {
   		$start = AcademicYearUtil::getStartOfAcademicYear();
    	$start->setTime(0, 0);

        $academicYear = $this->getEntityManager()
            ->getRepository('CommonBundle\Entity\General\AcademicYear')
            ->findOneByStartDate($start);
            	
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('a')
        	->from('CudiBundle\Entity\Sales\Article', 'a')
        	->where(
        	    $query->expr()->andX(
        	        $query->expr()->eq('a.isHistory', 'false'),
        	        $query->expr()->eq('a.barcode', ':barcode'),
			        $query->expr()->eq('a.academicYear', ':academicYear')
        	    )
        	)
        	->setParameter('barcode', $barcode)
			->setParameter('academicYear', $academicYear->getId())
        	->setMaxResults(1)
        	->getQuery()
        	->getResult();
        	
        if (isset($resultSet[0]))
        	return $resultSet[0];
        
        return null;
    }
    
    public function findAllByTitle($title)
    {
    	$query = $this->_em->createQueryBuilder();
    	$resultSet = $query->select('a')
    		->from('CudiBundle\Entity\Sales\Article', 'a')
    		->innerJoin('a.mainArticle', 'm')
    		->where($query->expr()->andX(
    		        $query->expr()->like($query->expr()->lower('m.title'), ':title'),
                    $query->expr()->eq('a.isHistory', 'false'),
                    $query->expr()->eq('m.isHistory', 'false'),
                    $query->expr()->eq('m.isProf', 'false')
    			)
    		)
    		->setParameter('title', '%'.strtolower($title).'%')
    		->orderBy('m.title', 'ASC')
    		->getQuery()
    		->getResult();
    		
    	return $resultSet;
    }
    
    public function findAllByAuthor($author)
    {
    	$query = $this->_em->createQueryBuilder();
    	$resultSet = $query->select('a')
    		->from('CudiBundle\Entity\Article', 'a')
    		->innerJoin('a.mainArticle', 'm')
            ->where(
                $query->expr()->andX(
                    $query->expr()->like($query->expr()->lower('m.authors'), ':author'),
                    $query->expr()->eq('a.isHistory', 'false'),
                    $query->expr()->eq('m.isHistory', 'false'),
                    $query->expr()->eq('m.isProf', 'false')
                )
            )
            ->setParameter('author', '%'.strtolower($author).'%')
    		->orderBy('m.title', 'ASC')
    		->getQuery()
    		->getResult();
    		
    	return $resultSet;
    }
    
    public function findAllByPublisher($publisher)
    {
    	$query = $this->_em->createQueryBuilder();
    	$resultSet = $query->select('a')
    		->from('CudiBundle\Entity\Article', 'a')
    		->innerJoin('a.mainArticle', 'm')
    		->where(
    		    $query->expr()->andX(
    		        $query->expr()->like($query->expr()->lower('m.publishers'), ':publisher'),
    		        $query->expr()->eq('a.isHistory', 'false'),
                    $query->expr()->eq('m.isHistory', 'false'),
    		        $query->expr()->eq('m.isProf', 'false')
    		    )
    		)
    		->setParameter('publisher', '%'.strtolower($publisher).'%')
    		->orderBy('m.title', 'ASC')
    		->getQuery()
    		->getResult();
    		
    	return $resultSet;
    }
}