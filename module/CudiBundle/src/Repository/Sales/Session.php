<?php

namespace CudiBundle\Repository\Sales;

use CommonBundle\Entity\General\Bank\CashRegister,
    CommonBundle\Entity\General\Organization,
    CudiBundle\Entity\Sales\Session as SessionEntity,
    DateTime,
    Doctrine\ORM\EntityRepository;

/**
 * Session
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Session extends EntityRepository
{
    public function findOneByCashRegister(CashRegister $cashRegister)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('s')
            ->from('CudiBundle\Entity\Sales\Session', 's')
            ->where($query->expr()->orX(
                    $query->expr()->eq('s.openRegister', ':register'),
                    $query->expr()->eq('s.closeRegister', ':register')
                )
            )
            ->setParameter('register', $cashRegister->getId())
            ->setMaxResults(1)
            ->getQuery()
            ->getResult();

        if (isset($resultSet[0]))
            return $resultSet[0];

        return null;
    }

    public function getTheoreticalRevenue(SessionEntity $session)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('SUM(s.price)')
            ->from('CudiBundle\Entity\Sales\SaleItem', 's')
            ->where(
                $query->expr()->eq('s.session', ':session')
            )
            ->setParameter('session', $session->getId())
            ->getQuery()
            ->getSingleScalarResult();

        if (null === $resultSet)
            $resultSet = 0;

        return $resultSet;
    }

    public function getTheoreticalRevenueByOrganization(SessionEntity $session, Organization $organization)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('SUM(s.price)')
            ->from('CudiBundle\Entity\Sales\SaleItem', 's')
            ->join('s.article', 'a')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('s.session', ':session'),
                    $query->expr()->eq('a.organization', ':organization')
                )
            )
            ->setParameter('organization', $organization)
            ->setParameter('session', $session->getId())
            ->getQuery()
            ->getSingleScalarResult();

        if (null === $resultSet)
            $resultSet = 0;

        return $resultSet;
    }

    public function getLast()
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('s')
            ->from('CudiBundle\Entity\Sales\Session', 's')
            ->setMaxResults(1)
            ->orderBy('s.openDate', 'DESC')
            ->getQuery()
            ->getResult();

        if (isset($resultSet[0]))
            return $resultSet[0];

        return null;
    }

    public function findOnebyDate(DateTime $date)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('s')
            ->from('CudiBundle\Entity\Sales\Session', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->lte('s.openDate', ':now'),
                    $query->expr()->gte('s.closeDate', ':now')
                )
            )
            ->setMaxResults(1)
            ->setParameter('now', $date)
            ->getQuery()
            ->getResult();

        if (isset($resultSet[0]))
            return $resultSet[0];

        return null;
    }

    public function findOpen()
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('s')
            ->from('CudiBundle\Entity\Sales\Session', 's')
            ->where(
                $query->expr()->isNull('s.closeDate')
            )
            ->orderBy('s.openDate', 'DESC')
            ->getQuery()
            ->getResult();

        return $resultSet;
    }
}
