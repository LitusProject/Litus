<?php

namespace CudiBundle\Repository;

use CommonBundle\Entity\Users\Person,
    Doctrine\ORM\EntityRepository,
	Doctrine\ORM\Query\Expr\Join;

/**
 * Article
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Article extends EntityRepository
{
	public function findAll()
	{
		$query = $this->_em->createQueryBuilder();
		$resultSet = $query->select('a')
			->from('CudiBundle\Entity\Article', 'a')
			->where(
			    $query->expr()->andX(
			        $query->expr()->eq('a.enabled', 'true'),
			        $query->expr()->eq('a.removed', 'false')
			    )
			)
			->getQuery()
			->getResult();

        return $resultSet;
	}
	
	public function findAllByTitle($title)
	{
		$query = $this->_em->createQueryBuilder();
		$resultSet = $query->select('a')
			->from('CudiBundle\Entity\Article', 'a')
			->where($query->expr()->andX(
					$query->expr()->like($query->expr()->lower('a.title'), ':title'),
			        $query->expr()->eq('a.enabled', 'true'),
					$query->expr()->eq('a.removed', 'false')
				)
			)
			->setParameter('title', '%'.strtolower($title).'%')
			->orderBy('a.title', 'ASC')
			->getQuery()
			->getResult();
			
		return $resultSet;
	}
	
	public function findAllByAuthor($author)
	{
		$query = $this->_em->createQueryBuilder();
		$resultSet = $query->select('a')
			->from('CudiBundle\Entity\Article', 'a')
			->innerJoin('a.metaInfo', 'm', Join::WITH, $query->expr()->like($query->expr()->lower('m.authors'), ':author'))
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('a.enabled', 'true'),
                    $query->expr()->eq('a.removed', 'false')
                )
            )
            ->setParameter('author', '%'.strtolower($author).'%')
			->orderBy('a.title', 'ASC')
			->getQuery()
			->getResult();
			
		return $resultSet;
	}
	
	public function findAllByPublisher($publisher)
	{
		$query = $this->_em->createQueryBuilder();
		$resultSet = $query->select('a')
			->from('CudiBundle\Entity\Article', 'a')
			->innerJoin('a.metaInfo', 'm', Join::WITH, $query->expr()->like($query->expr()->lower('m.publishers'), ':publisher'))
			->where(
			    $query->expr()->andX(
			        $query->expr()->eq('a.enabled', 'true'),
			        $query->expr()->eq('a.removed', 'false')
			    )
			)
			->setParameter('publisher', '%'.strtolower($publisher).'%')
			->orderBy('a.title', 'ASC')
			->getQuery()
			->getResult();
			
		return $resultSet;
	}
	
	public function findOneByIdAndProf($id, Person $person)
	{
	    $subjects = $this->getEntityManager()
	        ->getRepository('SyllabusBundle\Entity\SubjectProfMap')
	        ->findAllByProf($person);
	     
        $ids = array(0);   
	    foreach($subjects as $subject) {
	        $ids[] = $subject->getSubject()->getId();
	    }
	
	    $query = $this->_em->createQueryBuilder();
	    $resultSet = $query->select('m')
	        ->from('CudiBundle\Entity\ArticleSubjectMap', 'm')
	        ->where(
	            $query->expr()->andX(
	                $query->expr()->eq('m.article', ':id'),
	                $query->expr()->in('m.subject', $ids)
	            )
	        )
	        ->setParameter('id', $id)
	        ->setMaxResults(1)
	        ->getQuery()
	        ->getResult();
	    
	    if (isset($resultSet[0]) && (!$resultSet[0]->getArticle()->isInternal() || $resultSet[0]->getArticle()->isOfficial()))
	    	return $resultSet[0]->getArticle();
	    	
        return $this->getEntityManager()
            ->getRepository('ProfBundle\Entity\Action\Article\Add')
            ->findOneByIdAndPerson($id, $person);
	}
	
	public function findAllByProf(Person $person)
	{
	    $subjects = $this->getEntityManager()
	        ->getRepository('SyllabusBundle\Entity\SubjectProfMap')
	        ->findAllByProf($person);
	     
	    $ids = array(0);   
	    foreach($subjects as $subject) {
	        $ids[] = $subject->getSubject()->getId();
	    }
	
	    $query = $this->_em->createQueryBuilder();
	    $resultSet = $query->select('m')
	        ->from('CudiBundle\Entity\ArticleSubjectMap', 'm')
	        ->where(
                $query->expr()->in('m.subject', $ids)
	        )
	        ->getQuery()
	        ->getResult();
	    
	    $ids = array(0);   
	    foreach($resultSet as $mapping) {
	        $ids[] = $mapping->getArticle()->getId();
	    }
	    
	    $added = $this->getEntityManager()
	        ->getRepository('ProfBundle\Entity\Action\Article\Add')
	        ->findAllByPerson($person);
	        
	    foreach($added as $add) {
	        $ids[] = $add->getArticle()->getId();
	    }
	    
	    $query = $this->_em->createQueryBuilder();
	    $resultSet = $query->select('a')
	        ->from('CudiBundle\Entity\Article', 'a')
	        ->where(
	            $query->expr()->andX(
	                $query->expr()->eq('a.removed', 'false'),
                    $query->expr()->in('a.id', $ids)
	            )
	        )
	        ->orderBy('a.title', 'ASC')
	        ->getQuery()
	        ->getResult();
	        
	    $articles = array();
	    foreach($resultSet as $article) {
	        if (!$article->isInternal() || $article->isOfficial())
	            $articles[] = $article;
	    }
	    
	    return $articles;
	}
}