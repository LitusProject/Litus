<?php

namespace CudiBundle\Repository;

use CudiBundle\Entity\Article as ArticleEntity,
    Doctrine\ORM\EntityRepository,
    SyllabusBundle\Entity\Subject;

/**
 * ArticleSubjectMap
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleSubjectMap extends EntityRepository
{
    public function findAllByArticle(ArticleEntity $article, $enabled = true)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('m')
        	->from('CudiBundle\Entity\ArticleSubjectMap', 'm')
        	->where(
        	    $query->expr()->andX(
    			    $query->expr()->eq('m.removed', 'false'),
    			    $enabled ? $query->expr()->eq('m.enabled', 'true') : '1 = 1',
        	        $query->expr()->eq('m.article', ':article')
        	    )
        	)
        	->setParameter('article', $article->getId())
        	->getQuery()
        	->getResult();
        	
        return $resultSet;
    }
    
    public function findAllBySubject(Subject $subject, $enabled = true)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('m')
        	->from('CudiBundle\Entity\ArticleSubjectMap', 'm')
        	->where(
        	    $query->expr()->andX(
    			    $query->expr()->eq('m.removed', 'false'),
    			    $enabled ? $query->expr()->eq('m.enabled', 'true') : '1 = 1',
        	        $query->expr()->eq('m.subject', ':subject')
        	    )
        	)
        	->setParameter('subject', $subject->getId())
        	->getQuery()
        	->getResult();
        	
        return $resultSet;
    }
    
    public function findAllBySubjectForProf(Subject $subject)
    {
        $removed = $this->getEntityManager()
            ->getRepository('ProfBundle\Entity\Action\Mapping\Remove')
            ->findAllBySubject($subject);
            
        $ids = array(0);   
        foreach($removed as $action) {
            $ids[] = $action->getArticleSubjectMap()->getId();
        }
            
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('m')
        	->from('CudiBundle\Entity\ArticleSubjectMap', 'm')
        	->where(
        	    $query->expr()->andX(
    			    $query->expr()->eq('m.removed', 'false'),
       	            $query->expr()->eq('m.subject', ':subject'),
       	            $query->expr()->notIn('m.id', $ids)
       	        )
        	)
        	->setParameter('subject', $subject->getId())
        	->getQuery()
        	->getResult();
        	
        $articles = array();
        foreach($resultSet as $article) {
            if (!$article->getArticle()->isInternal() || $article->getArticle()->isOfficial())
                $articles[] = $article;
        }
        	
        return $articles;
    }
    
    public function findOneByArticleAndSubject(ArticleEntity $article, Subject $subject)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('m')
        	->from('CudiBundle\Entity\ArticleSubjectMap', 'm')
        	->where(
        	    $query->expr()->andX(
    			    $query->expr()->eq('m.removed', 'false'),
        	        $query->expr()->eq('m.subject', ':subject'),
        	        $query->expr()->eq('m.article', ':article')
        	    )
        	)
        	->setParameter('subject', $subject->getId())
        	->setParameter('article', $article->getId())
        	->setMaxResults(1)
        	->getQuery()
        	->getResult();
        
        if (isset($resultSet[0]))
        	return $resultSet[0];
        
        return null;
    }
}