<?php
/**
 * Litus is a project by a group of students from the KU Leuven. The goal is to create
 * various applications to support the IT needs of student unions.
 *
 * @author Niels Avonds <niels.avonds@litus.cc>
 * @author Karsten Daemen <karsten.daemen@litus.cc>
 * @author Koen Certyn <koen.certyn@litus.cc>
 * @author Bram Gotink <bram.gotink@litus.cc>
 * @author Dario Incalza <dario.incalza@litus.cc>
 * @author Pieter Maene <pieter.maene@litus.cc>
 * @author Kristof MariÃ«n <kristof.marien@litus.cc>
 * @author Lars Vierbergen <lars.vierbergen@litus.cc>
 * @author Daan Wendelen <daan.wendelen@litus.cc>
 * @author Mathijs Cuppens <mathijs.cuppens@litus.cc>
 * @author Floris Kint <floris.kint@vtk.be>
 *
 * @license http://litus.cc/LICENSE
 */

namespace CudiBundle\Repository\Sale;

use CommonBundle\Entity\General\AcademicYear;
use CommonBundle\Entity\General\Organization;
use CommonBundle\Entity\User\Person;
use CudiBundle\Entity\Sale\Article as ArticleEntity;
use CudiBundle\Entity\Sale\Session as SessionEntity;
use CudiBundle\Entity\Supplier;
use DateTime;

/**
 * SaleItem
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SaleItem extends \CommonBundle\Component\Doctrine\ORM\EntityRepository
{
    /**
     * @return \Doctrine\ORM\Query
     */
    public function findAllQuery()
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('i')
            ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->orderBy('i.timestamp', 'DESC')
            ->getQuery();
    }

    /**
     * @param  SessionEntity $session
     * @return integer
     */
    public function findNumberBySession(SessionEntity $session)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('SUM(i.number)')
            ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->where(
                $query->expr()->eq('i.session', ':session')
            )
            ->setParameter('session', $session)
            ->getQuery()
            ->getSingleScalarResult();

        if ($resultSet == null) {
            return 0;
        }

        return $resultSet;
    }

    /**
     * @param  AcademicYear $academicYear
     * @return integer
     */
    public function findNumberByAcademicYear(AcademicYear $academicYear)
    {
        return $this->findNumberBetween($academicYear->getStartDate(), $academicYear->getEndDate());
    }

    /**
     * @param  DateTime $startDate
     * @param  DateTime $endDate
     * @return integer
     */
    public function findNumberBetween(DateTime $startDate, DateTime $endDate)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('SUM(i.number)')
            ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->innerJoin('i.session', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->gt('s.openDate', ':start'),
                    $query->expr()->lt('s.openDate', ':end')
                )
            )
            ->setParameter('start', $startDate)
            ->setParameter('end', $endDate)
            ->getQuery()
            ->getSingleScalarResult();

        if ($resultSet == null) {
            return 0;
        }

        return $resultSet;
    }

    /**
     * @param  AcademicYear $academicYear
     * @return integer
     */
    public function findUniqueClientsByAcademicYear(AcademicYear $academicYear)
    {
        return $this->findUniqueClientsBetween($academicYear->getStartDate(), $academicYear->getEndDate());
    }

    /**
     * @param  DateTime $startDate
     * @param  DateTime $endDate
     * @return integer
     */
    public function findUniqueClientsBetween(DateTime $startDate, DateTime $endDate)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('COUNT(DISTINCT q.person)')
            ->from('CudiBundle\Entity\Sale\QueueItem', 'q')
            ->innerJoin('q.session', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->gt('s.openDate', ':start'),
                    $query->expr()->lt('s.openDate', ':end')
                )
            )
            ->setParameter('start', $startDate)
            ->setParameter('end', $endDate)
            ->getQuery()
            ->getSingleScalarResult();

        if ($resultSet == null) {
            return 0;
        }

        return $resultSet;
    }

    /**
     * @param  AcademicYear      $academicYear
     * @param  Organization|null $organization
     * @return array
     */
    private function personsByAcademicYearAndOrganization(AcademicYear $academicYear, Organization $organization = null)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('p.id')
            ->from('CommonBundle\Entity\User\Person\Organization\AcademicYearMap', 'm')
            ->innerJoin('m.academic', 'p')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('m.academicYear', ':academicYear'),
                    $organization === null ? '1=1' : $query->expr()->eq('m.organization', $organization->getId())
                )
            )
            ->setParameter('academicYear', $academicYear)
            ->getQuery()
            ->getResult();

        $ids = array(0);
        foreach ($resultSet as $item) {
            $ids[] = $item['id'];
        }

        return $ids;
    }

    /**
     * @param  Supplier          $supplier
     * @param  AcademicYear      $academicYear
     * @param  Organization|null $organization
     * @return integer
     */
    public function findNumberBySupplier(Supplier $supplier, AcademicYear $academicYear, Organization $organization = null)
    {
        if ($organization !== null) {
            $ids = $this->personsByAcademicYearAndOrganization($academicYear, $organization);

            $query = $this->getEntityManager()->createQueryBuilder();
            $resultSet = $query->select('SUM(i.number)')
                ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
                ->innerJoin('i.queueItem', 'q')
                ->innerJoin('i.article', 'a')
                ->innerJoin('i.session', 's')
                ->where(
                    $query->expr()->andX(
                        $query->expr()->in('q.person', $ids),
                        $query->expr()->eq('a.supplier', ':supplier'),
                        $query->expr()->gt('s.openDate', ':start'),
                        $query->expr()->lt('s.openDate', ':end')
                    )
                )
                ->setParameter('start', $academicYear->getStartDate())
                ->setParameter('end', $academicYear->getEndDate())
                ->setParameter('supplier', $supplier)
                ->getQuery()
                ->getSingleScalarResult();
        } else {
            $query = $this->getEntityManager()->createQueryBuilder();
            $resultSet = $query->select('SUM(i.number)')
                ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
                ->innerJoin('i.article', 'a')
                ->innerJoin('i.session', 's')
                ->where(
                    $query->expr()->andX(
                        $query->expr()->eq('a.supplier', ':supplier'),
                        $query->expr()->gt('s.openDate', ':start'),
                        $query->expr()->lt('s.openDate', ':end')
                    )
                )
                ->setParameter('start', $academicYear->getStartDate())
                ->setParameter('end', $academicYear->getEndDate())
                ->setParameter('supplier', $supplier)
                ->getQuery()
                ->getSingleScalarResult();
        }

        if ($resultSet == null) {
            return 0;
        }

        return $resultSet;
    }

    /**
     * @param  ArticleEntity     $article
     * @param  AcademicYear      $academicYear
     * @param  Organization|null $organization
     * @return integer
     */
    public function findNumberByArticleAndAcademicYear(ArticleEntity $article, AcademicYear $academicYear, Organization $organization = null)
    {
        if ($organization !== null) {
            $ids = $this->personsByAcademicYearAndOrganization($academicYear, $organization);

            $query = $this->getEntityManager()->createQueryBuilder();
            $resultSet = $query->select('SUM(i.number)')
                ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
                ->innerJoin('i.queueItem', 'q')
                ->innerJoin('i.session', 's')
                ->where(
                    $query->expr()->andX(
                        $query->expr()->eq('i.article', ':article'),
                        $query->expr()->gt('s.openDate', ':start'),
                        $query->expr()->lt('s.openDate', ':end'),
                        $query->expr()->in('q.person', $ids)
                    )
                )
                ->setParameter('article', $article)
                ->setParameter('start', $academicYear->getStartDate())
                ->setParameter('end', $academicYear->getEndDate())
                ->getQuery()
                ->getSingleScalarResult();
        } else {
            $query = $this->getEntityManager()->createQueryBuilder();
            $resultSet = $query->select('SUM(i.number)')
                ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
                ->innerJoin('i.session', 's')
                ->where(
                    $query->expr()->andX(
                        $query->expr()->eq('i.article', ':article'),
                        $query->expr()->gt('s.openDate', ':start'),
                        $query->expr()->lt('s.openDate', ':end')
                    )
                )
                ->setParameter('article', $article)
                ->setParameter('start', $academicYear->getStartDate())
                ->setParameter('end', $academicYear->getEndDate())
                ->getQuery()
                ->getSingleScalarResult();
        }

        if ($resultSet == null) {
            return 0;
        }

        return $resultSet;
    }

    /**
     * @param  ArticleEntity     $article
     * @param  AcademicYear      $academicYear
     * @param  Organization|null $organization
     * @return integer
     */
    public function findNumberByArticleAndAcademicYearAndMember(ArticleEntity $article, AcademicYear $academicYear, Organization $organization = null)
    {
        if ($organization !== null) {
            $ids = $this->personsByAcademicYearAndOrganization($academicYear, $organization);

            $query = $this->getEntityManager()->createQueryBuilder();
            $resultSet = $query->select('SUM(i.number)')
                ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
                ->innerJoin('i.queueItem', 'q')
                ->innerJoin('i.session', 's')
                ->where(
                    $query->expr()->andX(
                        $query->expr()->eq('i.article', ':article'),
                        $query->expr()->gt('s.openDate', ':start'),
                        $query->expr()->lt('s.openDate', ':end'),
                        $query->expr()->eq('i.discountType', ':member'),
                        $query->expr()->in('q.person', $ids)
                    )
                )
                ->setParameter('article', $article)
                ->setParameter('member', 'member')
                ->setParameter('start', $academicYear->getStartDate())
                ->setParameter('end', $academicYear->getEndDate())
                ->getQuery()
                ->getSingleScalarResult();
        } else {
            $ids = $this->personsByAcademicYearAndOrganization($academicYear);

            $query = $this->getEntityManager()->createQueryBuilder();
            $resultSet = $query->select('SUM(i.number)')
                ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
                ->innerJoin('i.queueItem', 'q')
                ->innerJoin('i.session', 's')
                ->where(
                    $query->expr()->andX(
                        $query->expr()->eq('i.article', ':article'),
                        $query->expr()->gt('s.openDate', ':start'),
                        $query->expr()->lt('s.openDate', ':end'),
                        $query->expr()->eq('i.discountType', ':member'),
                        $query->expr()->in('q.person', $ids)
                    )
                )
                ->setParameter('article', $article)
                ->setParameter('member', 'member')
                ->setParameter('start', $academicYear->getStartDate())
                ->setParameter('end', $academicYear->getEndDate())
                ->getQuery()
                ->getSingleScalarResult();
        }

        if ($resultSet == null) {
            return 0;
        }

        return $resultSet;
    }

    /**
     * @param  ArticleEntity     $article
     * @param  AcademicYear      $academicYear
     * @param  string            $discount
     * @param  Organization|null $organization
     * @return integer
     */
    public function findNumberByArticleAndAcademicYearAndDiscount(ArticleEntity $article, AcademicYear $academicYear, $discount, Organization $organization = null)
    {
        if ($organization !== null) {
            $ids = $this->personsByAcademicYearAndOrganization($academicYear, $organization);

            $query = $this->getEntityManager()->createQueryBuilder();
            $resultSet = $query->select('SUM(i.number)')
                ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
                ->innerJoin('i.queueItem', 'q')
                ->innerJoin('i.session', 's')
                ->where(
                    $query->expr()->andX(
                        $query->expr()->in('q.person', $ids),
                        $query->expr()->eq('i.article', ':article'),
                        $query->expr()->gt('s.openDate', ':start'),
                        $query->expr()->lt('s.openDate', ':end'),
                        $query->expr()->eq('i.discountType', ':discount')
                    )
                )
                ->setParameter('article', $article)
                ->setParameter('start', $academicYear->getStartDate())
                ->setParameter('end', $academicYear->getEndDate())
                ->setParameter('discount', $discount)
                ->getQuery()
                ->getSingleScalarResult();
        } else {
            $query = $this->getEntityManager()->createQueryBuilder();
            $resultSet = $query->select('SUM(i.number)')
                ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
                ->innerJoin('i.queueItem', 'q')
                ->innerJoin('i.session', 's')
                ->where(
                    $query->expr()->andX(
                        $query->expr()->eq('i.article', ':article'),
                        $query->expr()->gt('s.openDate', ':start'),
                        $query->expr()->lt('s.openDate', ':end'),
                        $query->expr()->eq('i.discountType', ':discount')
                    )
                )
                ->setParameter('article', $article)
                ->setParameter('start', $academicYear->getStartDate())
                ->setParameter('end', $academicYear->getEndDate())
                ->setParameter('discount', $discount)
                ->getQuery()
                ->getSingleScalarResult();
        }

        if ($resultSet == null) {
            return 0;
        }

        return $resultSet;
    }

    /**
     * @param  Supplier          $supplier
     * @param  AcademicYear      $academicYear
     * @param  Organization|null $organization
     * @return integer
     */
    public function findTotalRevenueBySupplier(Supplier $supplier, AcademicYear $academicYear, Organization $organization = null)
    {
        if ($organization !== null) {
            $ids = $this->personsByAcademicYearAndOrganization($academicYear, $organization);

            $query = $this->getEntityManager()->createQueryBuilder();
            $resultSet = $query->select('SUM(i.price)')
                ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
                ->innerJoin('i.queueItem', 'q')
                ->innerJoin('i.article', 'a')
                ->innerJoin('i.session', 's')
                ->where(
                    $query->expr()->andX(
                        $query->expr()->in('q.person', $ids),
                        $query->expr()->eq('a.supplier', ':supplier'),
                        $query->expr()->gt('s.openDate', ':start'),
                        $query->expr()->lt('s.openDate', ':end')
                    )
                )
                ->setParameter('start', $academicYear->getStartDate())
                ->setParameter('end', $academicYear->getEndDate())
                ->setParameter('supplier', $supplier)
                ->getQuery()
                ->getSingleScalarResult();
        } else {
            $query = $this->getEntityManager()->createQueryBuilder();
            $resultSet = $query->select('SUM(i.price)')
                ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
                ->innerJoin('i.article', 'a')
                ->innerJoin('i.session', 's')
                ->where(
                    $query->expr()->andX(
                        $query->expr()->eq('a.supplier', ':supplier'),
                        $query->expr()->gt('s.openDate', ':start'),
                        $query->expr()->lt('s.openDate', ':end')
                    )
                )
                ->setParameter('start', $academicYear->getStartDate())
                ->setParameter('end', $academicYear->getEndDate())
                ->setParameter('supplier', $supplier)
                ->getQuery()
                ->getSingleScalarResult();
        }

        if ($resultSet == null) {
            return 0;
        }

        return $resultSet;
    }

    /**
     * @param  Supplier          $supplier
     * @param  AcademicYear      $academicYear
     * @param  Organization|null $organization
     * @return integer
     */
    public function findTotalPurchaseBySupplier(Supplier $supplier, AcademicYear $academicYear, Organization $organization = null)
    {
        if ($organization !== null) {
            $ids = $this->personsByAcademicYearAndOrganization($academicYear, $organization);

            $query = $this->getEntityManager()->createQueryBuilder();
            $resultSet = $query->select('SUM(i.purchasePrice)')
                ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
                ->innerJoin('i.queueItem', 'q')
                ->innerJoin('i.article', 'a')
                ->innerJoin('i.session', 's')
                ->where(
                    $query->expr()->andX(
                        $query->expr()->in('q.person', $ids),
                        $query->expr()->eq('a.supplier', ':supplier'),
                        $query->expr()->gt('s.openDate', ':start'),
                        $query->expr()->lt('s.openDate', ':end')
                    )
                )
                ->setParameter('start', $academicYear->getStartDate())
                ->setParameter('end', $academicYear->getEndDate())
                ->setParameter('supplier', $supplier)
                ->getQuery()
                ->getSingleScalarResult();
        } else {
            $query = $this->getEntityManager()->createQueryBuilder();
            $resultSet = $query->select('SUM(i.purchasePrice)')
                ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
                ->innerJoin('i.article', 'a')
                ->innerJoin('i.session', 's')
                ->where(
                    $query->expr()->andX(
                        $query->expr()->eq('a.supplier', ':supplier'),
                        $query->expr()->gt('s.openDate', ':start'),
                        $query->expr()->lt('s.openDate', ':end')
                    )
                )
                ->setParameter('start', $academicYear->getStartDate())
                ->setParameter('end', $academicYear->getEndDate())
                ->setParameter('supplier', $supplier)
                ->getQuery()
                ->getSingleScalarResult();
        }

        if ($resultSet == null) {
            return 0;
        }

        return $resultSet;
    }

    /**
     * @param  ArticleEntity     $article
     * @param  AcademicYear      $academicYear
     * @param  Organization|null $organization
     * @return integer
     */
    public function findTotalRevenueByArticleAndAcademicYear(ArticleEntity $article, AcademicYear $academicYear, Organization $organization = null)
    {
        if ($organization !== null) {
            $ids = $this->personsByAcademicYearAndOrganization($academicYear, $organization);

            $query = $this->getEntityManager()->createQueryBuilder();
            $resultSet = $query->select('SUM(i.price)')
                ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
                ->innerJoin('i.queueItem', 'q')
                ->innerJoin('i.session', 's')
                ->where(
                    $query->expr()->andX(
                        $query->expr()->eq('i.article', ':article'),
                        $query->expr()->gt('s.openDate', ':start'),
                        $query->expr()->lt('s.openDate', ':end'),
                        $query->expr()->in('q.person', $ids)
                    )
                )
                ->setParameter('article', $article)
                ->setParameter('start', $academicYear->getStartDate())
                ->setParameter('end', $academicYear->getEndDate())
                ->getQuery()
                ->getSingleScalarResult();
        } else {
            $query = $this->getEntityManager()->createQueryBuilder();
            $resultSet = $query->select('SUM(i.price)')
                ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
                ->innerJoin('i.session', 's')
                ->where(
                    $query->expr()->andX(
                        $query->expr()->eq('i.article', ':article'),
                        $query->expr()->gt('s.openDate', ':start'),
                        $query->expr()->lt('s.openDate', ':end')
                    )
                )
                ->setParameter('article', $article)
                ->setParameter('start', $academicYear->getStartDate())
                ->setParameter('end', $academicYear->getEndDate())
                ->getQuery()
                ->getSingleScalarResult();
        }

        if ($resultSet == null) {
            return 0;
        }

        return $resultSet;
    }

    /**
     * @param  AcademicYear $academicYear
     * @return \Doctrine\ORM\Query
     */
    public function findAllByAcademicYearQuery(AcademicYear $academicYear)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('i')
            ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->innerJoin('i.session', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->gt('s.openDate', ':start'),
                    $query->expr()->lt('s.openDate', ':end')
                )
            )
            ->setParameter('start', $academicYear->getStartDate())
            ->setParameter('end', $academicYear->getEndDate())
            ->orderBy('i.timestamp', 'DESC')
            ->getQuery();
    }

    /**
     * @param  string       $article
     * @param  AcademicYear $academicYear
     * @return \Doctrine\ORM\Query
     */
    public function findAllByArticleAndAcademicYearQuery($article, AcademicYear $academicYear)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('i')
            ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->innerJoin('i.article', 'a')
            ->innerJoin('a.mainArticle', 'm')
            ->innerJoin('i.session', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->like($query->expr()->lower('m.title'), ':article'),
                    $query->expr()->andX(
                        $query->expr()->gt('s.openDate', ':start'),
                        $query->expr()->lt('s.openDate', ':end')
                    )
                )
            )
            ->setParameter('article', '%' . strtolower($article) . '%')
            ->setParameter('start', $academicYear->getStartDate())
            ->setParameter('end', $academicYear->getEndDate())
            ->orderBy('i.timestamp', 'DESC')
            ->getQuery();
    }

    /**
     * @param  string       $name
     * @param  AcademicYear $academicYear
     * @return \Doctrine\ORM\Query
     */
    public function findAllByPersonAndAcademicYearQuery($name, AcademicYear $academicYear)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('i')
            ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->innerJoin('i.queueItem', 'q')
            ->innerJoin('q.person', 'p')
            ->innerJoin('i.session', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->orX(
                        $query->expr()->like(
                            $query->expr()->concat(
                                $query->expr()->lower($query->expr()->concat('p.firstName', "' '")),
                                $query->expr()->lower('p.lastName')
                            ),
                            ':name'
                        ),
                        $query->expr()->like(
                            $query->expr()->concat(
                                $query->expr()->lower($query->expr()->concat('p.lastName', "' '")),
                                $query->expr()->lower('p.firstName')
                            ),
                            ':name'
                        )
                    ),
                    $query->expr()->andX(
                        $query->expr()->gt('s.openDate', ':start'),
                        $query->expr()->lt('s.openDate', ':end')
                    )
                )
            )
            ->setParameter('name', '%' . strtolower($name) . '%')
            ->setParameter('start', $academicYear->getStartDate())
            ->setParameter('end', $academicYear->getEndDate())
            ->orderBy('i.timestamp', 'DESC')
            ->getQuery();
    }

    /**
     * @param  AcademicYear      $academicYear
     * @param  Organization|null $organization
     * @return \Doctrine\ORM\Query
     */
    public function findallByAcademicYearAndOrganizationQuery(AcademicYear $academicYear, Organization $organization = null)
    {
        $ids = $this->personsByAcademicYearAndOrganization($academicYear, $organization);

        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('i')
            ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->innerJoin('i.queueItem', 'q')
            ->where(
                $organization == null ? $query->expr()->notIn('q.person', $ids) : $query->expr()->in('q.person', $ids)
            )
            ->orderBy('i.timestamp', 'DESC')
            ->getQuery();
    }

    /**
     * @param  string       $discount
     * @param  AcademicYear $academicYear
     * @return \Doctrine\ORM\Query
     */
    public function findAllByDiscountAndAcademicYearQuery($discount, AcademicYear $academicYear)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('i')
            ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->innerJoin('i.session', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->like($query->expr()->lower('i.discountType'), ':discount'),
                    $query->expr()->andX(
                        $query->expr()->gt('s.openDate', ':start'),
                        $query->expr()->lt('s.openDate', ':end')
                    )
                )
            )
            ->setParameter('discount', '%' . strtolower($discount) . '%')
            ->setParameter('start', $academicYear->getStartDate())
            ->setParameter('end', $academicYear->getEndDate())
            ->orderBy('i.timestamp', 'DESC')
            ->getQuery();
    }

    /**
     * @param  string       $type
     * @param  AcademicYear $academicYear
     * @return \Doctrine\ORM\Query
     */
    public function findAllByTypeAndAcademicYearQuery($type, AcademicYear $academicYear)
    {
        $entity = 'CudiBundle\Entity\Sale\SaleItem';
        if ($type == 'prof') {
            $entity = 'CudiBundle\Entity\Sale\SaleItem\Prof';
        } elseif ($type == 'external') {
            $entity = 'CudiBundle\Entity\Sale\SaleItem\External';
        }

        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('i')
            ->from($entity, 'i')
            ->innerJoin('i.session', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->gt('s.openDate', ':start'),
                    $query->expr()->lt('s.openDate', ':end')
                )
            )
            ->setParameter('start', $academicYear->getStartDate())
            ->setParameter('end', $academicYear->getEndDate())
            ->orderBy('i.timestamp', 'DESC')
            ->getQuery();
    }

    /**
     * @param  SessionEntity $session
     * @return \Doctrine\ORM\Query
     */
    public function findAllBySessionQuery(SessionEntity $session)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('i')
            ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->where(
                $query->expr()->eq('i.session', ':session')
            )
            ->setParameter('session', $session)
            ->orderBy('i.timestamp', 'DESC')
            ->getQuery();
    }

    /**
     * @param  string        $article
     * @param  SessionEntity $session
     * @return \Doctrine\ORM\Query
     */
    public function findAllByArticleAndSessionQuery($article, SessionEntity $session)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('i')
            ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->innerJoin('i.article', 'a')
            ->innerJoin('a.mainArticle', 'm')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('i.session', ':session'),
                    $query->expr()->like($query->expr()->lower('m.title'), ':article')
                )
            )
            ->setParameter('article', '%' . strtolower($article) . '%')
            ->setParameter('session', $session)
            ->orderBy('i.timestamp', 'DESC')
            ->getQuery();
    }

    /**
     * @param  string        $name
     * @param  SessionEntity $session
     * @return \Doctrine\ORM\Query
     */
    public function findAllByPersonAndSessionQuery($name, SessionEntity $session)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('i')
            ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->innerJoin('i.queueItem', 'q')
            ->innerJoin('q.person', 'p')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('i.session', ':session'),
                    $query->expr()->orX(
                        $query->expr()->like(
                            $query->expr()->concat(
                                $query->expr()->lower($query->expr()->concat('p.firstName', "' '")),
                                $query->expr()->lower('p.lastName')
                            ),
                            ':name'
                        ),
                        $query->expr()->like(
                            $query->expr()->concat(
                                $query->expr()->lower($query->expr()->concat('p.lastName', "' '")),
                                $query->expr()->lower('p.firstName')
                            ),
                            ':name'
                        )
                    )
                )
            )
            ->setParameter('name', '%' . strtolower($name) . '%')
            ->setParameter('session', $session)
            ->orderBy('i.timestamp', 'DESC')
            ->getQuery();
    }

    /**
     * @param  SessionEntity     $session
     * @param  Organization|null $organization
     * @return \Doctrine\ORM\Query
     */
    public function findAllBySessionAndOrganizationQuery(SessionEntity $session, Organization $organization = null)
    {
        $ids = $this->personsByAcademicYearAndOrganization($session->getAcademicYear(), $organization);

        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('i')
            ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->innerJoin('i.queueItem', 'q')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('i.session', ':session'),
                    $organization == null ? $query->expr()->notIn('q.person', $ids) : $query->expr()->in('q.person', $ids)
                )
            )
            ->setParameter('session', $session)
            ->orderBy('i.timestamp', 'DESC')
            ->getQuery();
    }

    /**
     * @param  string        $discount
     * @param  SessionEntity $session
     * @return \Doctrine\ORM\Query
     */
    public function findAllByDiscountAndSessionQuery($discount, SessionEntity $session)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('i')
            ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('i.session', ':session'),
                    $query->expr()->like($query->expr()->lower('i.discountType'), ':discount')
                )
            )
            ->setParameter('discount', '%' . strtolower($discount) . '%')
            ->setParameter('session', $session)
            ->orderBy('i.timestamp', 'DESC')
            ->getQuery();
    }

    /**
     * @param  ArticleEntity $article
     * @param  AcademicYear  $academicYear
     * @return \Doctrine\ORM\Query
     */
    public function findAllByArticleEntityQuery(ArticleEntity $article, AcademicYear $academicYear)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('i')
            ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->innerJoin('i.session', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('i.article', ':article'),
                    $query->expr()->andX(
                        $query->expr()->gt('s.openDate', ':start'),
                        $query->expr()->lt('s.openDate', ':end')
                    )
                )
            )
            ->setParameter('article', $article)
            ->setParameter('start', $academicYear->getStartDate())
            ->setParameter('end', $academicYear->getEndDate())
            ->orderBy('i.timestamp', 'DESC')
            ->getQuery();
    }

    /**
     * @param  string        $name
     * @param  ArticleEntity $article
     * @param  AcademicYear  $academicYear
     * @return \Doctrine\ORM\Query
     */
    public function findAllByPersonAndArticleQuery($name, ArticleEntity $article, AcademicYear $academicYear)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('i')
            ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->innerJoin('i.queueItem', 'q')
            ->innerJoin('q.person', 'p')
            ->innerJoin('i.session', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('i.article', ':article'),
                    $query->expr()->orX(
                        $query->expr()->like(
                            $query->expr()->concat(
                                $query->expr()->lower($query->expr()->concat('p.firstName', "' '")),
                                $query->expr()->lower('p.lastName')
                            ),
                            ':name'
                        ),
                        $query->expr()->like(
                            $query->expr()->concat(
                                $query->expr()->lower($query->expr()->concat('p.lastName', "' '")),
                                $query->expr()->lower('p.firstName')
                            ),
                            ':name'
                        )
                    ),
                    $query->expr()->andX(
                        $query->expr()->gt('s.openDate', ':start'),
                        $query->expr()->lt('s.openDate', ':end')
                    )
                )
            )
            ->setParameter('name', '%' . strtolower($name) . '%')
            ->setParameter('article', $article)
            ->setParameter('start', $academicYear->getStartDate())
            ->setParameter('end', $academicYear->getEndDate())
            ->orderBy('i.timestamp', 'DESC')
            ->getQuery();
    }

    /**
     * @param  ArticleEntity     $article
     * @param  AcademicYear      $academicYear
     * @param  Organization|null $organization
     * @return \Doctrine\ORM\Query
     */
    public function findAllByOrganizationAndArticleQuery(ArticleEntity $article, AcademicYear $academicYear, Organization $organization = null)
    {
        $ids = $this->personsByAcademicYearAndOrganization($academicYear, $organization);

        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('i')
            ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->innerJoin('i.queueItem', 'q')
            ->where(
                $query->expr()->andX(
                    $organization == null ? $query->expr()->notIn('q.person', $ids) : $query->expr()->in('q.person', $ids),
                    $query->expr()->eq('i.article', ':article')
                )
            )
            ->setParameter('article', $article)
            ->orderBy('i.timestamp', 'DESC')
            ->getQuery();
    }

    /**
     * @param  string        $discount
     * @param  ArticleEntity $article
     * @param  AcademicYear  $academicYear
     * @return \Doctrine\ORM\Query
     */
    public function findAllByDiscountAndArticleQuery($discount, ArticleEntity $article, AcademicYear $academicYear)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('i')
            ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->innerJoin('i.session', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('i.article', ':article'),
                    $query->expr()->like($query->expr()->lower('i.discountType'), ':discount'),
                    $query->expr()->andX(
                        $query->expr()->gt('s.openDate', ':start'),
                        $query->expr()->lt('s.openDate', ':end')
                    )
                )
            )
            ->setParameter('discount', '%' . strtolower($discount) . '%')
            ->setParameter('article', $article)
            ->setParameter('start', $academicYear->getStartDate())
            ->setParameter('end', $academicYear->getEndDate())
            ->orderBy('i.timestamp', 'DESC')
            ->getQuery();
    }

    /**
     * @param  Supplier     $supplier
     * @param  AcademicYear $academicYear
     * @return \Doctrine\ORM\Query
     */
    public function findAllBySupplierEntityQuery(Supplier $supplier, AcademicYear $academicYear)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('i')
            ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->innerJoin('i.article', 'a')
            ->innerJoin('i.session', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('a.supplier', ':supplier'),
                    $query->expr()->andX(
                        $query->expr()->gt('s.openDate', ':start'),
                        $query->expr()->lt('s.openDate', ':end')
                    )
                )
            )
            ->setParameter('supplier', $supplier)
            ->setParameter('start', $academicYear->getStartDate())
            ->setParameter('end', $academicYear->getEndDate())
            ->orderBy('i.timestamp', 'DESC')
            ->getQuery();
    }

    /**
     * @param  string   $article
     * @param  Supplier $supplier
     * @return \Doctrine\ORM\Query
     */
    public function findAllByArticleAndSupplierQuery($article, Supplier $supplier)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('i')
            ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->innerJoin('i.article', 'a')
            ->innerJoin('a.mainArticle', 'm')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('a.supplier', ':supplier'),
                    $query->expr()->like($query->expr()->lower('m.title'), ':article')
                )
            )
            ->setParameter('article', '%' . strtolower($article) . '%')
            ->setParameter('supplier', $supplier)
            ->orderBy('i.timestamp', 'DESC')
            ->getQuery();
    }

    /**
     * @param  string   $name
     * @param  Supplier $supplier
     * @return \Doctrine\ORM\Query
     */
    public function findAllByPersonAndSupplierQuery($name, Supplier $supplier)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('i')
            ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->innerJoin('i.article', 'a')
            ->innerJoin('i.queueItem', 'q')
            ->innerJoin('q.person', 'p')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('a.supplier', ':supplier'),
                    $query->expr()->orX(
                        $query->expr()->like(
                            $query->expr()->concat(
                                $query->expr()->lower($query->expr()->concat('p.firstName', "' '")),
                                $query->expr()->lower('p.lastName')
                            ),
                            ':name'
                        ),
                        $query->expr()->like(
                            $query->expr()->concat(
                                $query->expr()->lower($query->expr()->concat('p.lastName', "' '")),
                                $query->expr()->lower('p.firstName')
                            ),
                            ':name'
                        )
                    )
                )
            )
            ->setParameter('name', '%' . strtolower($name) . '%')
            ->setParameter('supplier', $supplier)
            ->orderBy('i.timestamp', 'DESC')
            ->getQuery();
    }

    /**
     * @param  Supplier          $supplier
     * @param  AcademicYear      $academicYear
     * @param  Organization|null $organization
     * @return \Doctrine\ORM\Query
     */
    public function findAllByOrganizationAndSupplierQuery(Supplier $supplier, AcademicYear $academicYear, Organization $organization = null)
    {
        $ids = $this->personsByAcademicYearAndOrganization($academicYear, $organization);

        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('i')
            ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->innerJoin('i.article', 'a')
            ->innerJoin('i.queueItem', 'q')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('a.supplier', ':supplier'),
                    $organization == null ? $query->expr()->notIn('q.person', $ids) : $query->expr()->in('q.person', $ids)
                )
            )
            ->setParameter('supplier', $supplier)
            ->orderBy('i.timestamp', 'DESC')
            ->getQuery();
    }

    /**
     * @param  string   $discount
     * @param  Supplier $supplier
     * @return \Doctrine\ORM\Query
     */
    public function findAllByDiscountAndSupplierQuery($discount, Supplier $supplier)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('i')
            ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->innerJoin('i.article', 'a')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('a.supplier', ':supplier'),
                    $query->expr()->like($query->expr()->lower('i.discountType'), ':discount')
                )
            )
            ->setParameter('discount', '%' . strtolower($discount) . '%')
            ->setParameter('supplier', $supplier)
            ->orderBy('i.timestamp', 'DESC')
            ->getQuery();
    }

    /**
     * @param  Person        $person
     * @param  ArticleEntity $article
     * @return \CudiBundle\Entity\Sale\SaleItem|null
     */
    public function findOneByPersonAndArticle(Person $person, ArticleEntity $article)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('i')
            ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->innerJoin('i.queueItem', 'q')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('q.person', ':person'),
                    $query->expr()->eq('i.article', ':article')
                )
            )
            ->setParameter('person', $person->getId())
            ->setParameter('article', $article->getId())
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param  ArticleEntity $article
     * @param  Person        $person
     * @param  string        $discountType
     * @param  AcademicYear  $academicYear
     * @return \CudiBundle\Entity\Sale\SaleItem|null
     */
    public function findOneByArticleAndPersonAndDiscountType(ArticleEntity $article, Person $person, $discountType, AcademicYear $academicYear)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('i')
            ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->innerJoin('i.queueItem', 'q')
            ->innerJoin('i.session', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('q.person', ':person'),
                    $query->expr()->eq('i.article', ':article'),
                    $query->expr()->eq('i.discountType', ':discountType'),
                    $query->expr()->gt('s.openDate', ':start'),
                    $query->expr()->lt('s.openDate', ':end')
                )
            )
            ->setParameter('person', $person->getId())
            ->setParameter('article', $article->getId())
            ->setParameter('discountType', $discountType)
            ->setParameter('start', $academicYear->getStartDate())
            ->setParameter('end', $academicYear->getEndDate())
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }
}
