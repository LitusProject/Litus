<?php
/**
 * Litus is a project by a group of students from the KU Leuven. The goal is to create
 * various applications to support the IT needs of student unions.
 *
 * @author Niels Avonds <niels.avonds@litus.cc>
 * @author Karsten Daemen <karsten.daemen@litus.cc>
 * @author Koen Certyn <koen.certyn@litus.cc>
 * @author Bram Gotink <bram.gotink@litus.cc>
 * @author Dario Incalza <dario.incalza@litus.cc>
 * @author Pieter Maene <pieter.maene@litus.cc>
 * @author Kristof MariÃ«n <kristof.marien@litus.cc>
 * @author Lars Vierbergen <lars.vierbergen@litus.cc>
 * @author Daan Wendelen <daan.wendelen@litus.cc>
 *
 * @license http://litus.cc/LICENSE
 */

namespace CudiBundle\Repository\Sale;

use CommonBundle\Entity\General\AcademicYear,
    CommonBundle\Entity\User\Person,
    CudiBundle\Component\Mail\Booking as BookingMail,
    CudiBundle\Entity\Log\Sale\Assignments as LogAssignments,
    CudiBundle\Entity\Log\Sale\Cancellations as LogCancellations,
    CudiBundle\Entity\Sale\Article as ArticleEntity,
    CudiBundle\Entity\Sale\Booking as BookingEntity,
    CudiBundle\Entity\Stock\Period,
    DateTime,
    DateInterval,
    Exception,
    CommonBundle\Component\Doctrine\ORM\EntityRepository,
    Zend\Mail\Transport\TransportInterface;

/**
 * Booking
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Booking extends EntityRepository
{
    public function findAllActiveByPeriodQuery(Period $period)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select('b')
            ->from('CudiBundle\Entity\Sale\Booking', 'b')
            ->where(
                $query->expr()->andX(
                    $query->expr()->orX(
                        $query->expr()->eq('b.status', '\'booked\''),
                        $query->expr()->eq('b.status', '\'assigned\'')
                    ),
                    $query->expr()->gte('b.bookDate', ':startDate'),
                    $period->isOpen() ? '1=1' : $query->expr()->lt('b.bookDate', ':endDate')
                )
            )
            ->setParameter('startDate', $period->getStartDate());

        if (!$period->isOpen())
            $query->setParameter('endDate', $period->getEndDate());

        $resultSet = $query->orderBy('b.bookDate', 'DESC')
            ->getQuery();

        return $resultSet;
    }

    public function findAllActiveByArticleAndPeriodQuery(ArticleEntity $article, Period $period)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select('b')
            ->from('CudiBundle\Entity\Sale\Booking', 'b')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('b.article', ':article'),
                    $query->expr()->orX(
                        $query->expr()->eq('b.status', '\'booked\''),
                        $query->expr()->eq('b.status', '\'assigned\'')
                    ),
                    $query->expr()->gte('b.bookDate', ':startDate'),
                    $period->isOpen() ? '1=1' : $query->expr()->lt('b.bookDate', ':endDate')
                )
            )
            ->setParameter('article', $article)
            ->setParameter('startDate', $period->getStartDate());

        if (!$period->isOpen())
            $query->setParameter('endDate', $period->getEndDate());

        $resultSet = $query->orderBy('b.bookDate', 'DESC')
            ->getQuery();

        return $resultSet;
    }

    public function findAllByPersonAndPeriodQuery(Person $person, Period $period)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select('b')
            ->from('CudiBundle\Entity\Sale\Booking', 'b')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('b.person', ':person'),
                    $query->expr()->gte('b.bookDate', ':startDate'),
                    $period->isOpen() ? '1=1' : $query->expr()->lt('b.bookDate', ':endDate')
                )
            )
            ->setParameter('person', $person->getId())
            ->setParameter('startDate', $period->getStartDate());

        if (!$period->isOpen())
            $query->setParameter('endDate', $period->getEndDate());

        $resultSet = $query->orderBy('b.bookDate', 'DESC')
            ->getQuery();

        return $resultSet;
    }

    public function findAllByPersonAndAcademicYearQuery(Person $person, AcademicYear $academicYear)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('b')
            ->from('CudiBundle\Entity\Sale\Booking', 'b')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('b.person', ':person'),
                    $query->expr()->gte('b.bookDate', ':startDate'),
                    $query->expr()->lt('b.bookDate', ':endDate')
                )
            )
            ->setParameter('person', $person->getId())
            ->setParameter('startDate', $academicYear->getUniversityStartDate())
            ->setParameter('endDate', $academicYear->getUniversityEndDate())
            ->orderBy('b.bookDate', 'DESC')
            ->getQuery();

        return $resultSet;
    }

    public function findAllByArticleAndPeriodQuery(ArticleEntity $article, Period $period)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select('b')
            ->from('CudiBundle\Entity\Sale\Booking', 'b')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('b.article', ':article'),
                    $query->expr()->gte('b.bookDate', ':startDate'),
                    $period->isOpen() ? '1=1' : $query->expr()->lt('b.bookDate', ':endDate')
                )
            )
            ->setParameter('article', $article->getId())
            ->setParameter('startDate', $period->getStartDate());

        if (!$period->isOpen())
            $query->setParameter('endDate', $period->getEndDate());

        $resultSet = $query->orderBy('b.bookDate', 'DESC')
            ->getQuery();

        return $resultSet;
    }

    public function findAllByArticleAndAcademicYearQuery(ArticleEntity $article, AcademicYear $academicYear)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('b')
            ->from('CudiBundle\Entity\Sale\Booking', 'b')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('b.article', ':article'),
                    $query->expr()->gte('b.bookDate', ':startDate'),
                    $query->expr()->lt('b.bookDate', ':endDate')
                )
            )
            ->setParameter('article', $article->getId())
            ->setParameter('startDate', $academicYear->getUniversityStartDate())
            ->setParameter('endDate', $academicYear->getUniversityEndDate())
            ->orderBy('b.bookDate', 'DESC')
            ->getQuery();

        return $resultSet;
    }

    public function findAllByStatusAndArticleAndPeriodQuery($status, ArticleEntity $article, Period $period)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select('b')
            ->from('CudiBundle\Entity\Sale\Booking', 'b')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('b.status', ':status'),
                    $query->expr()->eq('b.article', ':article'),
                    $query->expr()->gte('b.bookDate', ':startDate'),
                    $period->isOpen() ? '1=1' : $query->expr()->lt('b.bookDate', ':endDate')
                )
            )
            ->setParameter('status', $status)
            ->setParameter('article', $article)
            ->setParameter('startDate', $period->getStartDate());

            if (!$period->isOpen())
                $query->setParameter('endDate', $period->getEndDate());

        $resultSet = $query->orderBy('b.bookDate', 'DESC')
            ->getQuery();

        return $resultSet;
    }

    public function findAllInactiveByPeriodQuery(Period $period)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select('b')
            ->from('CudiBundle\Entity\Sale\Booking', 'b')
            ->where(
                $query->expr()->andX(
                    $query->expr()->not(
                        $query->expr()->orX(
                            $query->expr()->eq('b.status', '\'booked\''),
                            $query->expr()->eq('b.status', '\'assigned\'')
                        )
                    ),
                    $query->expr()->gte('b.bookDate', ':startDate'),
                    $period->isOpen() ? '1=1' : $query->expr()->lt('b.bookDate', ':endDate')
                )
            )
            ->setParameter('startDate', $period->getStartDate());

        if (!$period->isOpen())
            $query->setParameter('endDate', $period->getEndDate());

        $resultSet = $query->orderBy('b.bookDate', 'DESC')
            ->getQuery();

        return $resultSet;
    }

    public function findAllByPersonNameAndTypeAndPeriodQuery($person, $type, Period $period)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select('b')
            ->from('CudiBundle\Entity\Sale\Booking', 'b')
            ->innerJoin('b.person', 'p')
            ->where(
                $query->expr()->andX(
                    $query->expr()->orX(
                        $query->expr()->andX(
                            $query->expr()->eq('\'active\'', ':type'),
                            $query->expr()->orX(
                                $query->expr()->eq('b.status', '\'booked\''),
                                $query->expr()->eq('b.status', '\'assigned\'')
                            )
                        ),
                        $query->expr()->andX(
                            $query->expr()->eq('\'inactive\'', ':type'),
                            $query->expr()->not(
                                $query->expr()->orX(
                                    $query->expr()->eq('b.status', '\'booked\''),
                                    $query->expr()->eq('b.status', '\'assigned\'')
                                )
                            )
                        )
                    ),
                    $query->expr()->gte('b.bookDate', ':startDate'),
                    $period->isOpen() ? '1=1' : $query->expr()->lt('b.bookDate', ':endDate'),
                    $query->expr()->orX(
                        $query->expr()->like(
                            $query->expr()->concat(
                                $query->expr()->lower($query->expr()->concat('p.firstName', "' '")),
                                $query->expr()->lower('p.lastName')
                            ),
                            ':name'
                        ),
                        $query->expr()->like(
                            $query->expr()->concat(
                                $query->expr()->lower($query->expr()->concat('p.lastName', "' '")),
                                $query->expr()->lower('p.firstName')
                            ),
                            ':name'
                        )
                    )
                )
            )
            ->setParameter('name', '%'.strtolower($person).'%')
            ->setParameter('type', $type)
            ->setParameter('startDate', $period->getStartDate());

        if (!$period->isOpen())
            $query->setParameter('endDate', $period->getEndDate());

        $resultSet = $query->orderBy('b.bookDate', 'DESC')
            ->getQuery();

        return $resultSet;
    }

    public function findAllByArticleAndTypeAndPeriodQuery($article, $type, Period $period)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select('b')
            ->from('CudiBundle\Entity\Sale\Booking', 'b')
            ->innerJoin('b.article', 'a')
            ->innerJoin('a.mainArticle', 'm')
            ->where(
                $query->expr()->andX(
                    $query->expr()->orX(
                        $query->expr()->andX(
                            $query->expr()->eq('\'active\'', ':type'),
                            $query->expr()->orX(
                                $query->expr()->eq('b.status', '\'booked\''),
                                $query->expr()->eq('b.status', '\'assigned\'')
                            )
                        ),
                        $query->expr()->andX(
                            $query->expr()->eq('\'inactive\'', ':type'),
                            $query->expr()->not(
                                $query->expr()->orX(
                                    $query->expr()->eq('b.status', '\'booked\''),
                                    $query->expr()->eq('b.status', '\'assigned\'')
                                )
                            )
                        )
                    ),
                    $query->expr()->gte('b.bookDate', ':startDate'),
                    $period->isOpen() ? '1=1' : $query->expr()->lt('b.bookDate', ':endDate'),
                    $query->expr()->like($query->expr()->lower('m.title'), ':article')
                )
            )
            ->setParameter('article', '%'.strtolower($article).'%')
            ->setParameter('type', $type)
            ->setParameter('startDate', $period->getStartDate());

        if (!$period->isOpen())
            $query->setParameter('endDate', $period->getEndDate());

        $resultSet = $query->orderBy('b.bookDate', 'DESC')
            ->getQuery();

        return $resultSet;
    }

    public function findAllByStatusAndTypeAndPeriodQuery($status, $type, Period $period)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select('b')
            ->from('CudiBundle\Entity\Sale\Booking', 'b')
            ->where(
                $query->expr()->andX(
                    $query->expr()->orX(
                        $query->expr()->andX(
                            $query->expr()->eq('\'active\'', ':type'),
                            $query->expr()->orX(
                                $query->expr()->eq('b.status', '\'booked\''),
                                $query->expr()->eq('b.status', '\'assigned\'')
                            )
                        ),
                        $query->expr()->andX(
                            $query->expr()->eq('\'inactive\'', ':type'),
                            $query->expr()->not(
                                $query->expr()->orX(
                                    $query->expr()->eq('b.status', '\'booked\''),
                                    $query->expr()->eq('b.status', '\'assigned\'')
                                )
                            )
                        )
                    ),
                    $query->expr()->like($query->expr()->lower('b.status'), ':status'),
                    $query->expr()->gte('b.bookDate', ':startDate'),
                    $period->isOpen() ? '1=1' : $query->expr()->lt('b.bookDate', ':endDate')
                )
            )
            ->setParameter('status', '%'.strtolower($status).'%')
            ->setParameter('type', $type)
            ->setParameter('startDate', $period->getStartDate());

        if (!$period->isOpen())
            $query->setParameter('endDate', $period->getEndDate());

        $resultSet = $query->orderBy('b.bookDate', 'DESC')
            ->getQuery();

        return $resultSet;
    }

    public function findAllBookedQuery(Period $period = null)
    {
        if (null == $period) {
            $period = $this->getEntityManager()
                ->getRepository('CudiBundle\Entity\Stock\Period')
                ->findOneActive();
        }

        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select('b')
            ->from('CudiBundle\Entity\Sale\Booking', 'b')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('b.status', '\'booked\''),
                    $query->expr()->gte('b.bookDate', ':startDate'),
                    $period->isOpen() ? '1=1' : $query->expr()->lt('b.bookDate', ':endDate')
                )
            )
            ->setParameter('startDate', $period->getStartDate());

        if (!$period->isOpen())
            $query->setParameter('endDate', $period->getEndDate());

        $resultSet = $query->orderBy('b.bookDate', 'DESC')
            ->getQuery();

        return $resultSet;
    }

    public function findAllAssignedQuery(Period $period = null)
    {
        if (null == $period) {
            $period = $this->getEntityManager()
                ->getRepository('CudiBundle\Entity\Stock\Period')
                ->findOneActive();
        }

        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select('b')
            ->from('CudiBundle\Entity\Sale\Booking', 'b')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('b.status', '\'assigned\''),
                    $query->expr()->gte('b.bookDate', ':startDate'),
                    $period->isOpen() ? '1=1' : $query->expr()->lt('b.bookDate', ':endDate')
                )
            )
            ->setParameter('startDate', $period->getStartDate());

        if (!$period->isOpen())
            $query->setParameter('endDate', $period->getEndDate());

        $resultSet = $query->orderBy('b.bookDate', 'DESC')
            ->getQuery();

        return $resultSet;
    }

    public function findAllBookedArticlesQuery()
    {
        $period = $this->getEntityManager()
            ->getRepository('CudiBundle\Entity\Stock\Period')
            ->findOneActive();

        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select('a')
            ->from('CudiBundle\Entity\Sale\Booking', 'b')
            ->from('CudiBundle\Entity\Sale\Article', 'a')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('b.article', 'a'),
                    $query->expr()->eq('b.status', '\'booked\''),
                    $query->expr()->gte('b.bookDate', ':startDate'),
                    $period->isOpen() ? '1=1' : $query->expr()->lt('b.bookDate', ':endDate')
                )
            )
            ->setParameter('startDate', $period->getStartDate());

        if (!$period->isOpen())
            $query->setParameter('endDate', $period->getEndDate());

        $resultSet = $query->orderBy('b.bookDate', 'DESC')
            ->getQuery();

        return $resultSet;
    }

    public function findAllBookedByArticleAndPeriodQuery(ArticleEntity $article, Period $period)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select('b')
            ->from('CudiBundle\Entity\Sale\Booking', 'b')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('b.article', ':article'),
                    $query->expr()->eq('b.status', '\'booked\''),
                    $query->expr()->gte('b.bookDate', ':startDate'),
                    $period->isOpen() ? '1=1' : $query->expr()->lt('b.bookDate', ':endDate')
                )
            )
            ->setParameter('article', $article->getId())
            ->setParameter('startDate', $period->getStartDate());

        if (!$period->isOpen())
            $query->setParameter('endDate', $period->getEndDate());

        $resultSet = $query->orderBy('b.bookDate', 'ASC')
            ->getQuery();

        return $resultSet;
    }

    public function findAllAssignedByPersonQuery(Person $person)
    {
        $period = $this->getEntityManager()
            ->getRepository('CudiBundle\Entity\Stock\Period')
            ->findOneActive();

        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select('b')
            ->from('CudiBundle\Entity\Sale\Booking', 'b')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('b.person', ':person'),
                    $query->expr()->eq('b.status', '\'assigned\''),
                    $query->expr()->gte('b.bookDate', ':startDate'),
                    $period->isOpen() ? '1=1' : $query->expr()->lt('b.bookDate', ':endDate')
                )
            )
            ->setParameter(':person', $person->getId())
            ->setParameter('startDate', $period->getStartDate());

        if (!$period->isOpen())
            $query->setParameter('endDate', $period->getEndDate());

        $resultSet = $query->getQuery();

        return $resultSet;
    }

    public function findOneAssignedByArticleAndPerson(ArticleEntity $article, Person $person)
    {
        $period = $this->getEntityManager()
            ->getRepository('CudiBundle\Entity\Stock\Period')
            ->findOneActive();

        return $this->findOneAssignedByArticleAndPersonBetween($article, $person, $period->getStartDate(), $period->getEndDate());
    }

    public function findOneAssignedByArticleAndPersonInAcademicYear(ArticleEntity $article, Person $person, AcademicYear $academicYear)
    {
        return $this->findOneAssignedByArticleAndPersonBetween($article, $person, $academicYear->getStartDate(), $academicYear->getEndDate());
    }

    public function findOneAssignedByArticleAndPersonBetween(ArticleEntity $article, Person $person, DateTime $start, DateTime $end = null)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select('b')
            ->from('CudiBundle\Entity\Sale\Booking', 'b')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('b.person', ':person'),
                    $query->expr()->eq('b.article', ':article'),
                    $query->expr()->eq('b.status', '\'assigned\''),
                    $query->expr()->gte('b.bookDate', ':startDate'),
                    null === $end ? '1=1' : $query->expr()->lt('b.bookDate', ':endDate')
                )
            )
            ->setParameter(':person', $person->getId())
            ->setParameter(':article', $article->getId())
            ->setParameter('startDate', $start);

        if (null !== $end)
            $query->setParameter('endDate', $end);

        $resultSet = $query->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();

        return $resultSet;
    }

    public function findOneBookedOrAssignedByArticleAndPersonInAcademicYear(ArticleEntity $article, Person $person, AcademicYear $academicYear)
    {
        return $this->findOneBookedOrAssignedByArticleAndPersonBetween($article, $person, $academicYear->getStartDate(), $academicYear->getEndDate());
    }

    public function findOneBookedOrAssignedByArticleAndPersonBetween(ArticleEntity $article, Person $person, DateTime $start, DateTime $end = null)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select('b')
            ->from('CudiBundle\Entity\Sale\Booking', 'b')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('b.person', ':person'),
                    $query->expr()->eq('b.article', ':article'),
                    $query->expr()->orX(
                        $query->expr()->eq('b.status', '\'assigned\''),
                        $query->expr()->eq('b.status', '\'booked\'')
                    ),
                    $query->expr()->gte('b.bookDate', ':startDate'),
                    null === $end ? '1=1' : $query->expr()->lt('b.bookDate', ':endDate')
                )
            )
            ->setParameter(':person', $person->getId())
            ->setParameter(':article', $article->getId())
            ->setParameter('startDate', $start);

        if (null !== $end)
            $query->setParameter('endDate', $end);

        $resultSet = $query->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();

        return $resultSet;
    }

    public function findOneSoldByArticleAndPerson(ArticleEntity $article, Person $person)
    {
        $period = $this->getEntityManager()
            ->getRepository('CudiBundle\Entity\Stock\Period')
            ->findOneActive();

        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select('b')
            ->from('CudiBundle\Entity\Sale\Booking', 'b')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('b.person', ':person'),
                    $query->expr()->eq('b.article', ':article'),
                    $query->expr()->eq('b.status', '\'sold\''),
                    $query->expr()->gte('b.bookDate', ':startDate'),
                    $period->isOpen() ? '1=1' : $query->expr()->lt('b.bookDate', ':endDate')
                )
            )
            ->setParameter(':person', $person->getId())
            ->setParameter(':article', $article->getId())
            ->setParameter('startDate', $period->getStartDate());

        if (!$period->isOpen())
            $query->setParameter('endDate', $period->getEndDate());

        $resultSet = $query->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();

        return $resultSet;
    }

    public function findOneSoldOrAssignedOrBookedByArticleAndPerson(ArticleEntity $article, Person $person)
    {
        $period = $this->getEntityManager()
            ->getRepository('CudiBundle\Entity\Stock\Period')
            ->findOneActive();

        return $this->findOneSoldOrAssignedOrBookedByArticleAndPersonBetween($article, $person, $period->getStartDate(), $period->getEndDate());
    }

    public function findOneSoldOrAssignedOrBookedByArticleAndPersonInAcademicYear(ArticleEntity $article, Person $person, AcademicYear $academicYear)
    {
        return $this->findOneSoldOrAssignedOrBookedByArticleAndPersonBetween($article, $person, $academicYear->getStartDate(), $academicYear->getEndDate());
    }

    public function findOneSoldOrAssignedOrBookedByArticleAndPersonBetween(ArticleEntity $article, Person $person, DateTime $start, DateTime $end = null)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select('b')
            ->from('CudiBundle\Entity\Sale\Booking', 'b')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('b.person', ':person'),
                    $query->expr()->eq('b.article', ':article'),
                    $query->expr()->orX(
                        $query->expr()->eq('b.status', '\'sold\''),
                        $query->expr()->eq('b.status', '\'assigned\''),
                        $query->expr()->eq('b.status', '\'booked\'')
                    ),
                    $query->expr()->gte('b.bookDate', ':startDate'),
                    null === $end ? '1=1' : $query->expr()->lt('b.bookDate', ':endDate')
                )
            )
            ->setParameter('person', $person->getId())
            ->setParameter('article', $article->getId())
            ->setParameter('startDate', $start);

        if (null !== $end)
            $query->setParameter('endDate', $end);

        $resultSet = $query->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();

        return $resultSet;
    }

    public function findAllSoldOrAssignedOrBookedByArticleAndPersonInAcademicYear(ArticleEntity $article, Person $person, AcademicYear $academicYear)
    {
        return $this->findAllSoldOrAssignedOrBookedByArticleAndPersonBetween($article, $person, $academicYear->getStartDate(), $academicYear->getEndDate());
    }

    public function findAllSoldOrAssignedOrBookedByArticleAndPersonBetween(ArticleEntity $article, Person $person, DateTime $start, DateTime $end = null)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select('b')
            ->from('CudiBundle\Entity\Sale\Booking', 'b')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('b.person', ':person'),
                    $query->expr()->eq('b.article', ':article'),
                    $query->expr()->orX(
                        $query->expr()->eq('b.status', '\'sold\''),
                        $query->expr()->eq('b.status', '\'assigned\''),
                        $query->expr()->eq('b.status', '\'booked\'')
                    ),
                    $query->expr()->gte('b.bookDate', ':startDate'),
                    null === $end ? '1=1' : $query->expr()->lt('b.bookDate', ':endDate')
                )
            )
            ->setParameter('person', $person->getId())
            ->setParameter('article', $article->getId())
            ->setParameter('startDate', $start);

        if (null !== $end)
            $query->setParameter('endDate', $end);

        $resultSet = $query->getQuery()
            ->getResult();

        return $resultSet;
    }

    public function findAllSoldOrAssignedOrBookedByArticleAndPersonQuery(ArticleEntity $article, Person $person)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('b')
            ->from('CudiBundle\Entity\Sale\Booking', 'b')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('b.person', ':person'),
                    $query->expr()->eq('b.article', ':article'),
                    $query->expr()->orX(
                        $query->expr()->eq('b.status', '\'sold\''),
                        $query->expr()->eq('b.status', '\'assigned\''),
                        $query->expr()->eq('b.status', '\'booked\'')
                    )
                )
            )
            ->setParameter(':person', $person->getId())
            ->setParameter(':article', $article->getId())
            ->getQuery();

        return $resultSet;
    }

    public function findAllOpenByPersonQuery(Person $person)
    {
        $period = $this->getEntityManager()
            ->getRepository('CudiBundle\Entity\Stock\Period')
            ->findOneActive();

        if ($period === null)
            throw new Exception("There is no active stock period!");

        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select('b')
            ->from('CudiBundle\Entity\Sale\Booking', 'b')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('b.person', ':person'),
                    $query->expr()->neq('b.status', '\'sold\''),
                    $query->expr()->neq('b.status', '\'expired\''),
                    $query->expr()->neq('b.status', '\'canceled\''),
                    $query->expr()->gte('b.bookDate', ':startDate'),
                    $period->isOpen() ? '1=1' : $query->expr()->lt('b.bookDate', ':endDate')
                )
            )
            ->setParameter(':person', $person->getId())
            ->setParameter('startDate', $period->getStartDate());

        if (!$period->isOpen())
            $query->setParameter('endDate', $period->getEndDate());

        $resultSet = $query->getQuery();

        return $resultSet;
    }

    public function findAllSoldByPersonQuery(Person $person)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('b')
            ->from('CudiBundle\Entity\Sale\Booking', 'b')
            ->where($query->expr()->andX(
                    $query->expr()->eq('b.person', ':person'),
                    $query->expr()->eq('b.status', '\'sold\'')
                )
            )
            ->setParameter(':person', $person->getId())
            ->getQuery();

        return $resultSet;
    }

    public function findOneSoldByPersonAndArticle(Person $person, ArticleEntity $article)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('b')
            ->from('CudiBundle\Entity\Sale\Booking', 'b')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('b.person', ':person'),
                    $query->expr()->eq('b.article', ':article'),
                    $query->expr()->eq('b.status', '\'sold\'')
                )
            )
            ->setParameter('person', $person->getId())
            ->setParameter('article', $article->getId())
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();

        return $resultSet;
    }

    public function findOneSoldByArticleAndNumber(ArticleEntity $article, $number)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('b')
            ->from('CudiBundle\Entity\Sale\Booking', 'b')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('b.article', ':article'),
                    $query->expr()->eq('b.number', ':number'),
                    $query->expr()->eq('b.status', ':status')
                )
            )
            ->setParameter('number', $number)
            ->setParameter('status', 'sold')
            ->setParameter('article', $article->getId())
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();

        return $resultSet;
    }

    public function cancelAll(Person $person, $removeRegistrationArticles = false, $excluded = array())
    {
        if (!$removeRegistrationArticles) {
            $excluded = array_merge(
                $excluded,
                unserialize(
                    $this->getEntityManager()
                        ->getRepository('CommonBundle\Entity\General\Config')
                        ->getConfigValue('secretary.membership_article')
                ),
                unserialize(
                    $this->getEntityManager()
                        ->getRepository('CommonBundle\Entity\General\Config')
                        ->getConfigValue('cudi.registration_articles')
                )
            );
        }

        $period = $this->getEntityManager()
            ->getRepository('CudiBundle\Entity\Stock\Period')
            ->findOneActive();

        $period->setEntityManager($this->getEntityManager());

        $bookings = $this->getEntityManager()
            ->getRepository('CudiBundle\Entity\Sale\Booking')
            ->findAllBooked();

        $counter = 0;
        $idsCancelled = array();

        foreach ($bookings as $booking) {
            if (in_array($booking->getArticle()->getId(), $excluded))
                continue;
            $booking->setStatus('canceled', $this->getEntityManager());
            $idsCancelled[] = $booking->getId();
            $counter++;
        }

        $bookings = $this->getEntityManager()
            ->getRepository('CudiBundle\Entity\Sale\Booking')
            ->findAllAssigned();

        foreach ($bookings as $booking) {
            if (in_array($booking->getArticle()->getId(), $excluded))
                continue;
            $booking->setStatus('canceled', $this->getEntityManager());
            $idsCancelled[] = $booking->getId();
            $counter++;
        }

        if ($counter > 0)
            $this->getEntityManager()->persist(new LogCancellations($person, $idsCancelled));

        $this->getEntityManager()->flush();

        return $counter;
    }

    public function assignAll(Person $person, TransportInterface $mailTransport)
    {
        $period = $this->getEntityManager()
            ->getRepository('CudiBundle\Entity\Stock\Period')
            ->findOneActive();

        $period->setEntityManager($this->getEntityManager());

        $articles = $this->getEntityManager()
            ->getRepository('CudiBundle\Entity\Sale\Booking')
            ->findAllBookedArticles();

        $counter = 0;
        $idsAssigned = array();

        $persons = array();

        foreach ($articles as $article) {
            $available = $article->getStockValue() - $period->getNbAssigned($article);

            if ($available <= 0)
                continue;

            $bookings = $this->getEntityManager()
                ->getRepository('CudiBundle\Entity\Sale\Booking')
                ->findAllBookedByArticleAndPeriod($article, $period);

            foreach ($bookings as $booking) {
                if ($available <= 0)
                    break;

                $counter++;

                if ($available < $booking->getNumber()) {
                    $new = new BookingEntity(
                        $this->getEntityManager(),
                        $booking->getPerson(),
                        $booking->getArticle(),
                        'booked',
                        $booking->getNumber() - $available
                    );
                    $this->getEntityManager()->persist($new);

                    $booking->setNumber($available);
                }

                $booking->setStatus('assigned', $this->getEntityManager());
                $idsAssigned[] = $booking->getId();
                $available -= $booking->getNumber();

                if (!isset($persons[$booking->getPerson()->getId()]))
                    $persons[$booking->getPerson()->getId()] = array('person' => $booking->getPerson(), 'bookings' => array());

                $persons[$booking->getPerson()->getId()]['bookings'][] = $booking;
            }
        }

        if ($counter > 0)
            $this->getEntityManager()->persist(new LogAssignments($person, $idsAssigned));

        $this->getEntityManager()->flush();

        foreach($persons as $person)
            BookingMail::sendAssignMail($this->getEntityManager(), $mailTransport, $person['bookings'], $person['person']);

        return $counter;
    }

    public function assignAllByArticle(ArticleEntity $article, TransportInterface $mailTransport)
    {
        $period = $this->getEntityManager()
            ->getRepository('CudiBundle\Entity\Stock\Period')
            ->findOneActive();

        $period->setEntityManager($this->getEntityManager());

        $counter = 0;
        $persons = array();

        $available = $article->getStockValue() - $period->getNbAssigned($article);

        $bookings = $this->getEntityManager()
            ->getRepository('CudiBundle\Entity\Sale\Booking')
            ->findAllBookedByArticleAndPeriod($article, $period);

        foreach ($bookings as $booking) {
            if ($available <= 0)
                break;

            $counter++;

            if ($available < $booking->getNumber()) {
                $new = new BookingEntity(
                    $this->getEntityManager(),
                    $booking->getPerson(),
                    $booking->getArticle(),
                    'booked',
                    $booking->getNumber() - $available
                );
                $this->getEntityManager()->persist($new);

                $booking->setNumber($available);
            }

            $booking->setStatus('assigned', $this->getEntityManager());
            $available -= $booking->getNumber();

            if (!isset($persons[$booking->getPerson()->getId()]))
                $persons[$booking->getPerson()->getId()] = array('person' => $booking->getPerson(), 'bookings' => array());

            $persons[$booking->getPerson()->getId()]['bookings'][] = $booking;
        }

        $this->getEntityManager()->flush();

        foreach($persons as $person)
            BookingMail::sendAssignMail($this->getEntityManager(), $mailTransport, $person['bookings'], $person['person']);

        return $counter;
    }

    public function expireBookings(TransportInterface $mailTransport)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $bookings = $query->select('b')
            ->from('CudiBundle\Entity\Sale\Booking', 'b')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('b.status', '\'assigned\''),
                    $query->expr()->lt('b.expirationDate', ':now')
                )
            )
            ->setParameter('now', new DateTime())
            ->getQuery()
            ->getResult();

        $persons = array();
        foreach ($bookings as $booking) {
               $booking->setStatus('expired', $this->getEntityManager());

               if (!isset($persons[$booking->getPerson()->getId()]))
                    $persons[$booking->getPerson()->getId()] = array('person' => $booking->getPerson(), 'bookings' => array());

                $persons[$booking->getPerson()->getId()]['bookings'][] = $booking;
        }

        $this->getEntityManager()->flush();

        foreach($persons as $person)
            BookingMail::sendExpireMail($this->getEntityManager(), $mailTransport, $person['bookings'], $person['person']);

        return sizeof($bookings);
    }

    public function extendAllBookings(DateTime $date)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $bookings = $query->select('b')
            ->from('CudiBundle\Entity\Sale\Booking', 'b')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('b.status', '\'assigned\''),
                    $query->expr()->lt('b.expirationDate', ':date')
                )
            )
            ->setParameter('date', $date)
            ->getQuery()
            ->getResult();

        $extendTime = $this->getEntityManager()
            ->getRepository('CommonBundle\Entity\General\Config')
            ->getConfigValue('cudi.reservation_extend_time');

        $number = 0;
        foreach ($bookings as $booking) {
            if ($booking->getExpirationDate()) {
                $date = clone $booking->getExpirationDate();
                $booking->setExpirationDate($date->add(new DateInterval($extendTime)));
                $number++;
            }
        }

        return $number;
    }

    public function findLastAssignedByArticleQuery(ArticleEntity $article)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('b')
            ->from('CudiBundle\Entity\Sale\Booking', 'b')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('b.article', ':article'),
                    $query->expr()->eq('b.status', ':status')
                )
            )
            ->setParameter('status', 'assigned')
            ->setParameter('article', $article->getId())
            ->orderBy('b.assignmentDate', 'DESC')
            ->addOrderBy('b.bookDate', 'ASC')
            ->getQuery();

        return $resultSet;
    }

    public function findAllExpiringBetweenQuery(DateTime $start, DateTime $end)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('b')
            ->from('CudiBundle\Entity\Sale\Booking', 'b')
            ->where(
                $query->expr()->andX(
                    $query->expr()->gte('b.expirationDate', ':start'),
                    $query->expr()->lte('b.expirationDate', ':end'),
                    $query->expr()->eq('b.status', ':status')
                )
            )
            ->setParameter('status', 'assigned')
            ->setParameter('start', $start)
            ->setParameter('end', $end)
            ->getQuery();

        return $resultSet;
    }
}
