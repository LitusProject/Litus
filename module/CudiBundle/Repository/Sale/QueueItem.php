<?php
/**
 * Litus is a project by a group of students from the KU Leuven. The goal is to create
 * various applications to support the IT needs of student unions.
 *
 * @author Niels Avonds <niels.avonds@litus.cc>
 * @author Karsten Daemen <karsten.daemen@litus.cc>
 * @author Koen Certyn <koen.certyn@litus.cc>
 * @author Bram Gotink <bram.gotink@litus.cc>
 * @author Dario Incalza <dario.incalza@litus.cc>
 * @author Pieter Maene <pieter.maene@litus.cc>
 * @author Kristof MariÃ«n <kristof.marien@litus.cc>
 * @author Lars Vierbergen <lars.vierbergen@litus.cc>
 * @author Daan Wendelen <daan.wendelen@litus.cc>
 *
 * @license http://litus.cc/LICENSE
 */

namespace CudiBundle\Repository\Sale;

use CommonBundle\Entity\User\Person,
    CudiBundle\Entity\Sale\Session as SessionEntity,
    CommonBundle\Component\Doctrine\ORM\EntityRepository;

/**
 * QueueItem
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QueueItem extends EntityRepository
{
    public function getNextQueueNumber(SessionEntity $session)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('MAX(i.queueNumber)')
            ->from('CudiBundle\Entity\Sale\QueueItem', 'i')
            ->where(
                $query->expr()->eq('i.session', ':session')
            )
            ->setParameter('session', $session->getId())
            ->getQuery()
            ->getSingleScalarResult();

        if ($resultSet)
            return $resultSet + 1;

        return 1;
    }

    public function findOneByPersonNotSold(SessionEntity $session, Person $person)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('i')
            ->from('CudiBundle\Entity\Sale\QueueItem', 'i')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('i.session', ':session'),
                    $query->expr()->eq('i.person', ':person'),
                    $query->expr()->neq('i.status', ':sold')
                )
            )
            ->setParameter('session', $session->getId())
            ->setParameter('person', $person->getId())
            ->setParameter('sold', 'sold')
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();

        return $resultSet;
    }

    public function findAllByStatusQuery(SessionEntity $session, $status)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('i')
            ->from('CudiBundle\Entity\Sale\QueueItem', 'i')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('i.session', ':session'),
                    $query->expr()->eq('i.status', ':status')
                )
            )
            ->setParameter('session', $session->getId())
            ->setParameter('status', $status)
            ->orderBy('i.queueNumber', 'ASC')
            ->getQuery();

        return $resultSet;
    }

    public function findAllBySessionQuery(SessionEntity $session)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('i')
            ->from('CudiBundle\Entity\Sale\QueueItem', 'i')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('i.session', ':session'),
                    $query->expr()->neq('i.status', ':sold'),
                    $query->expr()->neq('i.status', ':cancelled')
                )
            )
            ->setParameter('session', $session->getId())
            ->setParameter('sold', 'sold')
            ->setParameter('cancelled', 'cancelled')
            ->orderBy('i.queueNumber', 'ASC')
            ->getQuery();

        return $resultSet;
    }

    public function findNbBySession(SessionEntity $session)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('COUNT(i)')
            ->from('CudiBundle\Entity\Sale\QueueItem', 'i')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('i.session', ':session'),
                    $query->expr()->neq('i.status', ':sold'),
                    $query->expr()->neq('i.status', ':cancelled'),
                    $query->expr()->neq('i.status', ':hold')
                )
            )
            ->setParameter('session', $session->getId())
            ->setParameter('sold', 'sold')
            ->setParameter('cancelled', 'cancelled')
            ->setParameter('hold', 'hold')
            ->getQuery()
            ->getSingleScalarResult();

        return $resultSet;
    }

    public function findOneSoldByPersonAndSession(Person $person, SessionEntity $session)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('i')
            ->from('CudiBundle\Entity\Sale\QueueItem', 'i')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('i.person', ':person'),
                    $query->expr()->eq('i.session', ':session'),
                    $query->expr()->eq('i.status', ':sold')
                )
            )
            ->setParameter('person', $person)
            ->setParameter('session', $session)
            ->setParameter('sold', 'sold')
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();

        return $resultSet;
    }
}
