<?php

namespace CudiBundle\Repository\Sale\Article;

use CudiBundle\Entity\Sale\Article;

/**
 * Barcode
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Barcode extends \CommonBundle\Component\Doctrine\ORM\EntityRepository
{
    /**
     * @param  integer $barcode
     * @return \CudiBundle\Entity\Sale\Article\Barcode|null
     */
    public function findOneByBarcode($barcode)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('b')
            ->from('CudiBundle\Entity\Sale\Article\Barcode', 'b')
            ->innerJoin('b.article', 'a')
            ->innerJoin('a.mainArticle', 'm')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('b.barcode', ':barcode'),
                    $query->expr()->eq('a.isHistory', 'false'),
                    $query->expr()->eq('m.isHistory', 'false'),
                    $query->expr()->eq('m.isProf', 'false')
                )
            )
            ->setParameter('barcode', $barcode)
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param  Article $article
     * @return \Doctrine\ORM\Query
     */
    public function findAllByArticleQuery(Article $article)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('b')
            ->from('CudiBundle\Entity\Sale\Article\Barcode', 'b')
            ->innerJoin('b.article', 'a')
            ->innerJoin('a.mainArticle', 'm')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('b.article', ':article'),
                    $query->expr()->eq('a.isHistory', 'false'),
                    $query->expr()->eq('m.isHistory', 'false'),
                    $query->expr()->eq('m.isProf', 'false')
                )
            )
            ->setParameter('article', $article)
            ->getQuery();
    }
}
