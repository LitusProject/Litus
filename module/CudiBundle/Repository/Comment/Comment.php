<?php

namespace CudiBundle\Repository\Comment;

use CudiBundle\Entity\Article,
    CommonBundle\Component\Doctrine\ORM\EntityRepository;

/**
 * Comment
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Comment extends EntityRepository
{
    public function findAllByArticle(Article $article)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('m')
            ->from('CudiBundle\Entity\Comment\Mapping', 'm')
            ->where(
                $query->expr()->eq('m.article', ':article')
            )
            ->setParameter('article', $article->getId())
            ->getQuery()
            ->getResult();

        $comments = array();
        foreach($resultSet as $mapping)
            $comments[] = $mapping->getComment();

        return $comments;
    }

    public function findAllExternalByArticle(Article $article)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('m')
            ->from('CudiBundle\Entity\Comment\Mapping', 'm')
            ->innerJoin('m.comment', 'c')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('m.article', ':article'),
                    $query->expr()->eq('c.type', '\'external\'')
                )
            )
            ->setParameter('article', $article->getId())
            ->getQuery()
            ->getResult();

        $comments = array();
        foreach($resultSet as $mapping)
            $comments[] = $mapping->getComment();

        return $comments;
    }

    public function findAllSiteByArticle(Article $article)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('m')
            ->from('CudiBundle\Entity\Comment\Mapping', 'm')
            ->innerJoin('m.comment', 'c')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('m.article', ':article'),
                    $query->expr()->eq('c.type', '\'site\'')
                )
            )
            ->setParameter('article', $article->getId())
            ->getQuery()
            ->getResult();

        $comments = array();
        foreach($resultSet as $mapping)
            $comments[] = $mapping->getComment();

        return $comments;
    }
}
