<?php
/**
 * Litus is a project by a group of students from the KU Leuven. The goal is to create
 * various applications to support the IT needs of student unions.
 *
 * @author Niels Avonds <niels.avonds@litus.cc>
 * @author Karsten Daemen <karsten.daemen@litus.cc>
 * @author Koen Certyn <koen.certyn@litus.cc>
 * @author Bram Gotink <bram.gotink@litus.cc>
 * @author Dario Incalza <dario.incalza@litus.cc>
 * @author Pieter Maene <pieter.maene@litus.cc>
 * @author Kristof MariÃ«n <kristof.marien@litus.cc>
 * @author Lars Vierbergen <lars.vierbergen@litus.cc>
 * @author Daan Wendelen <daan.wendelen@litus.cc>
 *
 * @license http://litus.cc/LICENSE
 */

namespace CudiBundle\Repository\Comment;

use CudiBundle\Entity\Article,
    CommonBundle\Component\Doctrine\ORM\EntityRepository;

/**
 * Comment
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Comment extends EntityRepository
{
    public function findAllByArticleQuery(Article $article)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('c')
            ->from('CudiBundle\Entity\Comment\Mapping', 'm')
            ->from('CudiBundle\Entity\Comment\Comment', 'c')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('m.comment', 'c'),
                    $query->expr()->eq('m.article', ':article')
                )
            )
            ->setParameter('article', $article)
            ->getQuery();

        return $resultSet;
    }

    public function findAllExternalByArticleQuery(Article $article)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('c')
            ->from('CudiBundle\Entity\Comment\Mapping', 'm')
            ->from('CudiBundle\Entity\Comment\Comment', 'c')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('m.comment', 'c'),
                    $query->expr()->eq('m.article', ':article'),
                    $query->expr()->eq('c.type', '\'external\'')
                )
            )
            ->setParameter('article', $article)
            ->getQuery();

        return $resultSet;
    }

    public function findAllSiteByArticleQuery(Article $article)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('c')
            ->from('CudiBundle\Entity\Comment\Mapping', 'm')
            ->from('CudiBundle\Entity\Comment\Comment', 'c')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('m.comment', 'c'),
                    $query->expr()->eq('m.article', ':article'),
                    $query->expr()->eq('c.type', '\'site\'')
                )
            )
            ->setParameter('article', $article)
            ->getQuery();

        return $resultSet;
    }
}
