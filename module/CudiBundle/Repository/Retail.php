<?php

namespace CudiBundle\Repository;

/**
 * Retail
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Retail extends \CommonBundle\Component\Doctrine\ORM\EntityRepository
{
    /**
     * @return \Doctrine\ORM\Query
     */
    public function findAllQuery()
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('a')
            ->from('CudiBundle\Entity\Retail', 'a')
            ->innerjoin('a.article', 'art')
            ->orderBy('art.title', 'ASC')
            ->getQuery();
    }

    /**
     * @param  string $title
     * @return \Doctrine\ORM\Query
     */
    public function findAllByTitleQuery($title)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('a')
            ->from('CudiBundle\Entity\Retail', 'a')
            ->innerjoin('a.article', 'art')
            ->where(
                $query->expr()->like($query->expr()->lower('art.title'), ':title')
            )
            ->setParameter('title', '%' . strtolower($title) . '%')
            ->orderBy('art.title', 'ASC')
            ->getQuery();
    }

    /**
     * @return \Doctrine\ORM\Query
     */
    public function findAllByArticle($id)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('a')
            ->from('CudiBundle\Entity\Retail', 'a')
            ->innerjoin('a.article', 'art')
            ->where(
                $query->expr()->eq('art.id', ':id')
            )
            ->setParameter('id', $id)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param  string $authorId
     * @return \Doctrine\ORM\Query
     */
    public function findAllByOwnerQuery($authorId)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('a')
            ->from('CudiBundle\Entity\Retail', 'a')
            ->innerjoin('a.owner', 'o')
            ->innerjoin('a.article', 'art')
            ->where(
                $query->expr()->eq('o.id', ':authorId')
            )
            ->setParameter('authorId', $authorId)
            ->orderBy('art.title', 'ASC')
            ->getQuery();
    }
}
