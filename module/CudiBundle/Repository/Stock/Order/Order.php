<?php

namespace CudiBundle\Repository\Stock\Order;

use CommonBundle\Entity\General\AcademicYear,
    CommonBundle\Entity\User\Person,
    CudiBundle\Entity\Sale\Article,
    CudiBundle\Entity\Stock\Order\Item as ItemEntity,
    CudiBundle\Entity\Stock\Order\Order as OrderEntity,
    CudiBundle\Entity\Stock\Period,
    CudiBundle\Entity\Supplier,
    Doctrine\ORM\EntityRepository,
    Doctrine\ORM\Query\Expr\OrderBy;

/**
 * Order
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Order extends EntityRepository
{
    public function findAllBySupplierAndPeriod(Supplier $supplier, Period $period)
    {
        $query = $this->_em->createQueryBuilder();
        $query->select('o')
            ->from('CudiBundle\Entity\Stock\Order\Order', 'o')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('o.supplier', ':supplier'),
                    $query->expr()->gt('o.dateCreated', ':startDate'),
                    $period->isOpen() ? '1=1' : $query->expr()->lt('o.dateCreated', ':endDate')
                )
            )
            ->setParameter('supplier', $supplier->getId())
            ->setParameter('startDate', $period->getStartDate())
            ->orderBy('o.dateCreated', 'DESC');

        if (!$period->isOpen())
            $query->setParameter('endDate', $period->getEndDate());

        $resultSet = $query->getQuery()
            ->getResult();

        return $resultSet;
    }

    public function findOneOpenBySupplier(Supplier $supplier)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('o')
            ->from('CudiBundle\Entity\Stock\Order\Order', 'o')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('o.supplier', ':supplier'),
                    $query->expr()->isNull('o.dateOrdered')
                )
            )
            ->setParameter('supplier', $supplier->getId())
            ->setMaxResults(1)
            ->getQuery()
            ->getResult();

        if (isset($resultSet[0]))
            return $resultSet[0];

        return null;
    }

    public function addNumberByArticle(Article $article, $number, Person $person)
    {
        $item = $this->_em
            ->getRepository('CudiBundle\Entity\Stock\Order\Item')
            ->findOneOpenByArticle($article);

        if (isset($item)) {
            $item->setNumber($item->getNumber() + $number);
        } else {
            $order = $this->findOneOpenBySupplier($article->getSupplier());
            if (null === $order) {
                $order = new OrderEntity($article->getSupplier(), $person);
                $this->_em->persist($order);
            }

            $item = new ItemEntity($article, $order, $number);
            $this->_em->persist($item);
        }

        return $item;
    }

    public function findAllPaginator($currentPage, $itemsPerPage, AcademicYear $academicYear)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->from('CudiBundle\Entity\Stock\Order\Order', 'o')
            ->where(
                $query->expr()->andX(
                    $query->expr()->isNotNull('o.dateOrdered'),
                    $query->expr()->gt('o.dateOrdered', ':start'),
                    $query->expr()->lt('o.dateOrdered', ':end')
                )
            )
            ->setParameter('start', $academicYear->getStartDate())
            ->setParameter('end', $academicYear->getEndDate());

        return $this->_findAllPaginator($currentPage, $itemsPerPage, $query, new OrderBy('o.dateOrdered', 'DESC'));
    }

    private function _findAllPaginator($currentPage, $itemsPerPage, $basicQuery, $order)
    {
        $currentPage = $currentPage == 0 ? $currentPage = 1 : $currentPage;

        $query = clone $basicQuery;
        $resultSet = $query->select('o')
            ->setMaxResults($itemsPerPage)
            ->setFirstResult(($currentPage - 1) * $itemsPerPage)
            ->orderBy($order)
            ->getQuery()
            ->getResult();

        $query = clone $basicQuery;
        $totalNumber = $query->select('COUNT(o.id)')
            ->getQuery()
            ->getSingleScalarResult();

        return array($resultSet, $totalNumber);
    }

    public function findAllBySupplierPaginator($supplier, $currentPage, $itemsPerPage, AcademicYear $academicYear)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->from('CudiBundle\Entity\Stock\Order\Order', 'o')
            ->innerJoin('o.supplier', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->like($query->expr()->lower('s.name'), ':supplier'),
                    $query->expr()->isNotNull('o.dateOrdered'),
                    $query->expr()->gt('o.dateOrdered', ':start'),
                    $query->expr()->lt('o.dateOrdered', ':end')
                )
            )
            ->setParameter('supplier', '%'.strtolower($supplier).'%')
            ->setParameter('start', $academicYear->getStartDate())
            ->setParameter('end', $academicYear->getEndDate());

        return $this->_findAllPaginator($currentPage, $itemsPerPage, $query, new OrderBy('o.dateOrdered', 'DESC'));
    }
}
