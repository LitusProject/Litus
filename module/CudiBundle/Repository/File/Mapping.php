<?php
/**
 * Litus is a project by a group of students from the KU Leuven. The goal is to create
 * various applications to support the IT needs of student unions.
 *
 * @author Niels Avonds <niels.avonds@litus.cc>
 * @author Karsten Daemen <karsten.daemen@litus.cc>
 * @author Koen Certyn <koen.certyn@litus.cc>
 * @author Bram Gotink <bram.gotink@litus.cc>
 * @author Dario Incalza <dario.incalza@litus.cc>
 * @author Pieter Maene <pieter.maene@litus.cc>
 * @author Kristof MariÃ«n <kristof.marien@litus.cc>
 * @author Lars Vierbergen <lars.vierbergen@litus.cc>
 * @author Daan Wendelen <daan.wendelen@litus.cc>
 *
 * @license http://litus.cc/LICENSE
 */

namespace CudiBundle\Repository\File;

use CommonBundle\Component\Doctrine\ORM\EntityRepository,
    CudiBundle\Entity\Article,
    CudiBundle\Entity\File\File as FileEntity;

/**
 * Mapping
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Mapping extends EntityRepository
{
    public function findOneByArticleAndFile(Article $article, FileEntity $file)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('m')
            ->from('CudiBundle\Entity\File\Mapping', 'm')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('m.file', ':file'),
                    $query->expr()->eq('m.article', ':article')
                )
            )
            ->setParameter('article', $article)
            ->setParameter('file', $file)
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();

        return $resultSet;
    }

    public function findAllPrintableByArticleQuery(Article $article, $isProf = false)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('m')
            ->from('CudiBundle\Entity\File\Mapping', 'm')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('m.removed', 'false'),
                    $query->expr()->eq('m.printable', 'true'),
                    $query->expr()->eq('m.article', ':article'),
                    $isProf ? '1=1' : $query->expr()->eq('m.isProf', 'false')
                )
            )
            ->setParameter('article', $article)
            ->getQuery();

        return $resultSet;
    }

    public function findAllByArticleQuery(Article $article, $isProf = false)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('m')
            ->from('CudiBundle\Entity\File\Mapping', 'm')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('m.removed', 'false'),
                    $query->expr()->eq('m.article', ':article'),
                    $isProf ? '1=1' : $query->expr()->eq('m.isProf', 'false')
                )
            )
            ->setParameter('article', $article)
            ->getQuery();

        return $resultSet;
    }
}
