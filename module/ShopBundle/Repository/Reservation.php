<?php

namespace ShopBundle\Repository;

use DateTime;

/**
 * Reservation
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Reservation extends \CommonBundle\Component\Doctrine\ORM\EntityRepository
{
    /**
     * @param $person
     * @return array
     */
    public function getAllCurrentReservationsByPerson($person)
    {
        $query = $this->getEntityManager()->createQueryBuilder();

        return $query->select('r')
            ->from('ShopBundle\Entity\Reservation', 'r')
            ->join('r.salesSession', 'ss')
            ->where(
                $query->expr()->andX(
                    $query->expr()->gt('ss.endDate', ':now'),
                    $query->expr()->eq('r.person', ':person')
                )
            )
            ->orderBy('ss.startDate', 'ASC')
            ->setParameter('now', new DateTime())
            ->setParameter('person', $person)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param $person
     * @return \Doctrine\ORM\Query
     */
    public function getAllReservationsByPersonAndSalesSessionQuery($name, $salesSession)
    {
        $query = $this->getEntityManager()->createQueryBuilder();

        return $query->select('r')
            ->from('ShopBundle\Entity\Reservation', 'r')
            ->innerJoin('r.person', 'p')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('r.salesSession', ':salesSession'),
                    $query->expr()->orX(
                        $query->expr()->like(
                            $query->expr()->concat(
                                $query->expr()->lower($query->expr()->concat('p.firstName', "' '")),
                                $query->expr()->lower('p.lastName')
                            ),
                            ':name'
                        ),
                        $query->expr()->like(
                            $query->expr()->concat(
                                $query->expr()->lower($query->expr()->concat('p.lastName', "' '")),
                                $query->expr()->lower('p.firstName')
                            ),
                            ':name'
                        )
                    )
                )
            )
            ->setParameter('salesSession', $salesSession)
            ->setParameter('name', '%' . strtolower($name) . '%')
            ->getQuery();
    }

    /**
     * @param  \ShopBundle\Entity\Session $salesSession
     * @return \Doctrine\ORM\Query
     */
    public function findBySalesSessionQuery($salesSession)
    {
        $query = $this->getEntityManager()->createQueryBuilder();

        return $query->select('r')
            ->from('ShopBundle\Entity\Reservation', 'r')
            ->where(
                $query->expr()->eq('r.salesSession', ':salesSession')
            )
            ->orderBy('r.person', 'ASC')
            ->setParameter('salesSession', $salesSession)
            ->getQuery();
    }

    /**
     * @param  \ShopBundle\Entity\Session $salesSession
     * @return \Doctrine\ORM\Query
     */
    public function getTotalByProductBySalesQuery($salesSession)
    {
        $query = $this->getEntityManager()->createQueryBuilder();

        return $query->select('p')
            ->addSelect('SUM(r.amount)')
            ->from('ShopBundle\Entity\Product', 'p')
            ->join('ShopBundle\Entity\Reservation', 'r', 'WITH', 'r.product=p.id')
            ->where(
                $query->expr()->eq('r.salesSession', ':salesSession')
            )
            ->groupBy('p.id')
            ->setParameter('salesSession', $salesSession)
            ->getQuery();
    }

    /**
     * @param  \CommonBundle\Entity\User\Person $person
     * @return integer
     */
    public function getNoShowSessionCount($person)
    {
        $query = $this->getEntityManager()->createQueryBuilder();

        return $query->select($query->expr()->countDistinct('r.salesSession'))
            ->from('ShopBundle\Entity\Reservation', 'r')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('r.person', ':person'),
                    $query->expr()->eq('r.noShow', ':true')
                )
            )
            ->setParameter('person', $person)
            ->setParameter('true', true)
            ->getQuery()
            ->getResult()[0][1];
    }
}
