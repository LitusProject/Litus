<?php

namespace ShopBundle\Repository;

use DateTime;

/**
 * Session
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Session extends \CommonBundle\Component\Doctrine\ORM\EntityRepository
{
    /**
     * @return \Doctrine\ORM\Query
     */
    public function findAllFutureQuery()
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('s')
            ->from('ShopBundle\Entity\Session', 's')
            ->where(
                $query->expr()->gte('s.endDate', ':now')
            )
            ->orderBy('s.startDate', 'ASC')
            ->setParameter('now', new DateTime())
            ->getQuery();
    }

    /**
     * @return \Doctrine\ORM\Query
     */
    public function findAllOldQuery()
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('s')
            ->from('ShopBundle\Entity\Session', 's')
            ->where(
                $query->expr()->lt('s.endDate', ':now')
            )
            ->orderBy('s.startDate', 'ASC')
            ->setParameter('now', new DateTime())
            ->getQuery();
    }

    /**
     * @param  string $remarks
     * @return \Doctrine\ORM\Query
     */
    public function findAllFutureByRemarksQuery($remarks)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('s')
            ->from('ShopBundle\Entity\Session', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->like($query->expr()->lower('s.remarks'), ':remarks'),
                    $query->expr()->gte('s.startDate', ':now')
                )
            )
            ->orderBy('s.startDate', 'ASC')
            ->setParameter('remarks', '%' . strtolower($remarks) . '%')
            ->setParameter('now', new DateTime())
            ->getQuery();
    }

    /**
     * @param  string $remarks
     * @return \Doctrine\ORM\Query
     */
    public function findAllOldByRemarksQuery($remarks)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('s')
            ->from('ShopBundle\Entity\Session', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->like($query->expr()->lower('s.remarks'), ':remarks'),
                    $query->expr()->lt('s.startDate', ':now')
                )
            )
            ->orderBy('s.startDate', 'ASC')
            ->setParameter('remarks', '%' . strtolower($remarks) . '%')
            ->setParameter('now', new DateTime())
            ->getQuery();
    }

    public function findAllReservationsPossibleInterval($startDate, $endDate)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('s')
            ->from('ShopBundle\Entity\Session', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('s.reservationsPossible', ':reservations_possible'),
                    $query->expr()->lt('s.startDate', ':end_date'),
                    $query->expr()->gt('s.startDate', ':start_date'),
                    $query->expr()->gt('s.finalReservationDate', ':now')
                )
            )
            ->orderBy('s.startDate', 'ASC')
            ->setParameter('reservations_possible', true)
            ->setParameter('start_date', $startDate)
            ->setParameter('end_date', $endDate)
            ->setParameter('now', new DateTime())
            ->getQuery()
            ->getResult();
    }
}
