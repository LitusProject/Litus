<?php

namespace ShiftBundle\Repository\Shifts;

use CommonBundle\Entity\General\AcademicYear,
    Doctrine\ORM\EntityRepository,
	ShiftBundle\Entity\Shift;

/**
 * Volunteer
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Volunteer extends EntityRepository
{
    public function findOneById($id)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('v')
            ->from('ShiftBundle\Entity\Shifts\Volunteer', 'v')
            ->where(
                $query->expr()->eq('v.id', ':id')
            )
            ->setParameter('id', $id)
            ->getQuery()
            ->getResult();

        if (isset($resultSet[0]))
            return $resultSet[0];
        return null;
    }

    public function findAllByCountMinimum(AcademicYear $academicYear, $minimum)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('p.id', 'COUNT(p.id) shiftCount')
            ->from('ShiftBundle\Entity\Shifts\Volunteer', 'v')
            ->innerJoin('v.person', 'p')
            ->where(
                $query->expr()->andX(
                    $query->expr()->gt('v.signupTime', ':startAcademicYear'),
                    $query->expr()->lt('v.signupTime', ':endAcademicYear')
                )
            )
            ->groupBy('p.id')
            ->orderBy('shiftCount')
            ->having(
                $query->expr()->gte('COUNT(p.id)', ':min')
            )
            ->setParameter('startAcademicYear', $academicYear->getUniversityStartDate())
            ->setParameter('endAcademicYear', $academicYear->getUniversityEndDate())
            ->setParameter('min', $minimum)
            ->getQuery()
            ->getResult();

        return $resultSet;
    }

    public function findAllByCountLimits(AcademicYear $academicYear, $minimum, $maximum)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('p.id', 'COUNT(p.id) shiftCount')
            ->from('ShiftBundle\Entity\Shifts\Volunteer', 'v')
            ->innerJoin('v.person', 'p')
            ->where(
                $query->expr()->andX(
                    $query->expr()->gt('v.signupTime', ':startAcademicYear'),
                    $query->expr()->lt('v.signupTime', ':endAcademicYear')
                )
            )
            ->groupBy('p.id')
            ->orderBy('shiftCount')
            ->having(
                $query->expr()->andX(
                    $query->expr()->gte('COUNT(p.id)', ':min'),
                    $query->expr()->lt('COUNT(p.id)', ':max')
                )
            )
            ->setParameter('startAcademicYear', $academicYear->getUniversityStartDate())
            ->setParameter('endAcademicYear', $academicYear->getUniversityEndDate())
            ->setParameter('min', $minimum)
            ->setParameter('max', $maximum)
            ->getQuery()
            ->getResult();

        return $resultSet;
    }

    public function findAllByAcademicYear(AcademicYear $academicYear)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('v')
            ->from('ShiftBundle\Entity\Shifts\Volunteer', 'v')
            ->where(
                $query->expr()->andX(
                    $query->expr()->gt('v.signupTime', ':startAcademicYear'),
                    $query->expr()->lt('v.signupTime', ':endAcademicYear')
                )
            )
            ->setParameter('startAcademicYear', $academicYear->getUniversityStartDate())
            ->setParameter('endAcademicYear', $academicYear->getUniversityEndDate())
            ->getQuery()
            ->getResult();

        return $resultSet;
    }
}
