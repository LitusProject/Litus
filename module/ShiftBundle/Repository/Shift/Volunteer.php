<?php
/**
 * Litus is a project by a group of students from the KU Leuven. The goal is to create
 * various applications to support the IT needs of student unions.
 *
 * @author Niels Avonds <niels.avonds@litus.cc>
 * @author Karsten Daemen <karsten.daemen@litus.cc>
 * @author Koen Certyn <koen.certyn@litus.cc>
 * @author Bram Gotink <bram.gotink@litus.cc>
 * @author Dario Incalza <dario.incalza@litus.cc>
 * @author Pieter Maene <pieter.maene@litus.cc>
 * @author Kristof MariÃ«n <kristof.marien@litus.cc>
 * @author Lars Vierbergen <lars.vierbergen@litus.cc>
 * @author Daan Wendelen <daan.wendelen@litus.cc>
 *
 * @license http://litus.cc/LICENSE
 */

namespace ShiftBundle\Repository\Shift;

use CommonBundle\Component\Doctrine\ORM\EntityRepository,
    CommonBundle\Entity\General\AcademicYear,
    DateTime,
    ShiftBundle\Entity\Shift;

/**
 * Volunteer
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Volunteer extends EntityRepository
{
    public function findAllByCountMinimumQuery(AcademicYear $academicYear, $minimum)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('p.id', 'COUNT(p.id) shiftCount')
            ->from('ShiftBundle\Entity\Shift', 's')
            ->innerJoin('s.volunteers', 'v')
            ->innerJoin('v.person', 'p')
            ->where(
                $query->expr()->andX(
                    $query->expr()->gt('v.signupTime', ':startAcademicYear'),
                    $query->expr()->lt('v.signupTime', ':endAcademicYear'),
                    $query->expr()->lte('s.endDate', ':now')
                )
            )
            ->groupBy('p.id')
            ->orderBy('shiftCount')
            ->having(
                $query->expr()->gte('COUNT(p.id)', ':min')
            )
            ->setParameter('startAcademicYear', $academicYear->getStartDate())
            ->setParameter('endAcademicYear', $academicYear->getEndDate())
            ->setParameter('now', new DateTime())
            ->setParameter('min', $minimum)
            ->getQuery();

        return $resultSet;
    }

    public function findAllByCountLimitsQuery(AcademicYear $academicYear, $minimum, $maximum)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('p.id', 'COUNT(p.id) shiftCount')
            ->from('ShiftBundle\Entity\Shift', 's')
            ->innerJoin('s.volunteers', 'v')
            ->innerJoin('v.person', 'p')
            ->where(
                $query->expr()->andX(
                    $query->expr()->gt('v.signupTime', ':startAcademicYear'),
                    $query->expr()->lt('v.signupTime', ':endAcademicYear'),
                    $query->expr()->lte('s.endDate', ':now')
                )
            )
            ->groupBy('p.id')
            ->orderBy('shiftCount')
            ->having(
                $query->expr()->andX(
                    $query->expr()->gte('COUNT(p.id)', ':min'),
                    $query->expr()->lt('COUNT(p.id)', ':max')
                )
            )
            ->setParameter('startAcademicYear', $academicYear->getStartDate())
            ->setParameter('endAcademicYear', $academicYear->getEndDate())
            ->setParameter('now', new DateTime())
            ->setParameter('min', $minimum)
            ->setParameter('max', $maximum)
            ->getQuery();

        return $resultSet;
    }

    public function findAllByAcademicYearQuery(AcademicYear $academicYear)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('v')
            ->from('ShiftBundle\Entity\Shift\Volunteer', 'v')
            ->where(
                $query->expr()->andX(
                    $query->expr()->gt('v.signupTime', ':startAcademicYear'),
                    $query->expr()->lt('v.signupTime', ':endAcademicYear')
                )
            )
            ->setParameter('startAcademicYear', $academicYear->getUniversityStartDate())
            ->setParameter('endAcademicYear', $academicYear->getUniversityEndDate())
            ->getQuery();

        return $resultSet;
    }
}
