<?php

namespace ShiftBundle\Repository\Shift;

use CommonBundle\Entity\General\AcademicYear;
use DateTime;

/**
 * Registered
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Registered extends \CommonBundle\Component\Doctrine\ORM\EntityRepository
{
    /**
     * @param  AcademicYear $academicYear
     * @param  integer      $minimum
     * @return \Doctrine\ORM\Query
     */
    public function findAllByCountMinimumQuery(AcademicYear $academicYear, $minimum)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('p.id', 'COUNT(p.id) shiftCount')
            ->from('ShiftBundle\Entity\RegistrationShift', 's')
            ->innerJoin('s.registered', 'r')
            ->innerJoin('r.person', 'p')
            ->where(
                $query->expr()->andX(
                    $query->expr()->gt('r.signupTime', ':startAcademicYear'),
                    $query->expr()->lt('r.signupTime', ':endAcademicYear'),
                    $query->expr()->lte('s.endDate', ':now')
                )
            )
            ->groupBy('p.id')
            ->orderBy('shiftCount')
            ->having(
                $query->expr()->gte('COUNT(p.id)', ':min')
            )
            ->setParameter('startAcademicYear', $academicYear->getStartDate())
            ->setParameter('endAcademicYear', $academicYear->getEndDate())
            ->setParameter('now', new DateTime())
            ->setParameter('min', $minimum)
            ->getQuery();
    }

    /**
     * @param  AcademicYear $academicYear
     * @param  integer      $minimum
     * @param  integer      $maximum
     * @return \Doctrine\ORM\Query
     */
    public function findAllByCountLimitsQuery(AcademicYear $academicYear, $minimum, $maximum)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('p.id', 'COUNT(p.id) shiftCount')
            ->from('ShiftBundle\Entity\Shift', 's')
            ->innerJoin('s.registered', 'r')
            ->innerJoin('r.person', 'p')
            ->where(
                $query->expr()->andX(
                    $query->expr()->gt('r.signupTime', ':startAcademicYear'),
                    $query->expr()->lt('r.signupTime', ':endAcademicYear'),
                    $query->expr()->lte('s.endDate', ':now')
                )
            )
            ->groupBy('p.id')
            ->orderBy('shiftCount')
            ->having(
                $query->expr()->andX(
                    $query->expr()->gte('COUNT(p.id)', ':min'),
                    $query->expr()->lt('COUNT(p.id)', ':max')
                )
            )
            ->setParameter('startAcademicYear', $academicYear->getStartDate())
            ->setParameter('endAcademicYear', $academicYear->getEndDate())
            ->setParameter('now', new DateTime())
            ->setParameter('min', $minimum)
            ->setParameter('max', $maximum)
            ->getQuery();
    }

    /**
     * @param  AcademicYear $academicYear
     * @return \Doctrine\ORM\Query
     */
    public function findAllByAcademicYearQuery(AcademicYear $academicYear)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('r')
            ->from('ShiftBundle\Entity\Shift\Volunteer', 'r')
            ->where(
                $query->expr()->andX(
                    $query->expr()->gt('r.signupTime', ':startAcademicYear'),
                    $query->expr()->lt('r.signupTime', ':endAcademicYear')
                )
            )
            ->setParameter('startAcademicYear', $academicYear->getUniversityStartDate())
            ->setParameter('endAcademicYear', $academicYear->getUniversityEndDate())
            ->getQuery();
    }

    /**
     * @param  AcademicYear $academicYear
     * @return \Doctrine\ORM\Query
     */
    public function findAllNamesByAcademicYearQuery(AcademicYear $academicYear)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('p.firstName', 'p.lastName')
            ->from('ShiftBundle\Entity\Shift', 's')
            ->innerJoin('s.registered', 'r')
            ->innerJoin('r.person', 'p')
            ->where(
                $query->expr()->andX(
                    $query->expr()->gt('r.signupTime', ':startAcademicYear'),
                    $query->expr()->lt('r.signupTime', ':endAcademicYear'),
                    $query->expr()->lte('s.endDate', ':now')
                )
            )
            ->distinct()
            ->orderBy('p.firstName')
            ->setParameter('startAcademicYear', $academicYear->getStartDate())
            ->setParameter('endAcademicYear', $academicYear->getEndDate())
            ->setParameter('now', new DateTime())
            ->getQuery();
    }

    /**
     * @param  AcademicYear $academicYear
     * @param  string       $countInBlocksOfTwoHours | Either 'f' or not
     * @return \Doctrine\ORM\Query
     */
    public function findAllCountsByAcademicYearQuery(AcademicYear $academicYear, $hoursPerBlock, $points)
    {
        $query = $this->getEntityManager()->createQueryBuilder();

        if ($points) {
            $select = 'SUM(s.points) resultCount';
        } else {
            if ($hoursPerBlock > 0) {
                $select = 'SUM(CASE WHEN s.endDate < DATE_ADD(s.startDate,'. strval($hoursPerBlock * 2) .',\'hour\') THEN 1 ';
                $block = 2;
                while ($block < 24 / $hoursPerBlock) {
                    $select .= 'WHEN (DATE_ADD(s.startDate,'. strval($hoursPerBlock * $block) .',\'hour\') <= s.endDate AND s.endDate < DATE_ADD(s.startDate,'. strval($hoursPerBlock * $block + $hoursPerBlock) .',\'hour\')) THEN '. strval($block) .' ';
                    $block += 1;
                }
                $select .= 'ELSE '. strval($block) .' END) resultCount';
            } else {
                $select = 'count(p.id) resultCount';
            }
        }

        return $query->select('p.id', $select)
            ->from('ShiftBundle\Entity\Shift', 's')
            ->innerJoin('s.registered', 'r')
            ->innerJoin('r.person', 'p')
            ->where(
                $query->expr()->andX(
                    $query->expr()->gt('r.signupTime', ':startAcademicYear'),
                    $query->expr()->lt('r.signupTime', ':endAcademicYear'),
                    $query->expr()->lte('s.endDate', ':now')
                )
            )
            ->groupBy('p.id')
            ->orderBy('resultCount')
            ->setParameter('startAcademicYear', $academicYear->getStartDate())
            ->setParameter('endAcademicYear', $academicYear->getEndDate())
            ->setParameter('now', new DateTime())
            ->getQuery();
    }
}
