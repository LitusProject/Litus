<?php

namespace ShiftBundle\Repository;

use DateTime,
    CalendarBundle\Entity\Node\Event,
    CommonBundle\Entity\General\AcademicYear,
    CommonBundle\Entity\General\Organization\Unit as UnitEntity,
    CommonBundle\Entity\User\Person,
    CommonBundle\Component\Util\EntityRepository;

/**
 * Shift
 *
 * Flight Mode
 * This file was edited by Pieter Maene while in flight from Vienna to Brussels
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Shift extends EntityRepository
{
    public function findAllActiveQuery()
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('s')
            ->from('ShiftBundle\Entity\Shift', 's')
            ->where(
                $query->expr()->gt('s.endDate', ':now')
            )
            ->orderBy('s.startDate', 'ASC')
            ->setParameter('now', new DateTime())
            ->getQuery();

        return $resultSet;
    }

    public function findAllActiveByNameQuery($name)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('s')
            ->from('ShiftBundle\Entity\Shift', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->gt('s.endDate', ':now'),
                    $query->expr()->like($query->expr()->lower('s.name'), ':name')
                )
            )
            ->orderBy('s.startDate', 'ASC')
            ->setParameter('now', new DateTime())
            ->setParameter('name', '%' . strtolower($name) . '%')
            ->getQuery();

        return $resultSet;
    }

    public function findAllOldQuery()
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('s')
            ->from('ShiftBundle\Entity\Shift', 's')
            ->where(
                $query->expr()->lt('s.endDate', ':now')
            )
            ->orderBy('s.startDate', 'ASC')
            ->setParameter('now', new DateTime())
            ->getQuery();

        return $resultSet;
    }

    public function findAllActiveByEventQuery(Event $event)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('s')
            ->from('ShiftBundle\Entity\Shift', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->gt('s.endDate', ':now'),
                    $query->expr()->eq('s.event', ':event')
                )
            )
            ->orderBy('s.startDate', 'ASC')
            ->setParameter('now', new DateTime())
            ->setParameter('event', $event)
            ->getQuery();

        return $resultSet;
    }

    public function findAllActiveByUnitQuery(UnitEntity $unit)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('s')
            ->from('ShiftBundle\Entity\Shift', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->gt('s.endDate', ':now'),
                    $query->expr()->eq('s.unit', ':unit')
                )
            )
            ->orderBy('s.startDate', 'ASC')
            ->setParameter('now', new DateTime())
            ->setParameter('unit', $unit)
            ->getQuery();

        return $resultSet;
    }

    public function findAllActiveBetweenDatesQuery($startDate, $endDate)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('s')
            ->from('ShiftBundle\Entity\Shift', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->gt('s.endDate', ':now'),
                    $query->expr()->lt('s.startDate', ':end_date'),
                    $query->expr()->gt('s.endDate', ':start_date')
                )
            )
            ->orderBy('s.startDate', 'ASC')
            ->setParameter('now', new DateTime())
            ->setParameter('start_date', $startDate)
            ->setParameter('end_date', $endDate)
            ->getQuery();

        return $resultSet;
    }

    public function findAllActiveByPerson(Person $person)
    {
        $query = $this->_em->createQueryBuilder();
        $responsibleResultSet = $query->select('s')
            ->from('ShiftBundle\Entity\Shift', 's')
            ->innerJoin('s.responsibles', 'r')
            ->where(
                $query->expr()->andX(
                    $query->expr()->gt('s.endDate', ':now'),
                    $query->expr()->eq('r.person', ':person')
                )
            )
            ->orderBy('s.startDate', 'ASC')
            ->setParameter('now', new DateTime())
            ->setParameter('person', $person)
            ->getQuery()
            ->getResult();

        $query = $this->_em->createQueryBuilder();
        $volunteerResultSet = $query->select('s')
            ->from('ShiftBundle\Entity\Shift', 's')
            ->innerJoin('s.volunteers', 'v')
            ->where(
                $query->expr()->andX(
                    $query->expr()->gt('s.endDate', ':now'),
                    $query->expr()->eq('v.person', ':person')
                )
            )
            ->orderBy('s.startDate', 'ASC')
            ->setParameter('now', new DateTime())
            ->setParameter('person', $person)
            ->getQuery()
            ->getResult();

        return array_merge(
            $responsibleResultSet, $volunteerResultSet
        );
    }

    public function findAllByPerson(Person $person, AcademicYear $academicYear = null)
    {
        return array_merge(
            $this->findAllByPersonAsReponsible($person, $academicYear),
            $this->findAllByPersonAsVolunteer($person, $academicYear)
        );
    }

    public function countAllByPerson(Person $person, AcademicYear $academicYear = null)
    {
        return count(
            array_merge(
                $this->findAllByPersonAsReponsible($person, $academicYear),
                $this->findAllByPersonAsVolunteer($person, $academicYear)
            )
        );
    }

    public function findAllByPersonAsReponsibleQuery(Person $person, AcademicYear $academicYear = null)
    {
        $queryBuilder = $this->_em->createQueryBuilder();
        $query = $queryBuilder->select('s')
            ->from('ShiftBundle\Entity\Shift', 's')
            ->innerJoin('s.responsibles', 'r');

        if (null === $academicYear) {
            $where = $query->expr()->eq('r.person', ':person');
        } else {
            $where = $query->expr()->andX(
                $query->expr()->eq('s.academicYear', ':academicYear'),
                $query->expr()->eq('r.person', ':person')
            );
        }

        $query->where(
                $query->expr()->andX(
                    $query->expr()->lt('s.startDate', ':now'),
                    $where
                )
            )
            ->orderBy('s.startDate', 'ASC')
            ->setParameter('now', new DateTime())
            ->setParameter('person', $person);

        if (null !== $academicYear)
            $query->setParameter('academicYear', $academicYear);

        return $query->getQuery();
    }

    public function findAllByPersonAsVolunteerQuery(Person $person, AcademicYear $academicYear = null)
    {
        $queryBuilder = $this->_em->createQueryBuilder();
        $query = $queryBuilder->select('s')
            ->from('ShiftBundle\Entity\Shift', 's')
            ->innerJoin('s.volunteers', 'v');

        $where = null;
        if (null === $academicYear) {
            $where = $query->expr()->eq('v.person', ':person');
        } else {
            $where = $query->expr()->andX(
                $query->expr()->eq('s.academicYear', ':academicYear'),
                $query->expr()->eq('v.person', ':person')
            );
        }

        $query->where(
                $query->expr()->andX(
                    $query->expr()->lt('s.startDate', ':now'),
                    $where
                )
            )
            ->orderBy('s.startDate', 'ASC')
            ->setParameter('now', new DateTime())
            ->setParameter('person', $person);

        if (null !== $academicYear)
            $query->setParameter('academicYear', $academicYear);

        return $query->getQuery();
    }

    public function findOneByVolunteer($id)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('s')
            ->from('ShiftBundle\Entity\Shift', 's')
            ->innerJoin('s.volunteers', 'v')
            ->where(
                $query->expr()->eq('v.id', ':id')
            )
            ->setParameter('id', $id)
            ->getQuery()
            ->getResult();

        if (isset($resultSet[0]))
            return $resultSet[0];
        return null;
    }

    public function findOneByResponsible($id)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('s')
            ->from('ShiftBundle\Entity\Shift', 's')
            ->innerJoin('s.responsibles', 'r')
            ->where(
                $query->expr()->eq('r.id', ':id')
            )
            ->setParameter('id', $id)
            ->getQuery()
            ->getResult();

        if (isset($resultSet[0]))
            return $resultSet[0];
        return null;
    }

    public function findOneActiveByVolunteer($id)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('s')
            ->from('ShiftBundle\Entity\Shift', 's')
            ->innerJoin('s.volunteers', 'v')
            ->where(
                $query->expr()->andX(
                    $query->expr()->gt('s.endDate', ':now'),
                    $query->expr()->eq('v.id', ':id')
                )
            )
            ->setParameter('now', new DateTime())
            ->setParameter('id', $id)
            ->getQuery()
            ->getResult();

        if (isset($resultSet[0]))
            return $resultSet[0];
        return null;
    }

    public function findOneActiveByResponsible($id)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('s')
            ->from('ShiftBundle\Entity\Shift', 's')
            ->innerJoin('s.responsibles', 'r')
            ->where(
                $query->expr()->andX(
                    $query->expr()->gt('s.endDate', ':now'),
                    $query->expr()->eq('r.id', ':id')
                )
            )
            ->setParameter('now', new DateTime())
            ->setParameter('id', $id)
            ->getQuery()
            ->getResult();

        if (isset($resultSet[0]))
            return $resultSet[0];
        return null;
    }
}
