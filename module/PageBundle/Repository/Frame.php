<?php

namespace PageBundle\Repository;

use PageBundle\Entity\CategoryPage;

/**
 * Frame
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Frame extends \CommonBundle\Component\Doctrine\ORM\EntityRepository
{
    /**
     * @param CategoryPage $page
     */
    public function findAllByCategoryPage(CategoryPage $page)
    {
        return $this->getEntityManager()
            ->getRepository('PageBundle\Entity\Frame')
            ->findBy(array('categoryPage' => $page), array('orderNumber', 'ASC'));
    }

    /**
     * @param CategoryPage $page
     */
    public function findAllActiveByCategoryPage(CategoryPage $page)
    {
        return $this->getEntityManager()
            ->getRepository('PageBundle\Entity\Frame')
            ->findBy(array('categoryPage' => $page, 'active' => true), array('orderNumber' => 'ASC'));
    }

    /**
     * @param CategoryPage $page
     */
    public function findAllBigFrames(CategoryPage $page)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('f')
            ->from('PageBundle\Entity\Frame', 'f')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('f.categoryPage', ':categoryPage'),
                    $query->expr()->eq('f.big', 'true')
                )
            )
            ->setParameter('categoryPage', $page)
            ->orderBy('f.orderNumber', 'ASC')
            ->getQuery();
    }

    /**
     * @param CategoryPage $page
     */
    public function findAllActiveBigFrames(CategoryPage $page)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('f')
            ->from('PageBundle\Entity\Frame', 'f')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('f.categoryPage', ':categoryPage'),
                    $query->expr()->eq('f.active', 'true'),
                    $query->expr()->eq('f.big', 'true')
                )
            )
            ->setParameter('categoryPage', $page)
            ->orderBy('f.orderNumber', 'ASC')
            ->getQuery();
    }

    /**
     * @param CategoryPage $page
     */
    public function findAllActiveSmallFrames(CategoryPage $page)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('f')
            ->from('PageBundle\Entity\Frame', 'f')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('f.categoryPage', ':categoryPage'),
                    $query->expr()->eq('f.active', 'true'),
                    $query->expr()->eq('f.big', 'false')
                )
            )
            ->setParameter('categoryPage', $page)
            ->orderBy('f.orderNumber', 'ASC')
            ->getQuery();
    }

    /**
     * @param CategoryPage $page
     */
    public function findAllSmallFrames(CategoryPage $page)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('f')
            ->from('PageBundle\Entity\Frame', 'f')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('f.categoryPage', ':categoryPage'),
                    $query->expr()->eq('f.big', 'false')
                )
            )
            ->setParameter('categoryPage', $page)
            ->orderBy('f.orderNumber', 'ASC')
            ->getQuery();
    }
}
