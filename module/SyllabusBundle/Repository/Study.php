<?php

namespace SyllabusBundle\Repository;

use CommonBundle\Entity\General\AcademicYear,
    Doctrine\ORM\EntityRepository,
    Doctrine\ORM\Query\Expr\Join,
    SyllabusBundle\Entity\Study as StudyEntity;

/**
 * Study
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Study extends EntityRepository
{
    public function findAll()
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('s')
            ->from('SyllabusBundle\Entity\Study', 's')
            ->getQuery()
            ->getResult();

        return $resultSet;
    }

    public function findOneById($id)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('s')
            ->from('SyllabusBundle\Entity\Study', 's')
            ->where(
                $query->expr()->eq('s.id', ':id')
            )
            ->setParameter('id', $id)
            ->setMaxResults(1)
            ->getQuery()
            ->getResult();

        if (isset($resultSet[0]))
            return $resultSet[0];

        return null;
    }

    public function findOneByTitlePhaseAndLanguage($title, $phase, $language)
    {
        if (! is_numeric($phase))
            return null;

        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('s')
            ->from('SyllabusBundle\Entity\Study', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('s.title', ':title'),
                    $query->expr()->eq('s.phase', ':phase'),
                    $query->expr()->eq('s.language', ':language')
                )
            )
            ->setParameter('title', $title)
            ->setParameter('phase', $phase)
            ->setParameter('language', $language)
            ->setMaxResults(1)
            ->getQuery()
            ->getResult();

        if (isset($resultSet[0]))
            return $resultSet[0];

        return null;
    }

    public function findOneByTitlePhaseLanguageAndParent($title, $phase, $language, StudyEntity $parent)
    {
        if (! is_numeric($phase))
            return null;

        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('s')
            ->from('SyllabusBundle\Entity\Study', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('s.title', ':title'),
                    $query->expr()->eq('s.phase', ':phase'),
                    $query->expr()->eq('s.language', ':language'),
                    ($parent ? $query->expr()->eq('s.parent', $parent->getId()) : $query->expr()->isNull('s.parent'))
                )
            )
            ->setParameter('title', $title)
            ->setParameter('phase', $phase)
            ->setParameter('language', $language)
            ->setMaxResults(1)
            ->getQuery()
            ->getResult();

        if (isset($resultSet[0]))
            return $resultSet[0];

        return null;
    }

    public function findAllParentsByAcademicYear(AcademicYear $academicYear)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('m')
            ->from('SyllabusBundle\Entity\AcademicYearMap', 'm')
            ->where(
                $query->expr()->eq('m.academicYear', ':academicYear')
            )
            ->setParameter('academicYear', $academicYear->getId())
            ->getQuery()
            ->getResult();

        $ids = array(0);
        foreach($resultSet as $result) {
            $ids[$result->getStudy()->getId()] = $result->getStudy()->getId();
            foreach($result->getStudy()->getParents() as $parent)
                $ids[$parent->getId()] = $parent->getId();
        }

        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('s')
            ->from('SyllabusBundle\Entity\Study', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->in('s.id', $ids),
                    $query->expr()->isNull('s.parent')
                )
            )
            ->orderBy('s.title', 'ASC')
            ->addOrderBy('s.phase', 'ASC')
            ->getQuery()
            ->getResult();

        return $resultSet;
    }

    public function findAllByTitleAndAcademicYearTypeAhead($title, AcademicYear $academicYear)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('m')
            ->from('SyllabusBundle\Entity\AcademicYearMap', 'm')
            ->where(
                $query->expr()->eq('m.academicYear', ':academicYear')
            )
            ->setParameter('academicYear', $academicYear->getId())
            ->getQuery()
            ->getResult();

        $result = array();

        $title = strtolower($title);

        foreach ($resultSet as $mapping) {
            if (strpos(strtolower($mapping->getStudy()->getFullTitle()), $title) !== false)
                $result[] = $mapping->getStudy();
        }

        return $result;
    }

    public function findOneByKulId($kulId)
    {
        if (! is_numeric($kulId))
            return null;

        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('s')
            ->from('SyllabusBundle\Entity\Study', 's')
            ->where(
                $query->expr()->eq('s.kulId', ':kulId')
            )
            ->setParameter('kulId', $kulId)
            ->setMaxResults(1)
            ->getQuery()
            ->getResult();

        if (isset($resultSet[0]))
            return $resultSet[0];

        return null;
    }
}
