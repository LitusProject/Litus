<?php

namespace SyllabusBundle\Repository\Subject;

use CommonBundle\Entity\General\AcademicYear;
use CommonBundle\Entity\User\Person;
use SyllabusBundle\Entity\Subject;

/**
 * Comment
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Comment extends \CommonBundle\Component\Doctrine\ORM\EntityRepository
{
    public function findLast($nb = 10)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('c')
            ->from('SyllabusBundle\Entity\Subject\Comment', 'c')
            ->where(
                $query->expr()->isNull('c.readBy')
            )
            ->orderBy('c.date', 'DESC')
            ->setMaxResults($nb)
            ->getQuery()
            ->getResult();
    }

    public function findBySubjectAndType(Subject $subject, $type)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('c')
            ->from('SyllabusBundle\Entity\Subject\Comment', 'c')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('c.subject', ':subject'),
                    $query->expr()->eq('c.type', ':type')
                )
            )
            ->setParameter('subject', $subject->getId())
            ->setParameter('type', $type)
            ->orderBy('c.date', 'DESC')
            ->getQuery()
            ->getResult();
    }

    public function findAllByAcademicYearQuery(AcademicYear $academicYear)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('s.id')
            ->from('SyllabusBundle\Entity\Study\SubjectMap', 'm')
            ->innerJoin('m.subject', 's')
            ->where(
                $query->expr()->eq('m.academicYear', ':academicYear')
            )
            ->setParameter('academicYear', $academicYear)
            ->getQuery()
            ->getResult();

        $ids = array(0 => 0);
        foreach ($resultSet as $item) {
            $ids[$item['id']] = $item['id'];
        }

        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('c')
            ->from('SyllabusBundle\Entity\Subject\Comment', 'c')
            ->where(
                $query->expr()->in('c.subject', $ids)
            )
            ->orderBy('c.date', 'DESC')
            ->getQuery();
    }

    public function findRecentConversationsByPersonAndAcademicYear(Person $person, AcademicYear $academicYear)
    {
        $subjects = $this->getEntityManager()
            ->getRepository('SyllabusBundle\Entity\Subject\ProfMap')
            ->findAllByProfAndAcademicYear($person, $academicYear);

        $comments = array();
        foreach ($subjects as $subject) {
            $commentsOfSubject = $this->getEntityManager()
                ->getRepository('SyllabusBundle\Entity\Subject\Comment')
                ->findBySubject($subject->getSubject());

            foreach ($commentsOfSubject as $comment) {
                $reply = $this->getEntityManager()
                    ->getRepository('SyllabusBundle\Entity\Subject\Reply')
                    ->findLastByComment($comment);

                if ($reply !== null) {
                    $comments[$reply->getDate()->getTimestamp()] = array('type' => 'reply', 'content' => $reply);
                } else {
                    $comments[$comment->getDate()->getTimestamp()] = array('type' => 'comment', 'content' => $comment);
                }
            }
        }

        ksort($comments);

        return array_slice($comments, 0, 5);
    }
}
