<?php
/**
 * Litus is a project by a group of students from the KU Leuven. The goal is to create
 * various applications to support the IT needs of student unions.
 *
 * @author Niels Avonds <niels.avonds@litus.cc>
 * @author Karsten Daemen <karsten.daemen@litus.cc>
 * @author Koen Certyn <koen.certyn@litus.cc>
 * @author Bram Gotink <bram.gotink@litus.cc>
 * @author Dario Incalza <dario.incalza@litus.cc>
 * @author Pieter Maene <pieter.maene@litus.cc>
 * @author Kristof MariÃ«n <kristof.marien@litus.cc>
 * @author Lars Vierbergen <lars.vierbergen@litus.cc>
 * @author Daan Wendelen <daan.wendelen@litus.cc>
 *
 * @license http://litus.cc/LICENSE
 */

namespace SyllabusBundle\Repository;

use CommonBundle\Component\Doctrine\ORM\EntityRepository,
    CommonBundle\Component\Util\AcademicYear as AcademicYearUtil,
    CommonBundle\Entity\General\AcademicYear,
    CommonBundle\Entity\User\Person;

/**
 * Subject
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Subject extends EntityRepository
{
    public function findAllByNameAndAcademicYearTypeAhead($name, AcademicYear $academicYear)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('m')
            ->from('SyllabusBundle\Entity\StudySubjectMap', 'm')
            ->innerJoin('m.subject', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->orX(
                        $query->expr()->like($query->expr()->lower('s.name'), ':name'),
                        $query->expr()->like($query->expr()->lower('s.code'), ':name')
                    ),
                    $query->expr()->eq('m.academicYear', ':academicYear')
                )
            )
            ->setParameter('academicYear', $academicYear->getId())
            ->setParameter('name', strtolower(trim($name)) . '%')
            ->setMaxResults(20)
            ->getQuery()
            ->getResult();

        $subjects = array();
        foreach ($resultSet as $map) {
            $subjects[$map->getSubject()->getId()] = $map->getSubject();
        }

        return $subjects;
    }

    public function getYearsByPerson(Person $person)
    {
        $years = array();

        $academicYear = AcademicYearUtil::getUniversityYear($this->getEntityManager());

        $studies = $this->getEntityManager()
            ->getRepository('SecretaryBundle\Entity\Syllabus\StudyEnrollment')
            ->findAllByAcademicAndAcademicYear($person, $academicYear);

        foreach ($studies as $studyMap) {
            $year = $studyMap->getStudy()->getPhase();
            if (strpos(strtolower($studyMap->getStudy()->getFullTitle()), 'master') !== false) {
                $years[$year+3] = $year+3;
            } elseif (strpos(strtolower($studyMap->getStudy()->getFullTitle()), 'bachelor') !== false) {
                $years[$year] = $year;
            }
        }

        return $years;
    }
}
