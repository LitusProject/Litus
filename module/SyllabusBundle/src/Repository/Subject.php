<?php

namespace SyllabusBundle\Repository;

use CommonBundle\Entity\Users\Person,
    Doctrine\ORM\EntityRepository,
    Doctrine\ORM\Query\Expr\Join;

/**
 * Subject
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Subject extends EntityRepository
{
    public function findAllByName($name)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('s')
        	->from('SyllabusBundle\Entity\Subject', 's')
        	->where(
        	    $query->expr()->andX(
        	        $query->expr()->eq('s.active', 'true'),
                    $query->expr()->like($query->expr()->lower('s.name'), ':name')
        	    )
        	)
        	->setParameter('name', '%' . strtolower($name) . '%')
        	->getQuery()
        	->getResult();
        
        return $resultSet;
    }
    
    public function findAllByNameTypeAhead($name)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('s')
        	->from('SyllabusBundle\Entity\Subject', 's')
        	->where(
        	    $query->expr()->andX(
        	        $query->expr()->eq('s.active', 'true'),
            	    $query->expr()->orX(
                        $query->expr()->like($query->expr()->lower('s.name'), ':name'),
                        $query->expr()->like($query->expr()->lower('s.code'), ':name')
                    )
        	    )
        	)
        	->setParameter('name', strtolower($name) . '%')
        	->getQuery()
        	->getResult();
        
        return $resultSet;
    }
    
    public function findOneByIdAndProf($id, Person $person)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('m')
            ->from('SyllabusBundle\Entity\SubjectProfMap', 'm')
            ->innerJoin('m.subject', 's', Join::WITH, $query->expr()->eq('s.id', ':id'))
            ->where(
                $query->expr()->eq('m.prof', ':prof')
            )
            ->setParameter('id', $id)
            ->setParameter('prof', $person->getId())
            ->setMaxResults(1)
            ->getQuery()
            ->getResult();
        
        if (isset($resultSet[0]))
        	return $resultSet[0]->getSubject();
        
        return null;
    }
}