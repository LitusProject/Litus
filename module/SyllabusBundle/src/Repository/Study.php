<?php

namespace SyllabusBundle\Repository;

use Doctrine\ORM\EntityRepository,
    SyllabusBundle\Entity\Study as StudyEntity;

/**
 * Study
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Study extends EntityRepository
{
    public function findOneByTitlePhaseAndLanguage($title, $phase, $language)
    {
        if (! is_numeric($phase))
            return null;

        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('s')
            ->from('SyllabusBundle\Entity\Study', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('s.title', ':title'),
                    $query->expr()->eq('s.phase', ':phase'),
                    $query->expr()->eq('s.language', ':language')
                )
            )
            ->setParameter('title', $title)
            ->setParameter('phase', $phase)
            ->setParameter('language', $language)
            ->setMaxResults(1)
            ->getQuery()
            ->getResult();

        if (isset($resultSet[0]))
            return $resultSet[0];

        return null;
    }

    public function findOneByTitlePhaseLanguageAndParent($title, $phase, $language, StudyEntity $parent)
    {
        if (! is_numeric($phase))
            return null;

        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('s')
            ->from('SyllabusBundle\Entity\Study', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('s.title', ':title'),
                    $query->expr()->eq('s.phase', ':phase'),
                    $query->expr()->eq('s.language', ':language'),
                    ($parent ? $query->expr()->eq('s.parent', $parent->getId()) : $query->expr()->isNull('s.parent'))
                )
            )
            ->setParameter('title', $title)
            ->setParameter('phase', $phase)
            ->setParameter('language', $language)
            ->setMaxResults(1)
            ->getQuery()
            ->getResult();

        if (isset($resultSet[0]))
            return $resultSet[0];

        return null;
    }
}
