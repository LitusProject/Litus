<?php
/**
 * Litus is a project by a group of students from the KU Leuven. The goal is to create
 * various applications to support the IT needs of student unions.
 *
 * @author Niels Avonds <niels.avonds@litus.cc>
 * @author Karsten Daemen <karsten.daemen@litus.cc>
 * @author Koen Certyn <koen.certyn@litus.cc>
 * @author Bram Gotink <bram.gotink@litus.cc>
 * @author Dario Incalza <dario.incalza@litus.cc>
 * @author Pieter Maene <pieter.maene@litus.cc>
 * @author Kristof MariÃ«n <kristof.marien@litus.cc>
 * @author Lars Vierbergen <lars.vierbergen@litus.cc>
 * @author Daan Wendelen <daan.wendelen@litus.cc>
 * @author Mathijs Cuppens <mathijs.cuppens@litus.cc>
 * @author Floris Kint <floris.kint@vtk.be>
 *
 * @license http://litus.cc/LICENSE
 */

namespace PromBundle\Repository\Bus;

use CommonBundle\Entity\General\AcademicYear;

/**
 * ReservationCode
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReservationCode extends \CommonBundle\Component\Doctrine\ORM\EntityRepository
{
    /**
     * @param  string $code
     * @return boolean
     */
    public function codeExists($code)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $resultCode = $query->select('c')
            ->from('PromBundle\Entity\Bus\ReservationCode', 'c')
            ->where(
                $query->expr()->eq('c.code', ':code')
            )
            ->setParameter('code', $code)
            ->getQuery()
            ->getResult();

        return count($resultCode) > 0;
    }

    /**
     * @param  string $code
     * @return \PromBundle\Entity\Bus\ReservationCode|null
     */
    public function getRegistrationCodeByCode($code)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('c')
            ->from('PromBundle\Entity\Bus\ReservationCode', 'c')
            ->where(
                $query->expr()->eq('c.code', ':code')
            )
            ->setParameter('code', $code)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @param  AcademicYear $academicYear
     * @return array
     */
    public function getAllCodesByAcademicYear($academicYear)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('c')
            ->from('PromBundle\Entity\Bus\ReservationCode', 'c')
            ->where(
                $query->expr()->eq('c.academicYear', ':year')
            )
            ->orderBy('c.id')
            ->setParameter('year', $academicYear)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param  string $code
     * @return \Doctrine\ORM\Query
     */
    public function findAllByCodeQuery($code)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('c')
            ->from('PromBundle\Entity\Bus\ReservationCode', 'c')
            ->where(
                $query->expr()->like('c.code', ':code')
            )
            ->setParameter('code', $code.'%')
            ->getQuery();
    }

    /**
     * @param  string $name
     * @return \Doctrine\ORM\Query
     */
    public function findAllAcademicByNameQuery($name)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('c')
            ->from('PromBundle\Entity\Bus\ReservationCode\Academic', 'c')
            ->innerJoin('c.academic', 'p')
            ->where(
                $query->expr()->orX(
                    $query->expr()->like(
                        $query->expr()->concat(
                            $query->expr()->lower($query->expr()->concat('p.firstName', "' '")),
                            $query->expr()->lower('p.lastName')
                        ),
                        ':name'
                    ),
                    $query->expr()->like(
                        $query->expr()->concat(
                            $query->expr()->lower($query->expr()->concat('p.lastName', "' '")),
                            $query->expr()->lower('p.firstName')
                        ),
                        ':name'
                    )
                )
            )
            ->setParameter('name', '%' . strtolower($name) . '%')
            ->getQuery();
    }

    /**
     * @param  string $name
     * @return \Doctrine\ORM\Query
     */
    public function findAllExternalByNameQuery($name)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('c')
            ->from('PromBundle\Entity\Bus\ReservationCode\External', 'c')
            ->where(
                $query->expr()->orX(
                    $query->expr()->like(
                        $query->expr()->concat(
                            $query->expr()->lower($query->expr()->concat('c.firstName', "' '")),
                            $query->expr()->lower('c.lastName')
                        ),
                        ':name'
                    ),
                    $query->expr()->like(
                        $query->expr()->concat(
                            $query->expr()->lower($query->expr()->concat('c.lastName', "' '")),
                            $query->expr()->lower('c.firstName')
                        ),
                        ':name'
                    )
                )
            )
            ->setParameter('name', '%' . strtolower($name) . '%')
            ->getQuery();
    }

    /**
     * @param  string $universityIdentification
     * @return \Doctrine\ORM\Query
     */
    public function findAllByUniversityIdentificationQuery($universityIdentification)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('c')
            ->from('PromBundle\Entity\Bus\ReservationCode\Academic', 'c')
            ->innerJoin('c.academic', 'p')
            ->where(
                $query->expr()->like($query->expr()->lower('p.universityIdentification'), ':universityIdentification')
            )
            ->setParameter('universityIdentification', '%' . strtolower($universityIdentification) . '%')
            ->getQuery();
    }
}
