{% extends 'form/base.twig' %}

{% block content %}
    {% if authenticatedPerson is not null %}
        <h2>{{ formSpecification.getTitle(language) }}</h2>

        <div class="form-horizontal">
            <div class="form-group">
                <label class="col-sm-2 control-label">{{ translate('ID') }}</label>
                <div class="col-sm-10">
                    <p class="form-control-static">{{ entry.getId() }}</p>
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 control-label">{{ translate('Name') }}</label>
                <div class="col-sm-10">
                    <p class="form-control-static">{{ entry.getPersonInfo().getFullName() }}</p>
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 control-label">{{ translate('Guest') }}</label>
                <div class="col-sm-10">
                    <p class="form-control-static">{% if entry.isGuestEntry() %}{{ translate('Yes') }}{% else %}{{ translate('No') }}{% endif %}</p>
                </div>
            </div>
            {% if not entry.isGuestEntry() %}
                <div class="form-group">
                    <label class="col-sm-2 control-label">{{ translate('Phone Number') }}</label>
                    <div class="col-sm-10">
                        <p class="form-control-static">{{ entry.getPersonInfo().getPhoneNumber() }}</p>
                    </div>
                </div>
                {% if entry.getPersonInfo().getAddress() %}
                    <div class="form-group">
                        <label class="col-sm-2 control-label">{{ translate('Address') }}</label>
                        <div class="col-sm-10">
                            <p class="form-control-static">
                                <address>
                                    {{ entry.getPersonInfo().getAddress().getStreet() }} {{ entry.getPersonInfo().getAddress().getNumber() }}<br>
                                    {{ entry.getPersonInfo().getAddress().getCountry() }}-{{ entry.getPersonInfo().getAddress().getPostal() }} {{ entry.getPersonInfo().getAddress().getCity() }}
                                </address>
                            </p>
                        </div>
                    </div>
                {% endif %}
            {% endif %}
            <div class="form-group">
                <label class="col-sm-2 control-label">{{ translate('Submitted') }}</label>
                <div class="col-sm-10">
                    <p class="form-control-static">{{ dateLocalized(entry.getCreationTime(), 'dd/MM/y HH:mm') }}</p>
                </div>
            </div>
            {% if viewer.isMail() %}
                <div class="form-group">
                    <label class="col-sm-2 control-label">{{ translate('Email') }}</label>
                    <div class="col-sm-10">
                        <p class="form-control-static">{{ entry.getPersonInfo().getEmail() }}</p>
                    </div>
                </div>
            {% endif %}
        </div>

        {% import 'site/partials/form.twig' as forms %}
        {{ forms.renderForm(form) }}

    {% else %}
        <div style="text-align: center;">
            <img src="/img/litus.png" alt="Litus" />
            <h3>{{ translate('Please login to get access to these pages.') }}</h3>
        </div>
    {% endif %}
{% endblock %}

{% block content_script %}
    <script type="text/javascript">
        $(document).ready(function () {
            $('input[type=file]').each(function () {
                if ($(this).data('file')) {
                    var fileinput = $(this).closest('.fileinput');
                    fileinput.find('.fileinput-filename').append($(this).data('name') ? $(this).data('name') : $(this).data('file'));
                    fileinput.removeClass('fileinput-new').addClass('fileinput-exists');
                    fileinput.find('a.input-group-addon:last').before(
                        $('<a>', {'class': 'input-group-addon btn btn-default fileinput-exists', 'href': '{{ url('form_view', {'action': 'downloadFile'}) }}' + $(this).data('file')}).html('{{ translate('Download') }}')
                    );
                    fileinput.find('a.input-group-addon:last').click(function (e) {
                        $(this).closest('.fileinput').append(
                            $('<input>', {'type': 'hidden', 'name': $(this).closest('.fileinput').find('input[type="file"]').attr('id') + '-removed'}).val(1)
                        );
                        $(this).closest('.fileActions').remove();
                    });
                }
            });

            var form = $('#content_controller form');
            form.find('input, select').each(function () {
                var $this = $(this);
                if ($this.data('visible_if_element') !== undefined) {
                    $this.closest('.form-group').hide();
                    form.find('#field-' + $this.data('visible_if_element')).bind('change keyup', function () {
                        if ($(this).attr('type') == 'text') {
                            if ($(this).val() !== '') {
                                $this.closest('.form-group').show();
                            } else {
                                $this.closest('.form-group').hide();
                                resetElement($this);
                            }
                            $this.trigger('change');
                        } else if ($(this).attr('type') == 'checkbox') {
                            if (
                                ($(this).is(':checked') && $this.data('visible_if_value') == '1')
                                    || (!$(this).is(':checked') && $this.data('visible_if_value') == '0')
                                && $(this).is(':visible')
                            ) {
                                $this.closest('.form-group').show();
                            } else {
                                $this.closest('.form-group').hide();
                                resetElement($this);
                            }
                            $this.trigger('change');
                        } else if ($(this).is('select')) {
                            if ($(this).find('option:selected').val() == $this.data('visible_if_value') && $(this).is(':visible')) {
                                $this.closest('.form-group').show();
                            } else {
                                $this.closest('.form-group').hide();
                                resetElement($this);
                            }
                            $this.trigger('change');
                        }
                    }).trigger('change');
                }
            });
        });

        function resetElement(element) {
            if (element.attr('type') == 'text') {
                element.val('');
            } else if (element.attr('type') == 'checkbox') {
                element.prop('checked', false);
            } else if (element.is('select')) {
                element.find('option').removeAttr('selected');
                element.find('option:first').attr('selected','selected');
            }
        }
    </script>
{% endblock %}
