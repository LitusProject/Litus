<?php

namespace LogisticsBundle\Repository;

use CommonBundle\Entity\General\Organization\Unit;
use CommonBundle\Entity\User\Person;
use DateTime;
use Doctrine\Common\Collections\ArrayCollection;
use LogisticsBundle\Entity\Article as ArticleEntity;
use LogisticsBundle\Entity\Request;

/**
 * Order
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Order extends \CommonBundle\Component\Doctrine\ORM\EntityRepository
{
    /**
     * @return \Doctrine\ORM\Query
     */
    public function findAllRejectedRemovedOrOldQuery()
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('o')
            ->from('LogisticsBundle\Entity\Order', 'o')
            ->where(
                $query->expr()->orX(
                    $query->expr()->eq('o.removed', 'TRUE'),
                    $query->expr()->eq('o.rejected', 'TRUE'),
                    $query->expr()->lt('o.endDate', ':now')
                )
            )
            ->orderBy('o.id', 'ASC')
            ->setParameter('now', new DateTime())
            ->getQuery();
    }

    /**
     * @return \Doctrine\ORM\Query
     */
    public function findAllActiveQuery()
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('o')
            ->from('LogisticsBundle\Entity\Order', 'o')
            ->where(
                $query->expr()->andx(
                    $query->expr()->gt('o.endDate', ':now'),
                    $query->expr()->eq('o.removed', 'FALSE'),
                    $query->expr()->eq('o.rejected', 'FALSE')
                )
            )
            ->orderBy('o.startDate', 'ASC')
            ->setParameter('now', new DateTime())
            ->getQuery();
    }

    /**
     * @param  integer $id
     * @return \LogisticsBundle\Entity\Order
     */
    public function findOneActiveById($id)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('o')
            ->from('LogisticsBundle\Entity\Order', 'o')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('o.id', ':id'),
                    $query->expr()->gt('o.endDate', ':now'),
                    $query->expr()->eq('o.removed', 'FALSE')
                )
            )
            ->setParameter('id', $id)
            ->setParameter('now', new DateTime())
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param  Person\Academic $creator
     * @return \Doctrine\ORM\Query
     */
    public function findAllActiveByCreator($creator)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('o')
            ->from('LogisticsBundle\Entity\Order', 'o')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('o.creator', ':creator'),
                    $query->expr()->gt('o.endDate', ':now'),
                    $query->expr()->eq('o.removed', 'FALSE')
                )
            )
            ->setParameter('creator', $creator)
            ->setParameter('now', new DateTime())
            ->getQuery()
            ->getResult();
    }

    /**
     * @param Unit $unit
     * @return \Doctrine\ORM\Query
     */
    public function findAllActiveByUnit(Unit $unit)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('o')
            ->from('LogisticsBundle\Entity\Order', 'o')
            ->join('o.units', 'u')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('u', ':unit'),
                    $query->expr()->gt('o.endDate', ':now'),
                    $query->expr()->eq('o.removed', 'FALSE')
                )
            )
            ->setParameter('unit', $unit)
            ->setParameter('now', new DateTime())
            ->getQuery()
            ->getResult();
    }

    /**
     * @param Request $request
     * @return ArrayCollection
     */
    public function findAllByRequest(Request $request)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('o')
            ->from('LogisticsBundle\Entity\Order', 'o')
            ->where(
                $query->expr()->eq('o.referencedRequest', ':request')
            )
            ->setParameter('request', $request)
            ->orderBy('o.dateUpdated', 'DESC')
            ->getQuery()
            ->getResult();
    }

    /**
     * @param  ArticleEntity $article
     * @return \Doctrine\ORM\Query
     */
    public function findAllByArticleQuery(ArticleEntity $article)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('o')
            ->from('LogisticsBundle\Entity\order', 'o')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('o.removed', 'FALSE'),
                    $query->expr()->gt('o.endDate', ':now')
                )
            )
//            ->innerJoin('LogisticsBundle\Entity\Order\OrderArticleMap', 'oam')
//            ->where(
//                $query->expr()->eq('oam.referencedArticle', ':article')
//            )
            ->setParameter('now', new DateTime())
//            ->setParameter('article', $article->getId())
            ->orderBy('o.startDate', 'ASC')
            ->getQuery();
    }

    /**
     * @return \Doctrine\ORM\Query
     */
    public function findAllActiveByNameQuery()
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('v, c')
            ->from('LogisticsBundle\Entity\Order', 'o')
            ->where(
                $query->expr()->andx(
                    $query->expr()->gt('o.endDate', ':now'),
                    $query->expr()->eq('o.removed', 'FALSE'),
                    $query->expr()->eq('o.approved', 'TRUE')
                )
            )
            ->setParameter('now', new DateTime())
            ->orderBy('o.name', 'ASC')
            ->getQuery();
    }

    /**
     * @return \Doctrine\ORM\Query
     */
    public function findAllActiveByUpdateDateQuery()
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('v, c')
            ->from('LogisticsBundle\Entity\Order', 'o')
            ->where(
                $query->expr()->andx(
                    $query->expr()->gt('o.endDate', ':now'),
                    $query->expr()->eq('o.removed', 'FALSE'),
                    $query->expr()->eq('o.approved', 'TRUE')
                )
            )
            ->setParameter('now', new DateTime())
            ->orderBy('o.dateUpdated', 'DESC')
            ->getQuery();
    }

//    /**
//     * @return \Doctrine\ORM\Query
//     */
//    public function findOverlappingOrderByArticleByOrderQuery(OrderEntity   )
//    {
//        $query = $this->getEntityManager()->createQueryBuilder();
//        return $query->select('o')
//            ->from('LogisticsBundle\Entity\Order', 'o')
//            ->where(
//                $query->expr()->andx(
//                    $query->expr()->gt('o.endDate', ':now'),
//                    $query->expr()->eq('o.removed', 'FALSE')
//                )
//            )
//            ->orderBy('o.startDate', 'ASC')
//            ->setParameter('now', new DateTime())
//            ->getQuery();
//    }
}
