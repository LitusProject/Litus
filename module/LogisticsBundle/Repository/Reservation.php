<?php

namespace LogisticsBundle\Repository;

use DateTime;
use LogisticsBundle\Entity\Reservation\Resource as ResourceEntity;

/**
 * Reservation
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Reservation extends \CommonBundle\Component\Doctrine\ORM\EntityRepository
{
    public function findAllQuery()
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('r')
            ->from('LogisticsBundle\Entity\Reservation', 'r')
            ->getQuery();
    }

    public function findAllConflictingQuery(DateTime $startDate, DateTime $endDate, ResourceEntity $resource)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('r')
            ->from('LogisticsBundle\Entity\Reservation', 'r')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('r.resource', ':resource'),
                    $query->expr()->lt('r.startDate', ':end_date'),
                    $query->expr()->gt('r.endDate', ':start_date')
                )
            )
            ->setParameter('resource', $resource)
            ->setParameter('start_date', $startDate)
            ->setParameter('end_date', $endDate)
            ->getQuery();
    }

    /**
     * Finds all resources conflicting with the given start and end date for the given resource. Additionally, one id can be ignored to avoid conflicts with
     * the resource itself.
     *
     * @param  DateTime       $startDate
     * @param  DateTime       $endDate
     * @param  ResourceEntity $resource
     * @param  integer        $ignoreId
     * @return \Doctrine\ORM\Query
     */
    public function findAllConflictingIgnoringIdQuery(DateTime $startDate, DateTime $endDate, ResourceEntity $resource, $ignoreId)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('r')
            ->from('LogisticsBundle\Entity\Reservation', 'r')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('r.resource', ':resource'),
                    $query->expr()->lt('r.startDate', ':end_date'),
                    $query->expr()->gt('r.endDate', ':start_date'),
                    $query->expr()->neq('r.id', ':id')
                )
            )
            ->setParameter('resource', $resource)
            ->setParameter('start_date', $startDate)
            ->setParameter('end_date', $endDate)
            ->setParameter('id', $ignoreId)
            ->getQuery();
    }
}
