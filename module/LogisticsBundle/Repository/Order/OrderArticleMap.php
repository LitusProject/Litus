<?php

namespace LogisticsBundle\Repository\Order;

use DateTime;
use LogisticsBundle\Entity\Article as ArticleEntity;
use LogisticsBundle\Entity\Order as OrderEntity;

/**
 * OrderArticleMap
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrderArticleMap extends \CommonBundle\Component\Doctrine\ORM\EntityRepository
{
    public function findAllByOrderQuery(OrderEntity $order)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('m', 'a')
            ->from('LogisticsBundle\Entity\Order\OrderArticleMap', 'm')
            ->innerJoin('m.referencedArticle', 'a')
            ->where(
                $query->expr()->eq('m.referencedOrder', ':order')
            )
            ->setParameter('order', $order)
            ->getQuery();
    }

    public function findOneByOrderArticle(OrderEntity $order, ArticleEntity $article)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('m')
            ->from('LogisticsBundle\Entity\Order\OrderArticleMap', 'm')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('m.referencedOrder', ':order'),
                    $query->expr()->eq('m.referencedArticle', ':article')
                )
            )
            ->setParameter('order', $order)
            ->setParameter('article', $article)
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function findAllActiveByArticleQuery(ArticleEntity $article)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('m')
            ->from('LogisticsBundle\Entity\Order\OrderArticleMap', 'm')
            ->innerJoin('m.referencedOrder', 'o')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('m.referencedArticle', ':article'),
                    $query->expr()->eq('o.removed', 'FALSE'),
                    $query->expr()->gt('o.endDate', ':now')
                )
            )
            ->setParameter('article', $article)
            ->setParameter('now', new DateTime())
            ->getQuery();
    }

    public function findAllOverlappingByOrderArticleQuery(ArticleEntity $article, OrderEntity $order)
    {
        $margin_hours = strval(unserialize($this->getEntityManager()
            ->getRepository('CommonBundle\Entity\General\Config')
            ->getConfigValue('logistics.request_margin_hours')));

        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('m')
            ->from('LogisticsBundle\Entity\Order\OrderArticleMap', 'm')
            ->innerJoin('m.referencedOrder', 'o')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('m.referencedArticle', ':article'),
                    $query->expr()->eq('o.removed', 'FALSE'),
                    $query->expr()->gt('o.endDate', ':now'),
                    $query->expr()->orX(
                        $query->expr()->between(':startDate', 'o.startDate', 'o.endDate'),
                        $query->expr()->between(':endDate', 'o.startDate', 'o.endDate'),
                        $query->expr()->between('o.startDate', ':startDate', ':endDate'),
                        $query->expr()->between('o.endDate', ':startDate', ':endDate'),
                    ),
                )
            )
            ->setParameter('article', $article)
            ->setParameter('startDate', $order->getStartDate()->modify('-' . $margin_hours . ' hour'))
            ->setParameter('endDate', $order->getEndDate()->modify('+' . $margin_hours . ' hour'))
            ->setParameter('now', new DateTime())
            ->getQuery();
    }

    public function findAllOverlappingWith(OrderEntity\OrderArticleMap $map)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('m')
            ->from('LogisticsBundle\Entity\Order\OrderArticleMap', 'm')
            ->innerJoin('m.referencedOrder', 'o')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('m.referencedArticle', ':article'),
                    $query->expr()->orX(
                        $query->expr()->between('o.startDate', ':startDate', ':endDate'),
                        $query->expr()->between('o.endDate', ':startDate', ':endDate')
                    )
                )
            )
            ->setParameter('startDate', $map->getOrder()->getStartDate())
            ->setParameter('endDate', $map->getOrder()->getStartDate())
            ->setParameter('article', $map->getArticle()->getId())
            ->getQuery()
            ->getResult();
    }
}
