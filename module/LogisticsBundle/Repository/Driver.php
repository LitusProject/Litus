<?php
/**
 * Litus is a project by a group of students from the KU Leuven. The goal is to create
 * various applications to support the IT needs of student unions.
 *
 * @author Niels Avonds <niels.avonds@litus.cc>
 * @author Karsten Daemen <karsten.daemen@litus.cc>
 * @author Koen Certyn <koen.certyn@litus.cc>
 * @author Bram Gotink <bram.gotink@litus.cc>
 * @author Dario Incalza <dario.incalza@litus.cc>
 * @author Pieter Maene <pieter.maene@litus.cc>
 * @author Kristof MariÃ«n <kristof.marien@litus.cc>
 * @author Lars Vierbergen <lars.vierbergen@litus.cc>
 * @author Daan Wendelen <daan.wendelen@litus.cc>
 *
 * @license http://litus.cc/LICENSE
 */

namespace LogisticsBundle\Repository;

use CommonBundle\Component\Doctrine\ORM\EntityRepository,
    CommonBundle\Entity\General\AcademicYear;

/**
 * Driver
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Driver extends EntityRepository
{
    public function findOneById($id)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('d')
            ->from('LogisticsBundle\Entity\Driver', 'd')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('d.removed', 'false'),
                    $query->expr()->eq('d.person', ':id')
                )
            )
            ->setParameter('id', $id)
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();

        return $resultSet;
    }

    public function findAllByYearQuery(AcademicYear $year) {

        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('d')
            ->from('LogisticsBundle\Entity\Driver', 'd')
            ->innerJoin('d.years', 'y')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('d.removed', 'false'),
                    $query->expr()->eq('y', ':year')
                )
            )
            ->setParameter('year', $year)
            ->getQuery();

        return $resultSet;
    }

    public function findAllQuery()
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('d')
            ->from('LogisticsBundle\Entity\Driver', 'd')
            ->innerJoin('d.person', 'p')
            ->where(
                $query->expr()->eq('d.removed', 'false')
            )
            ->orderBy('p.lastName', 'ASC')
            ->getQuery();

        return $resultSet;
    }
}
