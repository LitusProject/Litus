<?php

namespace LogisticsBundle\Repository;

use CommonBundle\Entity\General\Organization\Unit;
use CommonBundle\Entity\General\Organization\Unit as UnitEntity;
use CommonBundle\Entity\User\Person\Academic;
use Doctrine\Common\Collections\ArrayCollection;
use LogisticsBundle\Entity\Order as OrderEntity;

/**
 * Request
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Request extends \CommonBundle\Component\Doctrine\ORM\EntityRepository
{
    /**
     * @param  integer $id
     * @return \LogisticsBundle\Entity\Request
     */
    public function findRequestById($id)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('r')
            ->from('LogisticsBundle\Entity\Request', 'r')
            ->where(
                $query->expr()->eq('r.id', ':id')
            )
            ->setParameter('id', $id)
            ->getQuery()
            ->getSingleResult();
    }

    /**
     * @return ArrayCollection
     */
    public function findNewRequests()
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('r')
            ->from('LogisticsBundle\Entity\Request', 'r')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('r.handled', 'FALSE'),
                    $query->expr()->eq('r.removed', 'FALSE')
                )
            )
            ->getQuery()
            ->getResult();
    }

    /**
     * @return ArrayCollection
     */
    public function findAllUnhandledByUnit(UnitEntity $unit)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('r')
            ->from('LogisticsBundle\Entity\Request', 'r')
            ->innerJoin('r.editOrder', 'o')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('r.handled', 'FALSE'),
                    $query->expr()->eq('o.unit', ':unit'),
                    $query->expr()->eq('o.removed', 'FALSE')
                )
            )
            ->setParameter('unit', $unit->getId())
            ->getQuery()
            ->getResult();
    }

    /**
     * @return ArrayCollection
     */
    public function findUnhandledRequestsByOrder(OrderEntity $order)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('r')
            ->from('LogisticsBundle\Entity\Request', 'r')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('r.handled', 'FALSE'),
                    $query->expr()->eq('r.editOrder', ':order')
                )
            )
            ->setParameter('order', $order->getId())
            ->getQuery()
            ->getResult();
    }

    /**
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    public function findAllUnhandledByAcademic(Academic $academic)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('r')
            ->from('LogisticsBundle\Entity\Request', 'r')
            ->join('r.referencedOrder', 'ro')
            ->leftJoin('r.editOrder', 'o')
            ->where(
                $query->expr()->orX(
                    $query->expr()->andx(
                        $query->expr()->eq('r.handled', 'FALSE'),
                        $query->expr()->eq('r.removed', 'FALSE'),
                        $query->expr()->isNull('r.editOrder'),
                        $query->expr()->eq('ro.removed', 'FALSE'),
                        $query->expr()->eq('ro.creator', ':academic')
                    ),
                    $query->expr()->andx(
                        $query->expr()->eq('r.handled', 'FALSE'),
                        $query->expr()->eq('r.removed', 'FALSE'),
                        $query->expr()->isNotNull('r.editOrder'),
                        $query->expr()->eq('o.removed', 'FALSE'),
                        $query->expr()->eq('o.creator', ':academic')
                    )
                )
            )
            ->setParameter('academic', $academic)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param Academic $academic
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    public function findActiveRejectsByAcademic(Academic $academic)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('r')
            ->from('LogisticsBundle\Entity\Request', 'r')
            ->innerJoin('r.editOrder', 'o')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('r.handled', 'TRUE'),
                    $query->expr()->eq('r.removed', 'FALSE'),
                    $query->expr()->eq('o.approved', 'FALSE'),
                    $query->expr()->eq('o.removed', 'FALSE'),
                    $query->expr()->eq('o.creator', ':academic')
                )
            )
            ->setParameter('academic', $academic->getId())
            ->getQuery()
            ->getResult();
    }

    /**
     * @param Academic $academic
     * @return ArrayCollection
     */
    public function findHandledByAcademic(Academic $academic)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('r')
            ->from('LogisticsBundle\Entity\Request', 'r')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('r.contact', ':academic'),
                    $query->expr()->eq('r.handled', 'TRUE'),
                    $query->expr()->eq('r.removed', 'FALSE'),
                )
            )
            ->setParameter('academic', $academic)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param Academic $academic
     * @return ArrayCollection
     */
    public function findUnhandledByAcademic(Academic $academic)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('r')
            ->from('LogisticsBundle\Entity\Request', 'r')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('r.contact', ':academic'),
                    $query->expr()->eq('r.handled', 'FALSE'),
                    $query->expr()->eq('r.removed', 'FALSE'),
                )
            )
            ->setParameter('academic', $academic)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param Unit $unit
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    public function findActiveRejectsByUnit(Unit $unit)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('r')
            ->from('LogisticsBundle\Entity\Request', 'r')
            ->innerJoin('r.editOrder', 'o')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('r.handled', 'TRUE'),
                    $query->expr()->eq('r.removed', 'FALSE'),
                    $query->expr()->eq('o.approved', 'FALSE'),
                    $query->expr()->eq('o.removed', 'FALSE'),
                    $query->expr()->eq('o.unit', ':unit')
                )
            )
            ->setParameter('unit', $unit->getId())
            ->getQuery()
            ->getResult();
    }
}
