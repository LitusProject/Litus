<?php
/**
 * Litus is a project by a group of students from the KU Leuven. The goal is to create
 * various applications to support the IT needs of student unions.
 *
 * @author Niels Avonds <niels.avonds@litus.cc>
 * @author Karsten Daemen <karsten.daemen@litus.cc>
 * @author Koen Certyn <koen.certyn@litus.cc>
 * @author Bram Gotink <bram.gotink@litus.cc>
 * @author Dario Incalza <dario.incalza@litus.cc>
 * @author Pieter Maene <pieter.maene@litus.cc>
 * @author Kristof MariÃ«n <kristof.marien@litus.cc>
 * @author Lars Vierbergen <lars.vierbergen@litus.cc>
 * @author Daan Wendelen <daan.wendelen@litus.cc>
 * @author Mathijs Cuppens <mathijs.cuppens@litus.cc>
 * @author Floris Kint <floris.kint@vtk.be>
 *
 * @license http://litus.cc/LICENSE
 */

namespace LogisticsBundle\Repository;

use CommonBundle\Entity\General\Organization\Unit;
use CommonBundle\Entity\General\Organization\Unit as UnitEntity;
use LogisticsBundle\Entity\Order as OrderEntity;
use Doctrine\Common\Collections\ArrayCollection;
use CommonBundle\Entity\User\Person\Academic;

/**
 * Request
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Request extends \CommonBundle\Component\Doctrine\ORM\EntityRepository
{
    /**
     * @param  integer $id
     * @return \LogisticsBundle\Entity\Request
     */
    public function findRequestById($id)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('r')
            ->from('LogisticsBundle\Entity\Request', 'r')
            ->where(
                $query->expr()->eq('r.id', ':id')
            )
            ->setParameter('id', $id)
            ->getQuery()
            ->getSingleResult();
    }

    /**
     * @return ArrayCollection
     */
    public function findNewRequests()
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('r')
            ->from('LogisticsBundle\Entity\Request', 'r')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('r.handled', 'FALSE'),
                    $query->expr()->eq('r.removed', 'FALSE')
                )
            )
            ->getQuery()
            ->getResult();
    }

    /**
     * @return ArrayCollection
     */
    public function findAllUnhandledByUnit(UnitEntity $unit)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('r')
            ->from('LogisticsBundle\Entity\Request', 'r')
            ->innerJoin('r.referencedOrder', 'o')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('r.handled', 'FALSE'),
                    $query->expr()->eq('o.unit', ':unit'),
                    $query->expr()->eq('o.removed', 'FALSE')
                )
            )
            ->setParameter('unit', $unit->getId())
            ->getQuery()
            ->getResult();
    }

    /**
     * @return ArrayCollection
     */
    public function findUnhandledRequestsByOrder(OrderEntity $order)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('r')
            ->from('LogisticsBundle\Entity\Request', 'r')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('r.handled', 'FALSE'),
                    $query->expr()->eq('r.referencedOrder', ':order')
                )
            )
            ->setParameter('order', $order->getId())
            ->getQuery()
            ->getResult();
    }

    /**
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    public function findAllUnhandledByAcademic(Academic $academic)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('r')
            ->from('LogisticsBundle\Entity\Request', 'r')
            ->innerJoin('r.referencedOrder', 'o')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('r.handled', 'FALSE'),
                    $query->expr()->eq('o.creator', ':academic'),
                    $query->expr()->eq('o.removed', 'FALSE')
                )
            )
            ->setParameter('academic', $academic->getId())
            ->getQuery()
            ->getResult();
    }

    /**
     * @param Academic $academic
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    public function findRejectsByAcademic(Academic $academic)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('r')
            ->from('LogisticsBundle\Entity\Request', 'r')
            ->innerJoin('r.referencedOrder', 'o')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('r.handled', 'TRUE'),
                    $query->expr()->eq('o.approved', 'FALSE'),
                    $query->expr()->eq('o.removed', 'FALSE'),
                    $query->expr()->eq('o.creator', ':academic')
                )
            )
            ->setParameter('academic', $academic->getId())
            ->getQuery()
            ->getResult();
    }

    /**
     * @param Unit $unit
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    public function findRejectsByUnit(Unit $unit)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        return $query->select('r')
            ->from('LogisticsBundle\Entity\Request', 'r')
            ->innerJoin('r.referencedOrder', 'o')
            ->where(
                $query->expr()->andx(
                    $query->expr()->eq('r.handled', 'TRUE'),
                    $query->expr()->eq('o.approved', 'FALSE'),
                    $query->expr()->eq('o.removed', 'FALSE'),
                    $query->expr()->eq('o.unit', ':unit')
                )
            )
            ->setParameter('unit', $unit->getId())
            ->getQuery()
            ->getResult();
    }

}
