<?php

namespace Litus\Repository\Sport;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * Lap
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Lap extends EntityRepository
{

    public function findPrevious($nbResults = 1)
    {
        $queryBuilder = new QueryBuilder(
            $this->_em
        );

        $queryBuilder->select('l')
            ->from('Litus\Entity\Sport\Lap', 'l')
            ->where('l.startTime is not null AND l.endTime is not null')
            ->orderBy('l.registrationTime', 'DESC')
            ->setMaxResults($nbResults);
        $resultSet = $queryBuilder->getQuery()
            ->getResult();

        return array_reverse($resultSet);
    }

    public function findCurrent()
    {
        $queryBuilder = new QueryBuilder(
            $this->_em
        );

        $queryBuilder->select('l')
            ->from('Litus\Entity\Sport\Lap', 'l')
            ->where('l.startTime is not null AND l.endTime is null')
            ->orderBy('l.registrationTime', 'DESC')
            ->setMaxResults(1);
        $resultSet = $queryBuilder->getQuery()
            ->getResult();

        if (isset($resultSet[0]))
            return $resultSet[0];

        return null;
    }

    public function findNext($nbResults = 1)
    {
        $queryBuilder = new QueryBuilder(
            $this->_em
        );

        $queryBuilder->select('l')
            ->from('Litus\Entity\Sport\Lap', 'l')
            ->where('l.startTime is null AND l.endTime is null')
            ->orderBy('l.registrationTime', 'ASC')
            ->setMaxResults($nbResults);
        $resultSet = $queryBuilder->getQuery()
            ->getResult();

        if (1 == $nbResults)
            return isset($resultSet[0]) ? $resultSet[0] : null;

        return $resultSet;
    }

    public function countAll()
    {
        $queryBuilder = new QueryBuilder(
            $this->_em
        );

        $queryBuilder->select('l')
            ->from('Litus\Entity\Sport\Lap', 'l')
            ->select($queryBuilder->expr()->count('l.id'))
            ->where('l.startTime is not null AND l.endTime is not null');

        $resultSet = $queryBuilder->getQuery()
            ->getResult();

        return $resultSet[0][1];
    }

    public function countRunners()
    {
        $queryBuilder = new QueryBuilder(
            $this->_em
        );

        $queryBuilder->select('l')
            ->from('Litus\Entity\Sport\Lap', 'l')
            ->select($queryBuilder->expr()->count('DISTINCT l.runner'));

        $resultSet = $queryBuilder->getQuery()
            ->getResult();

        return $resultSet[0][1];
    }
}
