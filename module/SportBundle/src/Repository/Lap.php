<?php

namespace SportBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * Lap
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Lap extends EntityRepository
{
    public function findPrevious($nbResults = 1)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('l')
            ->from('SportBundle\Entity\Lap', 'l')
            ->where(
                $query->expr()->andX(
                    $query->expr()->isNotNull('l.startTime'),
                    $query->expr()->isNotNull('l.endTime')
                )
            )
            ->orderBy('l.registrationTime', 'DESC')
            ->setMaxResults($nbResults)
            ->getQuery()
            ->getResult();

        return array_reverse($resultSet);
    }

    public function findCurrent()
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('l')
            ->from('SportBundle\Entity\Lap', 'l')
            ->where(
                $query->expr()->andX(
                    $query->expr()->isNotNull('l.startTime'),
                    $query->expr()->isNotNull('l.endTime')
                )
            )
            ->orderBy('l.registrationTime', 'DESC')
            ->setMaxResults(1)
            ->getQuery()
            ->getResult();

        if (isset($resultSet[0]))
            return $resultSet[0];

        return null;
    }

    public function findNext($nbResults = 1)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('l')
            ->from('SportBundle\Entity\Lap', 'l')
            ->where(
                $query->expr()->andX(
                    $query->expr()->isNull('l.startTime'),
                    $query->expr()->isNull('l.endTime')
                )
            )
            ->orderBy('l.registrationTime', 'ASC')
            ->setMaxResults($nbResults)
            ->getQuery()
            ->getResult();

        if (1 == $nbResults)
            return isset($resultSet[0]) ? $resultSet[0] : null;

        return $resultSet;
    }

    public function countAll()
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('l')
            ->from('SportBundle\Entity\Lap', 'l')
            ->select(
                $query->expr()->count('l.id')
            )
            ->where(
                $query->expr()->andX(
                    $query->expr()->isNotNull('l.startTime'),
                    $query->expr()->isNotNull('l.endTime')
                )
            )
            ->getQuery()
            ->getResult();

        return $resultSet[0][1];
    }

    public function countRunners()
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('l')
            ->from('SportBundle\Entity\Lap', 'l')
            ->select(
                $query->expr()->countDistinct('l.runner')
            )
            ->getQuery()
            ->getResult();

        return $resultSet[0][1];
    }
}
